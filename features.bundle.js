/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "../bpmn-io/bpmn-js-color-picker/node_modules/bpmn-js/lib/util/ModelUtil.js":
/*!**********************************************************************************!*\
  !*** ../bpmn-io/bpmn-js-color-picker/node_modules/bpmn-js/lib/util/ModelUtil.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBusinessObject: () => (/* binding */ getBusinessObject),\n/* harmony export */   getDi: () => (/* binding */ getDi),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   isAny: () => (/* binding */ isAny)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/bpmn-js-color-picker/node_modules/min-dash/dist/index.esm.js\");\n\n\n\n/**\n * Is an element of the given BPMN type?\n *\n * @param  {djs.model.Base|ModdleElement} element\n * @param  {string} type\n *\n * @return {boolean}\n */\nfunction is(element, type) {\n  var bo = getBusinessObject(element);\n\n  return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);\n}\n\n\n/**\n * Return true if element has any of the given types.\n *\n * @param {djs.model.Base} element\n * @param {Array<string>} types\n *\n * @return {boolean}\n */\nfunction isAny(element, types) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.some)(types, function(t) {\n    return is(element, t);\n  });\n}\n\n/**\n * Return the business object for a given element.\n *\n * @param  {djs.model.Base|ModdleElement} element\n *\n * @return {ModdleElement}\n */\nfunction getBusinessObject(element) {\n  return (element && element.businessObject) || element;\n}\n\n/**\n * Return the di object for a given element.\n *\n * @param  {djs.model.Base} element\n *\n * @return {ModdleElement}\n */\nfunction getDi(element) {\n  return element && element.di;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnBtbi1pby9icG1uLWpzLWNvbG9yLXBpY2tlci9ub2RlX21vZHVsZXMvYnBtbi1qcy9saWIvdXRpbC9Nb2RlbFV0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFa0I7OztBQUdsQjtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhCQUE4QjtBQUMxQyxZQUFZLFFBQVE7QUFDcEI7QUFDQSxZQUFZO0FBQ1o7QUFDTztBQUNQOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsZUFBZTtBQUMxQjtBQUNBLFlBQVk7QUFDWjtBQUNPO0FBQ1AsU0FBUyw4Q0FBSTtBQUNiO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksOEJBQThCO0FBQzFDO0FBQ0EsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0JBQWdCO0FBQzVCO0FBQ0EsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2RheXMtMjAyMy8uLi9icG1uLWlvL2JwbW4tanMtY29sb3ItcGlja2VyL25vZGVfbW9kdWxlcy9icG1uLWpzL2xpYi91dGlsL01vZGVsVXRpbC5qcz85MjAyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHNvbWVcbn0gZnJvbSAnbWluLWRhc2gnO1xuXG5cbi8qKlxuICogSXMgYW4gZWxlbWVudCBvZiB0aGUgZ2l2ZW4gQlBNTiB0eXBlP1xuICpcbiAqIEBwYXJhbSAge2Rqcy5tb2RlbC5CYXNlfE1vZGRsZUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZVxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpcyhlbGVtZW50LCB0eXBlKSB7XG4gIHZhciBibyA9IGdldEJ1c2luZXNzT2JqZWN0KGVsZW1lbnQpO1xuXG4gIHJldHVybiBibyAmJiAodHlwZW9mIGJvLiRpbnN0YW5jZU9mID09PSAnZnVuY3Rpb24nKSAmJiBiby4kaW5zdGFuY2VPZih0eXBlKTtcbn1cblxuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIGVsZW1lbnQgaGFzIGFueSBvZiB0aGUgZ2l2ZW4gdHlwZXMuXG4gKlxuICogQHBhcmFtIHtkanMubW9kZWwuQmFzZX0gZWxlbWVudFxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSB0eXBlc1xuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FueShlbGVtZW50LCB0eXBlcykge1xuICByZXR1cm4gc29tZSh0eXBlcywgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBpcyhlbGVtZW50LCB0KTtcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBidXNpbmVzcyBvYmplY3QgZm9yIGEgZ2l2ZW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtkanMubW9kZWwuQmFzZXxNb2RkbGVFbGVtZW50fSBlbGVtZW50XG4gKlxuICogQHJldHVybiB7TW9kZGxlRWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1c2luZXNzT2JqZWN0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIChlbGVtZW50ICYmIGVsZW1lbnQuYnVzaW5lc3NPYmplY3QpIHx8IGVsZW1lbnQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBkaSBvYmplY3QgZm9yIGEgZ2l2ZW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtkanMubW9kZWwuQmFzZX0gZWxlbWVudFxuICpcbiAqIEByZXR1cm4ge01vZGRsZUVsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREaShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQuZGk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js-color-picker/node_modules/bpmn-js/lib/util/ModelUtil.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js-color-picker/node_modules/min-dom/dist/index.esm.js":
/*!******************************************************************************!*\
  !*** ../bpmn-io/bpmn-js-color-picker/node_modules/min-dom/dist/index.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignStyle: () => (/* binding */ assign),\n/* harmony export */   attr: () => (/* binding */ attr),\n/* harmony export */   classes: () => (/* binding */ classes),\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   closest: () => (/* binding */ closest),\n/* harmony export */   delegate: () => (/* binding */ delegate),\n/* harmony export */   domify: () => (/* binding */ domify$1),\n/* harmony export */   event: () => (/* binding */ event),\n/* harmony export */   matches: () => (/* binding */ matches),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   queryAll: () => (/* binding */ all),\n/* harmony export */   remove: () => (/* binding */ remove)\n/* harmony export */ });\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function (e) {\n    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {\n      if (k !== 'default' && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n\n/**\n * Flatten array, one level deep.\n *\n * @param {Array<?>} arr\n *\n * @return {Array<?>}\n */\n\nconst nativeToString = Object.prototype.toString;\nconst nativeHasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isUndefined(obj) {\n  return obj === undefined;\n}\n\nfunction isArray(obj) {\n  return nativeToString.call(obj) === '[object Array]';\n}\n\n/**\n * Return true, if target owns a property with the given key.\n *\n * @param {Object} target\n * @param {String} key\n *\n * @return {Boolean}\n */\nfunction has(target, key) {\n  return nativeHasOwnProperty.call(target, key);\n}\n\n\n/**\n * Iterate over collection; returning something\n * (non-undefined) will stop iteration.\n *\n * @param  {Array|Object} collection\n * @param  {Function} iterator\n *\n * @return {Object} return result that stopped the iteration\n */\nfunction forEach(collection, iterator) {\n\n  let val,\n      result;\n\n  if (isUndefined(collection)) {\n    return;\n  }\n\n  const convertKey = isArray(collection) ? toNum : identity;\n\n  for (let key in collection) {\n\n    if (has(collection, key)) {\n      val = collection[key];\n\n      result = iterator(val, convertKey(key));\n\n      if (result === false) {\n        return val;\n      }\n    }\n  }\n}\n\n\nfunction identity(arg) {\n  return arg;\n}\n\nfunction toNum(arg) {\n  return Number(arg);\n}\n\n/**\n * Assigns style attributes in a style-src compliant way.\n *\n * @param {Element} element\n * @param {...Object} styleSources\n *\n * @return {Element} the element\n */\nfunction assign(element, ...styleSources) {\n  const target = element.style;\n\n  forEach(styleSources, function(style) {\n    if (!style) {\n      return;\n    }\n\n    forEach(style, function(value, key) {\n      target[key] = value;\n    });\n  });\n\n  return element;\n}\n\n/**\n * Set attribute `name` to `val`, or get attr `name`.\n *\n * @param {Element} el\n * @param {String} name\n * @param {String} [val]\n * @api public\n */\nfunction attr(el, name, val) {\n\n  // get\n  if (arguments.length == 2) {\n    return el.getAttribute(name);\n  }\n\n  // remove\n  if (val === null) {\n    return el.removeAttribute(name);\n  }\n\n  // set\n  el.setAttribute(name, val);\n\n  return el;\n}\n\n/**\n * Taken from https://github.com/component/classes\n *\n * Without the component bits.\n */\n\n/**\n * toString reference.\n */\n\nconst toString = Object.prototype.toString;\n\n/**\n * Wrap `el` in a `ClassList`.\n *\n * @param {Element} el\n * @return {ClassList}\n * @api public\n */\n\nfunction classes(el) {\n  return new ClassList(el);\n}\n\n/**\n * Initialize a new ClassList for `el`.\n *\n * @param {Element} el\n * @api private\n */\n\nfunction ClassList(el) {\n  if (!el || !el.nodeType) {\n    throw new Error('A DOM element reference is required');\n  }\n  this.el = el;\n  this.list = el.classList;\n}\n\n/**\n * Add class `name` if not already present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.add = function(name) {\n  this.list.add(name);\n  return this;\n};\n\n/**\n * Remove class `name` when present, or\n * pass a regular expression to remove\n * any which match.\n *\n * @param {String|RegExp} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.remove = function(name) {\n  if ('[object RegExp]' == toString.call(name)) {\n    return this.removeMatching(name);\n  }\n\n  this.list.remove(name);\n  return this;\n};\n\n/**\n * Remove all classes matching `re`.\n *\n * @param {RegExp} re\n * @return {ClassList}\n * @api private\n */\n\nClassList.prototype.removeMatching = function(re) {\n  const arr = this.array();\n  for (let i = 0; i < arr.length; i++) {\n    if (re.test(arr[i])) {\n      this.remove(arr[i]);\n    }\n  }\n  return this;\n};\n\n/**\n * Toggle class `name`, can force state via `force`.\n *\n * For browsers that support classList, but do not support `force` yet,\n * the mistake will be detected and corrected.\n *\n * @param {String} name\n * @param {Boolean} force\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.toggle = function(name, force) {\n  if ('undefined' !== typeof force) {\n    if (force !== this.list.toggle(name, force)) {\n      this.list.toggle(name); // toggle again to correct\n    }\n  } else {\n    this.list.toggle(name);\n  }\n  return this;\n};\n\n/**\n * Return an array of classes.\n *\n * @return {Array}\n * @api public\n */\n\nClassList.prototype.array = function() {\n  return Array.from(this.list);\n};\n\n/**\n * Check if class `name` is present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.has =\nClassList.prototype.contains = function(name) {\n  return this.list.contains(name);\n};\n\n/**\n * Remove all children from the given element.\n */\nfunction clear(el) {\n\n  var c;\n\n  while (el.childNodes.length) {\n    c = el.childNodes[0];\n    el.removeChild(c);\n  }\n\n  return el;\n}\n\n/**\n * @param { HTMLElement } element\n * @param { String } selector\n *\n * @return { boolean }\n */\nfunction matches(element, selector) {\n  return element && typeof element.matches === 'function' && element.matches(selector);\n}\n\n/**\n * Closest\n *\n * @param {Element} el\n * @param {String} selector\n * @param {Boolean} checkYourSelf (optional)\n */\nfunction closest(element, selector, checkYourSelf) {\n  var currentElem = checkYourSelf ? element : element.parentNode;\n\n  while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE &&\n      currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {\n\n    if (matches(currentElem, selector)) {\n      return currentElem;\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return matches(currentElem, selector) ? currentElem : null;\n}\n\nvar componentEvent = {};\n\nvar bind$1 = window.addEventListener ? 'addEventListener' : 'attachEvent',\n    unbind$1 = window.removeEventListener ? 'removeEventListener' : 'detachEvent',\n    prefix = bind$1 !== 'addEventListener' ? 'on' : '';\n\n/**\n * Bind `el` event `type` to `fn`.\n *\n * @param {Element} el\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @return {Function}\n * @api public\n */\n\nvar bind_1 = componentEvent.bind = function(el, type, fn, capture){\n  el[bind$1](prefix + type, fn, capture || false);\n  return fn;\n};\n\n/**\n * Unbind `el` event `type`'s callback `fn`.\n *\n * @param {Element} el\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @return {Function}\n * @api public\n */\n\nvar unbind_1 = componentEvent.unbind = function(el, type, fn, capture){\n  el[unbind$1](prefix + type, fn, capture || false);\n  return fn;\n};\n\nvar event = /*#__PURE__*/_mergeNamespaces({\n  __proto__: null,\n  bind: bind_1,\n  unbind: unbind_1,\n  'default': componentEvent\n}, [componentEvent]);\n\n/**\n * Module dependencies.\n */\n\n/**\n * Delegate event `type` to `selector`\n * and invoke `fn(e)`. A callback function\n * is returned which may be passed to `.unbind()`.\n *\n * @param {Element} el\n * @param {String} selector\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @return {Function}\n * @api public\n */\n\n// Some events don't bubble, so we want to bind to the capture phase instead\n// when delegating.\nvar forceCaptureEvents = [ 'focus', 'blur' ];\n\nfunction bind(el, selector, type, fn, capture) {\n  if (forceCaptureEvents.indexOf(type) !== -1) {\n    capture = true;\n  }\n\n  return event.bind(el, type, function(e) {\n    var target = e.target || e.srcElement;\n    e.delegateTarget = closest(target, selector, true);\n    if (e.delegateTarget) {\n      fn.call(el, e);\n    }\n  }, capture);\n}\n\n/**\n * Unbind event `type`'s callback `fn`.\n *\n * @param {Element} el\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @api public\n */\nfunction unbind(el, type, fn, capture) {\n  if (forceCaptureEvents.indexOf(type) !== -1) {\n    capture = true;\n  }\n\n  return event.unbind(el, type, fn, capture);\n}\n\nvar delegate = {\n  bind,\n  unbind\n};\n\n/**\n * Expose `parse`.\n */\n\nvar domify = parse;\n\n/**\n * Tests for browser support.\n */\n\nvar innerHTMLBug = false;\nvar bugTestDiv;\nif (typeof document !== 'undefined') {\n  bugTestDiv = document.createElement('div');\n  // Setup\n  bugTestDiv.innerHTML = '  <link/><table></table><a href=\"/a\">a</a><input type=\"checkbox\"/>';\n  // Make sure that link elements get serialized correctly by innerHTML\n  // This requires a wrapper element in IE\n  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;\n  bugTestDiv = undefined;\n}\n\n/**\n * Wrap map from jquery.\n */\n\nvar map = {\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  // for script/link/style tags to work in IE6-8, you have to wrap\n  // in a div with a non-whitespace character in front, ha!\n  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']\n};\n\nmap.td =\nmap.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nmap.option =\nmap.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nmap.thead =\nmap.tbody =\nmap.colgroup =\nmap.caption =\nmap.tfoot = [1, '<table>', '</table>'];\n\nmap.polyline =\nmap.ellipse =\nmap.polygon =\nmap.circle =\nmap.text =\nmap.line =\nmap.path =\nmap.rect =\nmap.g = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">','</svg>'];\n\n/**\n * Parse `html` and return a DOM Node instance, which could be a TextNode,\n * HTML DOM Node of some kind (<div> for example), or a DocumentFragment\n * instance, depending on the contents of the `html` string.\n *\n * @param {String} html - HTML string to \"domify\"\n * @param {Document} doc - The `document` instance to create the Node for\n * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance\n * @api private\n */\n\nfunction parse(html, doc) {\n  if ('string' != typeof html) throw new TypeError('String expected');\n\n  // default to the global `document` object\n  if (!doc) doc = document;\n\n  // tag name\n  var m = /<([\\w:]+)/.exec(html);\n  if (!m) return doc.createTextNode(html);\n\n  html = html.replace(/^\\s+|\\s+$/g, ''); // Remove leading/trailing whitespace\n\n  var tag = m[1];\n\n  // body support\n  if (tag == 'body') {\n    var el = doc.createElement('html');\n    el.innerHTML = html;\n    return el.removeChild(el.lastChild);\n  }\n\n  // wrap map\n  var wrap = Object.prototype.hasOwnProperty.call(map, tag) ? map[tag] : map._default;\n  var depth = wrap[0];\n  var prefix = wrap[1];\n  var suffix = wrap[2];\n  var el = doc.createElement('div');\n  el.innerHTML = prefix + html + suffix;\n  while (depth--) el = el.lastChild;\n\n  // one element\n  if (el.firstChild == el.lastChild) {\n    return el.removeChild(el.firstChild);\n  }\n\n  // several elements\n  var fragment = doc.createDocumentFragment();\n  while (el.firstChild) {\n    fragment.appendChild(el.removeChild(el.firstChild));\n  }\n\n  return fragment;\n}\n\nvar domify$1 = domify;\n\nfunction query(selector, el) {\n  el = el || document;\n\n  return el.querySelector(selector);\n}\n\nfunction all(selector, el) {\n  el = el || document;\n\n  return el.querySelectorAll(selector);\n}\n\nfunction remove(el) {\n  el.parentNode && el.parentNode.removeChild(el);\n}\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js-color-picker/node_modules/min-dom/dist/index.esm.js\n");

/***/ }),

/***/ "../bpmn-io/diagram-js/node_modules/path-intersection/intersect.js":
/*!*************************************************************************!*\
  !*** ../bpmn-io/diagram-js/node_modules/path-intersection/intersect.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\n\n/**\n * This file contains source code adapted from Snap.svg (licensed Apache-2.0).\n *\n * @see https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js\n */\n\n/* eslint no-fallthrough: \"off\" */\n\nvar p2s = /,?([a-z]),?/gi,\n    toFloat = parseFloat,\n    math = Math,\n    PI = math.PI,\n    mmin = math.min,\n    mmax = math.max,\n    pow = math.pow,\n    abs = math.abs,\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[-+]?\\d+)?)[\\s]*,?[\\s]*/ig;\n\nvar isArray = Array.isArray || function(o) { return o instanceof Array; };\n\nfunction hasProperty(obj, property) {\n  return Object.prototype.hasOwnProperty.call(obj, property);\n}\n\nfunction clone(obj) {\n\n  if (typeof obj == 'function' || Object(obj) !== obj) {\n    return obj;\n  }\n\n  var res = new obj.constructor;\n\n  for (var key in obj) {\n    if (hasProperty(obj, key)) {\n      res[key] = clone(obj[key]);\n    }\n  }\n\n  return res;\n}\n\nfunction repush(array, item) {\n  for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n    return array.push(array.splice(i, 1)[0]);\n  }\n}\n\nfunction cacher(f) {\n\n  function newf() {\n\n    var arg = Array.prototype.slice.call(arguments, 0),\n        args = arg.join('\\u2400'),\n        cache = newf.cache = newf.cache || {},\n        count = newf.count = newf.count || [];\n\n    if (hasProperty(cache, args)) {\n      repush(count, args);\n      return cache[args];\n    }\n\n    count.length >= 1e3 && delete cache[count.shift()];\n    count.push(args);\n    cache[args] = f.apply(0, arg);\n\n    return cache[args];\n  }\n  return newf;\n}\n\nfunction parsePathString(pathString) {\n\n  if (!pathString) {\n    return null;\n  }\n\n  var pth = paths(pathString);\n\n  if (pth.arr) {\n    return clone(pth.arr);\n  }\n\n  var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },\n      data = [];\n\n  if (isArray(pathString) && isArray(pathString[0])) { // rough assumption\n    data = clone(pathString);\n  }\n\n  if (!data.length) {\n\n    String(pathString).replace(pathCommand, function(a, b, c) {\n      var params = [],\n          name = b.toLowerCase();\n\n      c.replace(pathValues, function(a, b) {\n        b && params.push(+b);\n      });\n\n      if (name == 'm' && params.length > 2) {\n        data.push([b].concat(params.splice(0, 2)));\n        name = 'l';\n        b = b == 'm' ? 'l' : 'L';\n      }\n\n      while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    });\n  }\n\n  data.toString = paths.toString;\n  pth.arr = clone(data);\n\n  return data;\n}\n\nfunction paths(ps) {\n  var p = paths.ps = paths.ps || {};\n\n  if (p[ps]) {\n    p[ps].sleep = 100;\n  } else {\n    p[ps] = {\n      sleep: 100\n    };\n  }\n\n  setTimeout(function() {\n    for (var key in p) {\n      if (hasProperty(p, key) && key != ps) {\n        p[key].sleep--;\n        !p[key].sleep && delete p[key];\n      }\n    }\n  });\n\n  return p[ps];\n}\n\nfunction rectBBox(x, y, width, height) {\n\n  if (arguments.length === 1) {\n    y = x.y;\n    width = x.width;\n    height = x.height;\n    x = x.x;\n  }\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    x2: x + width,\n    y2: y + height\n  };\n}\n\nfunction pathToString() {\n  return this.join(',').replace(p2s, '$1');\n}\n\nfunction pathClone(pathArray) {\n  var res = clone(pathArray);\n  res.toString = pathToString;\n  return res;\n}\n\nfunction findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n  var t1 = 1 - t,\n      t13 = pow(t1, 3),\n      t12 = pow(t1, 2),\n      t2 = t * t,\n      t3 = t2 * t,\n      x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n      y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n\n  return {\n    x: fixError(x),\n    y: fixError(y)\n  };\n}\n\nfunction bezierBBox(points) {\n\n  var bbox = curveBBox.apply(null, points);\n\n  return rectBBox(\n    bbox.x0,\n    bbox.y0,\n    bbox.x1 - bbox.x0,\n    bbox.y1 - bbox.y0\n  );\n}\n\nfunction isPointInsideBBox(bbox, x, y) {\n  return x >= bbox.x &&\n    x <= bbox.x + bbox.width &&\n    y >= bbox.y &&\n    y <= bbox.y + bbox.height;\n}\n\nfunction isBBoxIntersect(bbox1, bbox2) {\n  bbox1 = rectBBox(bbox1);\n  bbox2 = rectBBox(bbox2);\n  return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n    || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n    || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n        || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n    && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n        || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n}\n\nfunction base3(t, p1, p2, p3, p4) {\n  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n      t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n  return t * t2 - 3 * p1 + 3 * p2;\n}\n\nfunction bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\n  if (z == null) {\n    z = 1;\n  }\n\n  z = z > 1 ? 1 : z < 0 ? 0 : z;\n\n  var z2 = z / 2,\n      n = 12,\n      Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n      Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n      sum = 0;\n\n  for (var i = 0; i < n; i++) {\n    var ct = z2 * Tvalues[i] + z2,\n        xbase = base3(ct, x1, x2, x3, x4),\n        ybase = base3(ct, y1, y2, y3, y4),\n        comb = xbase * xbase + ybase * ybase;\n\n    sum += Cvalues[i] * math.sqrt(comb);\n  }\n\n  return z2 * sum;\n}\n\n\nfunction intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {\n\n  if (\n    mmax(x1, x2) < mmin(x3, x4) ||\n      mmin(x1, x2) > mmax(x3, x4) ||\n      mmax(y1, y2) < mmin(y3, y4) ||\n      mmin(y1, y2) > mmax(y3, y4)\n  ) {\n    return;\n  }\n\n  var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n  if (!denominator) {\n    return;\n  }\n\n  var px = fixError(nx / denominator),\n      py = fixError(ny / denominator),\n      px2 = +px.toFixed(2),\n      py2 = +py.toFixed(2);\n\n  if (\n    px2 < +mmin(x1, x2).toFixed(2) ||\n      px2 > +mmax(x1, x2).toFixed(2) ||\n      px2 < +mmin(x3, x4).toFixed(2) ||\n      px2 > +mmax(x3, x4).toFixed(2) ||\n      py2 < +mmin(y1, y2).toFixed(2) ||\n      py2 > +mmax(y1, y2).toFixed(2) ||\n      py2 < +mmin(y3, y4).toFixed(2) ||\n      py2 > +mmax(y3, y4).toFixed(2)\n  ) {\n    return;\n  }\n\n  return { x: px, y: py };\n}\n\nfunction fixError(number) {\n  return Math.round(number * 100000000000) / 100000000000;\n}\n\nfunction findBezierIntersections(bez1, bez2, justCount) {\n  var bbox1 = bezierBBox(bez1),\n      bbox2 = bezierBBox(bez2);\n\n  if (!isBBoxIntersect(bbox1, bbox2)) {\n    return justCount ? 0 : [];\n  }\n\n  // As an optimization, lines will have only 1 segment\n\n  var l1 = bezlen.apply(0, bez1),\n      l2 = bezlen.apply(0, bez2),\n      n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1,\n      n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1,\n      dots1 = [],\n      dots2 = [],\n      xy = {},\n      res = justCount ? 0 : [];\n\n  for (var i = 0; i < n1 + 1; i++) {\n    var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n    dots1.push({ x: p.x, y: p.y, t: i / n1 });\n  }\n\n  for (i = 0; i < n2 + 1; i++) {\n    p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n    dots2.push({ x: p.x, y: p.y, t: i / n2 });\n  }\n\n  for (i = 0; i < n1; i++) {\n\n    for (var j = 0; j < n2; j++) {\n      var di = dots1[i],\n          di1 = dots1[i + 1],\n          dj = dots2[j],\n          dj1 = dots2[j + 1],\n          ci = abs(di1.x - di.x) < .01 ? 'y' : 'x',\n          cj = abs(dj1.x - dj.x) < .01 ? 'y' : 'x',\n          is = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y),\n          key;\n\n      if (is) {\n        key = is.x.toFixed(9) + '#' + is.y.toFixed(9);\n\n        if (xy[key]) {\n          continue;\n        }\n\n        xy[key] = true;\n\n        var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n            t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\n        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\n          if (justCount) {\n            res++;\n          } else {\n            res.push({\n              x: is.x,\n              y: is.y,\n              t1: t1,\n              t2: t2\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return res;\n}\n\n\n/**\n * Find or counts the intersections between two SVG paths.\n *\n * Returns a number in counting mode and a list of intersections otherwise.\n *\n * A single intersection entry contains the intersection coordinates (x, y)\n * as well as additional information regarding the intersecting segments\n * on each path (segment1, segment2) and the relative location of the\n * intersection on these segments (t1, t2).\n *\n * The path may be an SVG path string or a list of path components\n * such as `[ [ 'M', 0, 10 ], [ 'L', 20, 0 ] ]`.\n *\n * @example\n *\n * var intersections = findPathIntersections(\n *   'M0,0L100,100',\n *   [ [ 'M', 0, 100 ], [ 'L', 100, 0 ] ]\n * );\n *\n * // intersections = [\n * //   { x: 50, y: 50, segment1: 1, segment2: 1, t1: 0.5, t2: 0.5 }\n * // ]\n *\n * @param {String|Array<PathDef>} path1\n * @param {String|Array<PathDef>} path2\n * @param {Boolean} [justCount=false]\n *\n * @return {Array<Intersection>|Number}\n */\nfunction findPathIntersections(path1, path2, justCount) {\n  path1 = pathToCurve(path1);\n  path2 = pathToCurve(path2);\n\n  var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n      res = justCount ? 0 : [];\n\n  for (var i = 0, ii = path1.length; i < ii; i++) {\n    var pi = path1[i];\n\n    if (pi[0] == 'M') {\n      x1 = x1m = pi[1];\n      y1 = y1m = pi[2];\n    } else {\n\n      if (pi[0] == 'C') {\n        bez1 = [x1, y1].concat(pi.slice(1));\n        x1 = bez1[6];\n        y1 = bez1[7];\n      } else {\n        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n        x1 = x1m;\n        y1 = y1m;\n      }\n\n      for (var j = 0, jj = path2.length; j < jj; j++) {\n        var pj = path2[j];\n\n        if (pj[0] == 'M') {\n          x2 = x2m = pj[1];\n          y2 = y2m = pj[2];\n        } else {\n\n          if (pj[0] == 'C') {\n            bez2 = [x2, y2].concat(pj.slice(1));\n            x2 = bez2[6];\n            y2 = bez2[7];\n          } else {\n            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n            x2 = x2m;\n            y2 = y2m;\n          }\n\n          var intr = findBezierIntersections(bez1, bez2, justCount);\n\n          if (justCount) {\n            res += intr;\n          } else {\n\n            for (var k = 0, kk = intr.length; k < kk; k++) {\n              intr[k].segment1 = i;\n              intr[k].segment2 = j;\n              intr[k].bez1 = bez1;\n              intr[k].bez2 = bez2;\n            }\n\n            res = res.concat(intr);\n          }\n        }\n      }\n    }\n  }\n\n  return res;\n}\n\n\nfunction pathToAbsolute(pathArray) {\n  var pth = paths(pathArray);\n\n  if (pth.abs) {\n    return pathClone(pth.abs);\n  }\n\n  if (!isArray(pathArray) || !isArray(pathArray && pathArray[0])) { // rough assumption\n    pathArray = parsePathString(pathArray);\n  }\n\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n\n  var res = [],\n      x = 0,\n      y = 0,\n      mx = 0,\n      my = 0,\n      start = 0,\n      pa0;\n\n  if (pathArray[0][0] == 'M') {\n    x = +pathArray[0][1];\n    y = +pathArray[0][2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n\n  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n    res.push(r = []);\n    pa = pathArray[i];\n    pa0 = pa[0];\n\n    if (pa0 != pa0.toUpperCase()) {\n      r[0] = pa0.toUpperCase();\n\n      switch (r[0]) {\n      case 'A':\n        r[1] = pa[1];\n        r[2] = pa[2];\n        r[3] = pa[3];\n        r[4] = pa[4];\n        r[5] = pa[5];\n        r[6] = +pa[6] + x;\n        r[7] = +pa[7] + y;\n        break;\n      case 'V':\n        r[1] = +pa[1] + y;\n        break;\n      case 'H':\n        r[1] = +pa[1] + x;\n        break;\n      case 'M':\n        mx = +pa[1] + x;\n        my = +pa[2] + y;\n      default:\n        for (var j = 1, jj = pa.length; j < jj; j++) {\n          r[j] = +pa[j] + ((j % 2) ? x : y);\n        }\n      }\n    } else {\n      for (var k = 0, kk = pa.length; k < kk; k++) {\n        r[k] = pa[k];\n      }\n    }\n    pa0 = pa0.toUpperCase();\n\n    switch (r[0]) {\n    case 'Z':\n      x = +mx;\n      y = +my;\n      break;\n    case 'H':\n      x = r[1];\n      break;\n    case 'V':\n      y = r[1];\n      break;\n    case 'M':\n      mx = r[r.length - 2];\n      my = r[r.length - 1];\n    default:\n      x = r[r.length - 2];\n      y = r[r.length - 1];\n    }\n  }\n\n  res.toString = pathToString;\n  pth.abs = pathClone(res);\n\n  return res;\n}\n\nfunction isLine(bez) {\n  return (\n    bez[0] === bez[2] &&\n    bez[1] === bez[3] &&\n    bez[4] === bez[6] &&\n    bez[5] === bez[7]\n  );\n}\n\nfunction lineToCurve(x1, y1, x2, y2) {\n  return [\n    x1, y1, x2,\n    y2, x2, y2\n  ];\n}\n\nfunction qubicToCurve(x1, y1, ax, ay, x2, y2) {\n  var _13 = 1 / 3,\n      _23 = 2 / 3;\n\n  return [\n    _13 * x1 + _23 * ax,\n    _13 * y1 + _23 * ay,\n    _13 * x2 + _23 * ax,\n    _13 * y2 + _23 * ay,\n    x2,\n    y2\n  ];\n}\n\nfunction arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  var _120 = PI * 120 / 180,\n      rad = PI / 180 * (+angle || 0),\n      res = [],\n      xy,\n      rotate = cacher(function(x, y, rad) {\n        var X = x * math.cos(rad) - y * math.sin(rad),\n            Y = x * math.sin(rad) + y * math.cos(rad);\n\n        return { x: X, y: Y };\n      });\n\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n\n    var x = (x1 - x2) / 2,\n        y = (y1 - y2) / 2;\n\n    var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\n    if (h > 1) {\n      h = math.sqrt(h);\n      rx = h * rx;\n      ry = h * ry;\n    }\n\n    var rx2 = rx * rx,\n        ry2 = ry * ry,\n        k = (large_arc_flag == sweep_flag ? -1 : 1) *\n            math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n        cx = k * rx * y / ry + (x1 + x2) / 2,\n        cy = k * -ry * x / rx + (y1 + y2) / 2,\n        f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n        f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n    f1 = x1 < cx ? PI - f1 : f1;\n    f2 = x2 < cx ? PI - f2 : f2;\n    f1 < 0 && (f1 = PI * 2 + f1);\n    f2 < 0 && (f2 = PI * 2 + f2);\n\n    if (sweep_flag && f1 > f2) {\n      f1 = f1 - PI * 2;\n    }\n    if (!sweep_flag && f2 > f1) {\n      f2 = f2 - PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n\n  var df = f2 - f1;\n\n  if (abs(df) > _120) {\n    var f2old = f2,\n        x2old = x2,\n        y2old = y2;\n\n    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * math.cos(f2);\n    y2 = cy + ry * math.sin(f2);\n    res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n\n  df = f2 - f1;\n\n  var c1 = math.cos(f1),\n      s1 = math.sin(f1),\n      c2 = math.cos(f2),\n      s2 = math.sin(f2),\n      t = math.tan(df / 4),\n      hx = 4 / 3 * rx * t,\n      hy = 4 / 3 * ry * t,\n      m1 = [x1, y1],\n      m2 = [x1 + hx * s1, y1 - hy * c1],\n      m3 = [x2 + hx * s2, y2 - hy * c2],\n      m4 = [x2, y2];\n\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  } else {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    var newres = [];\n\n    for (var i = 0, ii = res.length; i < ii; i++) {\n      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n    }\n\n    return newres;\n  }\n}\n\n// Returns bounding box of cubic bezier curve.\n// Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n// Original version: NISHIO Hirokazu\n// Modifications: https://github.com/timo22345\nfunction curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var tvalues = [],\n      bounds = [[], []],\n      a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n  for (var i = 0; i < 2; ++i) {\n\n    if (i == 0) {\n      b = 6 * x0 - 12 * x1 + 6 * x2;\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n      c = 3 * x1 - 3 * x0;\n    } else {\n      b = 6 * y0 - 12 * y1 + 6 * y2;\n      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n      c = 3 * y1 - 3 * y0;\n    }\n\n    if (abs(a) < 1e-12) {\n\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n\n      t = -c / b;\n\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n\n      continue;\n    }\n\n    b2ac = b * b - 4 * c * a;\n    sqrtb2ac = math.sqrt(b2ac);\n\n    if (b2ac < 0) {\n      continue;\n    }\n\n    t1 = (-b + sqrtb2ac) / (2 * a);\n\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n\n    t2 = (-b - sqrtb2ac) / (2 * a);\n\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  var j = tvalues.length,\n      jlen = j,\n      mt;\n\n  while (j--) {\n    t = tvalues[j];\n    mt = 1 - t;\n    bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n    bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n  }\n\n  bounds[0][jlen] = x0;\n  bounds[1][jlen] = y0;\n  bounds[0][jlen + 1] = x3;\n  bounds[1][jlen + 1] = y3;\n  bounds[0].length = bounds[1].length = jlen + 2;\n\n  return {\n    x0: mmin.apply(0, bounds[0]),\n    y0: mmin.apply(0, bounds[1]),\n    x1: mmax.apply(0, bounds[0]),\n    y1: mmax.apply(0, bounds[1])\n  };\n}\n\nfunction pathToCurve(path) {\n\n  var pth = paths(path);\n\n  // return cached curve, if existing\n  if (pth.curve) {\n    return pathClone(pth.curve);\n  }\n\n  var curvedPath = pathToAbsolute(path),\n      attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },\n      processPath = function(path, d, pathCommand) {\n        var nx, ny;\n\n        if (!path) {\n          return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n        }\n\n        !(path[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);\n\n        switch (path[0]) {\n        case 'M':\n          d.X = path[1];\n          d.Y = path[2];\n          break;\n        case 'A':\n          path = ['C'].concat(arcToCurve.apply(0, [d.x, d.y].concat(path.slice(1))));\n          break;\n        case 'S':\n          if (pathCommand == 'C' || pathCommand == 'S') {\n\n            // In 'S' case we have to take into account, if the previous command is C/S.\n            nx = d.x * 2 - d.bx;\n\n            // And reflect the previous\n            ny = d.y * 2 - d.by;\n\n            // command's control point relative to the current point.\n          }\n          else {\n\n            // or some else or nothing\n            nx = d.x;\n            ny = d.y;\n          }\n          path = ['C', nx, ny].concat(path.slice(1));\n          break;\n        case 'T':\n          if (pathCommand == 'Q' || pathCommand == 'T') {\n\n            // In 'T' case we have to take into account, if the previous command is Q/T.\n            d.qx = d.x * 2 - d.qx;\n\n            // And make a reflection similar\n            d.qy = d.y * 2 - d.qy;\n\n            // to case 'S'.\n          }\n          else {\n\n            // or something else or nothing\n            d.qx = d.x;\n            d.qy = d.y;\n          }\n          path = ['C'].concat(qubicToCurve(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n          break;\n        case 'Q':\n          d.qx = path[1];\n          d.qy = path[2];\n          path = ['C'].concat(qubicToCurve(d.x, d.y, path[1], path[2], path[3], path[4]));\n          break;\n        case 'L':\n          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], path[2]));\n          break;\n        case 'H':\n          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], d.y));\n          break;\n        case 'V':\n          path = ['C'].concat(lineToCurve(d.x, d.y, d.x, path[1]));\n          break;\n        case 'Z':\n          path = ['C'].concat(lineToCurve(d.x, d.y, d.X, d.Y));\n          break;\n        }\n\n        return path;\n      },\n\n      fixArc = function(pp, i) {\n\n        if (pp[i].length > 7) {\n          pp[i].shift();\n          var pi = pp[i];\n\n          while (pi.length) {\n            pathCommands[i] = 'A'; // if created multiple C:s, their original seg is saved\n            pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n          }\n\n          pp.splice(i, 1);\n          ii = curvedPath.length;\n        }\n      },\n\n      pathCommands = [], // path commands of original path p\n      pfirst = '', // temporary holder for original path command\n      pathCommand = ''; // holder for previous path command of original path\n\n  for (var i = 0, ii = curvedPath.length; i < ii; i++) {\n    curvedPath[i] && (pfirst = curvedPath[i][0]); // save current path command\n\n    if (pfirst != 'C') // C is not saved yet, because it may be result of conversion\n    {\n      pathCommands[i] = pfirst; // Save current path command\n      i && (pathCommand = pathCommands[i - 1]); // Get previous path command pathCommand\n    }\n    curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand); // Previous path command is inputted to processPath\n\n    if (pathCommands[i] != 'A' && pfirst == 'C') pathCommands[i] = 'C'; // A is the only command\n    // which may produce multiple C:s\n    // so we have to make sure that C is also C in original path\n\n    fixArc(curvedPath, i); // fixArc adds also the right amount of A:s to pathCommands\n\n    var seg = curvedPath[i],\n        seglen = seg.length;\n\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n  }\n\n  // cache curve\n  pth.curve = pathClone(curvedPath);\n\n  return curvedPath;\n}\n\nmodule.exports = findPathIntersections;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/diagram-js/node_modules/path-intersection/intersect.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js-color-picker/colors/ColorContextPadProvider.js":
/*!*************************************************************************!*\
  !*** ../bpmn-io/bpmn-js-color-picker/colors/ColorContextPadProvider.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ColorContextPadProvider)\n/* harmony export */ });\n/* harmony import */ var bpmn_js_lib_draw_BpmnRenderUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bpmn-js/lib/draw/BpmnRenderUtil */ \"../bpmn-io/bpmn-js-color-picker/node_modules/bpmn-js/lib/util/ModelUtil.js\");\n\nfunction ColorContextPadProvider(contextPad, popupMenu, canvas, translate) {\n  this._contextPad = contextPad;\n  this._popupMenu = popupMenu;\n  this._canvas = canvas;\n  this._translate = translate;\n  contextPad.registerProvider(this);\n}\nColorContextPadProvider.$inject = ['contextPad', 'popupMenu', 'canvas', 'translate'];\nColorContextPadProvider.prototype.getContextPadEntries = function (element) {\n  return this._createPopupAction([element]);\n};\nColorContextPadProvider.prototype.getMultiElementContextPadEntries = function (elements) {\n  return this._createPopupAction(elements);\n};\nColorContextPadProvider.prototype._createPopupAction = function (elements) {\n  if (elements.length === 1 && elements[0].labelTarget) {\n    console.log('return no entries');\n    return {};\n  } else {\n    console.log('return entries');\n  }\n  const canvas = this._canvas;\n  const translate = this._translate;\n  const contextPad = this._contextPad;\n  const popupMenu = this._popupMenu;\n  return {\n    'set-color': {\n      group: 'edit',\n      className: 'bpmn-icon-color',\n      title: translate('Set Color'),\n      html: `<div class=\"entry\">${getSvg(elements)}</div>`,\n      action: {\n        click: (event, element) => {\n          // get start popup draw start position\n          var position = {\n            ...getStartPosition(canvas, contextPad, elements),\n            cursor: {\n              x: event.x,\n              y: event.y\n            }\n          };\n\n          // open new color-picker popup\n          popupMenu.open(elements, 'color-picker', position, {\n            orientation: 'horizontal',\n            separators: true\n          });\n        }\n      }\n    }\n  };\n};\n\n// helpers //////////////////////\n\nconst WHITE = '#ffffff',\n  BLACK = '#161616';\nfunction getColors(element) {\n  const di = (0,bpmn_js_lib_draw_BpmnRenderUtil__WEBPACK_IMPORTED_MODULE_0__.getDi)(element);\n  return {\n    fill: di.get('fill') || WHITE,\n    stroke: di.get('stroke') || BLACK\n  };\n}\nfunction getSvg(elements) {\n  if (elements.length === 1) {\n    const {\n      fill,\n      stroke\n    } = getColors(elements[0]);\n    return `<svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"8\" cy=\"8\" r=\"7\" fill=\"${fill}\" stroke=\"${stroke}\" stroke-width=\"2\" />\n    </svg>\n    `;\n  }\n  return `<svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle cx=\"8\" cy=\"8\" r=\"7\" fill=\"${WHITE}\" stroke=\"${BLACK} stroke-width=\"2\" />\n  </svg>\n  `;\n}\nfunction getStartPosition(canvas, contextPad, elements) {\n  const pad = contextPad.getPad(elements).html;\n  console.log(pad);\n  const padRect = pad.getBoundingClientRect();\n  console.log(padRect);\n  const pos = {\n    x: padRect.left,\n    y: padRect.top - 50\n  };\n  return pos;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js-color-picker/colors/ColorContextPadProvider.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js-color-picker/colors/ColorPopupProvider.js":
/*!********************************************************************!*\
  !*** ../bpmn-io/bpmn-js-color-picker/colors/ColorPopupProvider.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ColorPopupProvider)\n/* harmony export */ });\n/* harmony import */ var min_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dom */ \"../bpmn-io/bpmn-js-color-picker/node_modules/min-dom/dist/index.esm.js\");\n\nconst COLORS = [{\n  label: 'Default',\n  fill: undefined,\n  stroke: undefined\n}, {\n  label: 'Blue',\n  fill: '#BBDEFB',\n  stroke: '#0D4372'\n}, {\n  label: 'Orange',\n  fill: '#FFE0B2',\n  stroke: '#6B3C00'\n}, {\n  label: 'Green',\n  fill: '#C8E6C9',\n  stroke: '#205022'\n}, {\n  label: 'Red',\n  fill: '#FFCDD2',\n  stroke: '#831311'\n}, {\n  label: 'Purple',\n  fill: '#E1BEE7',\n  stroke: '#5B176D'\n}];\nfunction ColorPopupProvider(config, bpmnRendererConfig, popupMenu, modeling, translate) {\n  this._popupMenu = popupMenu;\n  this._modeling = modeling;\n  this._translate = translate;\n  this._colors = config && config.colors || COLORS;\n  this._defaultFillColor = bpmnRendererConfig && bpmnRendererConfig.defaultFillColor || 'white';\n  this._defaultStrokeColor = bpmnRendererConfig && bpmnRendererConfig.defaultStrokeColor || 'rgb(34, 36, 42)';\n  this._popupMenu.registerProvider('color-picker', this);\n}\nColorPopupProvider.$inject = ['config.colorPicker', 'config.bpmnRenderer', 'popupMenu', 'modeling', 'translate'];\nColorPopupProvider.prototype.getEntries = function (elements) {\n  var self = this;\n  var colorIcon = (0,min_dom__WEBPACK_IMPORTED_MODULE_0__.domify)(`\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" height=\"100%\">\n      <circle cx=\"8\" cy=\"8\" r=\"7\" fill=\"var(--fill-color)\" stroke=\"var(--stroke-color)\" stroke-width=\"2\" />\n    </svg>\n  `);\n  var entries = this._colors.map(function (color) {\n    colorIcon.style.setProperty('--fill-color', color.fill || self._defaultFillColor);\n    colorIcon.style.setProperty('--stroke-color', color.stroke || self._defaultStrokeColor);\n    return {\n      group: color.label === 'Default' ? {\n        id: 'default',\n        name: 'Default'\n      } : {\n        id: 'custom',\n        name: 'Custom'\n      },\n      title: self._translate(color.label),\n      id: color.label.toLowerCase() + '-color',\n      imageUrl: `data:image/svg+xml;utf8,${encodeURIComponent(colorIcon.outerHTML)}`,\n      action: createAction(self._modeling, elements, color)\n    };\n  });\n  return entries;\n};\nfunction createAction(modeling, element, color) {\n  return function () {\n    modeling.setColor(element, color);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnBtbi1pby9icG1uLWpzLWNvbG9yLXBpY2tlci9jb2xvcnMvQ29sb3JQb3B1cFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRWlCO0FBRWpCLE1BQU1DLE1BQU0sR0FBRyxDQUFFO0VBQ2ZDLEtBQUssRUFBRSxTQUFTO0VBQ2hCQyxJQUFJLEVBQUVDLFNBQVM7RUFDZkMsTUFBTSxFQUFFRDtBQUNWLENBQUMsRUFBRTtFQUNERixLQUFLLEVBQUUsTUFBTTtFQUNiQyxJQUFJLEVBQUUsU0FBUztFQUNmRSxNQUFNLEVBQUU7QUFDVixDQUFDLEVBQUU7RUFDREgsS0FBSyxFQUFFLFFBQVE7RUFDZkMsSUFBSSxFQUFFLFNBQVM7RUFDZkUsTUFBTSxFQUFFO0FBQ1YsQ0FBQyxFQUFFO0VBQ0RILEtBQUssRUFBRSxPQUFPO0VBQ2RDLElBQUksRUFBRSxTQUFTO0VBQ2ZFLE1BQU0sRUFBRTtBQUNWLENBQUMsRUFBRTtFQUNESCxLQUFLLEVBQUUsS0FBSztFQUNaQyxJQUFJLEVBQUUsU0FBUztFQUNmRSxNQUFNLEVBQUU7QUFDVixDQUFDLEVBQUU7RUFDREgsS0FBSyxFQUFFLFFBQVE7RUFDZkMsSUFBSSxFQUFFLFNBQVM7RUFDZkUsTUFBTSxFQUFFO0FBQ1YsQ0FBQyxDQUFFO0FBR1ksU0FBU0Msa0JBQWtCQSxDQUFDQyxNQUFNLEVBQUVDLGtCQUFrQixFQUFFQyxTQUFTLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxFQUFFO0VBQ3JHLElBQUksQ0FBQ0MsVUFBVSxHQUFHSCxTQUFTO0VBQzNCLElBQUksQ0FBQ0ksU0FBUyxHQUFHSCxRQUFRO0VBQ3pCLElBQUksQ0FBQ0ksVUFBVSxHQUFHSCxTQUFTO0VBRTNCLElBQUksQ0FBQ0ksT0FBTyxHQUFHUixNQUFNLElBQUlBLE1BQU0sQ0FBQ1MsTUFBTSxJQUFJZixNQUFNO0VBQ2hELElBQUksQ0FBQ2dCLGlCQUFpQixHQUFHVCxrQkFBa0IsSUFBSUEsa0JBQWtCLENBQUNVLGdCQUFnQixJQUFJLE9BQU87RUFDN0YsSUFBSSxDQUFDQyxtQkFBbUIsR0FBR1gsa0JBQWtCLElBQUlBLGtCQUFrQixDQUFDWSxrQkFBa0IsSUFBSSxpQkFBaUI7RUFFM0csSUFBSSxDQUFDUixVQUFVLENBQUNTLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUM7QUFDeEQ7QUFHQWYsa0JBQWtCLENBQUNnQixPQUFPLEdBQUcsQ0FDM0Isb0JBQW9CLEVBQ3BCLHFCQUFxQixFQUNyQixXQUFXLEVBQ1gsVUFBVSxFQUNWLFdBQVcsQ0FDWjtBQUdEaEIsa0JBQWtCLENBQUNpQixTQUFTLENBQUNDLFVBQVUsR0FBRyxVQUFTQyxRQUFRLEVBQUU7RUFDM0QsSUFBSUMsSUFBSSxHQUFHLElBQUk7RUFFZixJQUFJQyxTQUFTLEdBQUczQiwrQ0FBTSxDQUFFO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLEdBQUcsQ0FBQztFQUVGLElBQUk0QixPQUFPLEdBQUcsSUFBSSxDQUFDYixPQUFPLENBQUNjLEdBQUcsQ0FBQyxVQUFTQyxLQUFLLEVBQUU7SUFFN0NILFNBQVMsQ0FBQ0ksS0FBSyxDQUFDQyxXQUFXLENBQUMsY0FBYyxFQUFFRixLQUFLLENBQUMzQixJQUFJLElBQUl1QixJQUFJLENBQUNULGlCQUFpQixDQUFDO0lBQ2pGVSxTQUFTLENBQUNJLEtBQUssQ0FBQ0MsV0FBVyxDQUFDLGdCQUFnQixFQUFFRixLQUFLLENBQUN6QixNQUFNLElBQUlxQixJQUFJLENBQUNQLG1CQUFtQixDQUFDO0lBRXZGLE9BQU87TUFDTGMsS0FBSyxFQUFFSCxLQUFLLENBQUM1QixLQUFLLEtBQUssU0FBUyxHQUM1QjtRQUNBZ0MsRUFBRSxFQUFFLFNBQVM7UUFDYkMsSUFBSSxFQUFFO01BQ1IsQ0FBQyxHQUNDO1FBQ0FELEVBQUUsRUFBRSxRQUFRO1FBQ1pDLElBQUksRUFBRTtNQUNSLENBQUM7TUFDSEMsS0FBSyxFQUFFVixJQUFJLENBQUNaLFVBQVUsQ0FBQ2dCLEtBQUssQ0FBQzVCLEtBQUssQ0FBQztNQUNuQ2dDLEVBQUUsRUFBRUosS0FBSyxDQUFDNUIsS0FBSyxDQUFDbUMsV0FBVyxDQUFDLENBQUMsR0FBRyxRQUFRO01BQ3hDQyxRQUFRLEVBQUcsMkJBQTJCQyxrQkFBa0IsQ0FBQ1osU0FBUyxDQUFDYSxTQUFTLENBQUcsRUFBQztNQUNoRkMsTUFBTSxFQUFFQyxZQUFZLENBQUNoQixJQUFJLENBQUNiLFNBQVMsRUFBRVksUUFBUSxFQUFFSyxLQUFLO0lBQ3RELENBQUM7RUFDSCxDQUFDLENBQUM7RUFFRixPQUFPRixPQUFPO0FBQ2hCLENBQUM7QUFHRCxTQUFTYyxZQUFZQSxDQUFDaEMsUUFBUSxFQUFFaUMsT0FBTyxFQUFFYixLQUFLLEVBQUU7RUFDOUMsT0FBTyxZQUFXO0lBQ2hCcEIsUUFBUSxDQUFDa0MsUUFBUSxDQUFDRCxPQUFPLEVBQUViLEtBQUssQ0FBQztFQUNuQyxDQUFDO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrZGF5cy0yMDIzLy4uL2JwbW4taW8vYnBtbi1qcy1jb2xvci1waWNrZXIvY29sb3JzL0NvbG9yUG9wdXBQcm92aWRlci5qcz9lZGUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGRvbWlmeVxufSBmcm9tICdtaW4tZG9tJztcblxuY29uc3QgQ09MT1JTID0gWyB7XG4gIGxhYmVsOiAnRGVmYXVsdCcsXG4gIGZpbGw6IHVuZGVmaW5lZCxcbiAgc3Ryb2tlOiB1bmRlZmluZWRcbn0sIHtcbiAgbGFiZWw6ICdCbHVlJyxcbiAgZmlsbDogJyNCQkRFRkInLFxuICBzdHJva2U6ICcjMEQ0MzcyJ1xufSwge1xuICBsYWJlbDogJ09yYW5nZScsXG4gIGZpbGw6ICcjRkZFMEIyJyxcbiAgc3Ryb2tlOiAnIzZCM0MwMCdcbn0sIHtcbiAgbGFiZWw6ICdHcmVlbicsXG4gIGZpbGw6ICcjQzhFNkM5JyxcbiAgc3Ryb2tlOiAnIzIwNTAyMidcbn0sIHtcbiAgbGFiZWw6ICdSZWQnLFxuICBmaWxsOiAnI0ZGQ0REMicsXG4gIHN0cm9rZTogJyM4MzEzMTEnXG59LCB7XG4gIGxhYmVsOiAnUHVycGxlJyxcbiAgZmlsbDogJyNFMUJFRTcnLFxuICBzdHJva2U6ICcjNUIxNzZEJ1xufSBdO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbG9yUG9wdXBQcm92aWRlcihjb25maWcsIGJwbW5SZW5kZXJlckNvbmZpZywgcG9wdXBNZW51LCBtb2RlbGluZywgdHJhbnNsYXRlKSB7XG4gIHRoaXMuX3BvcHVwTWVudSA9IHBvcHVwTWVudTtcbiAgdGhpcy5fbW9kZWxpbmcgPSBtb2RlbGluZztcbiAgdGhpcy5fdHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuXG4gIHRoaXMuX2NvbG9ycyA9IGNvbmZpZyAmJiBjb25maWcuY29sb3JzIHx8IENPTE9SUztcbiAgdGhpcy5fZGVmYXVsdEZpbGxDb2xvciA9IGJwbW5SZW5kZXJlckNvbmZpZyAmJiBicG1uUmVuZGVyZXJDb25maWcuZGVmYXVsdEZpbGxDb2xvciB8fCAnd2hpdGUnO1xuICB0aGlzLl9kZWZhdWx0U3Ryb2tlQ29sb3IgPSBicG1uUmVuZGVyZXJDb25maWcgJiYgYnBtblJlbmRlcmVyQ29uZmlnLmRlZmF1bHRTdHJva2VDb2xvciB8fCAncmdiKDM0LCAzNiwgNDIpJztcblxuICB0aGlzLl9wb3B1cE1lbnUucmVnaXN0ZXJQcm92aWRlcignY29sb3ItcGlja2VyJywgdGhpcyk7XG59XG5cblxuQ29sb3JQb3B1cFByb3ZpZGVyLiRpbmplY3QgPSBbXG4gICdjb25maWcuY29sb3JQaWNrZXInLFxuICAnY29uZmlnLmJwbW5SZW5kZXJlcicsXG4gICdwb3B1cE1lbnUnLFxuICAnbW9kZWxpbmcnLFxuICAndHJhbnNsYXRlJ1xuXTtcblxuXG5Db2xvclBvcHVwUHJvdmlkZXIucHJvdG90eXBlLmdldEVudHJpZXMgPSBmdW5jdGlvbihlbGVtZW50cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIGNvbG9ySWNvbiA9IGRvbWlmeShgXG4gICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxNiAxNlwiIGhlaWdodD1cIjEwMCVcIj5cbiAgICAgIDxjaXJjbGUgY3g9XCI4XCIgY3k9XCI4XCIgcj1cIjdcIiBmaWxsPVwidmFyKC0tZmlsbC1jb2xvcilcIiBzdHJva2U9XCJ2YXIoLS1zdHJva2UtY29sb3IpXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIC8+XG4gICAgPC9zdmc+XG4gIGApO1xuXG4gIHZhciBlbnRyaWVzID0gdGhpcy5fY29sb3JzLm1hcChmdW5jdGlvbihjb2xvcikge1xuXG4gICAgY29sb3JJY29uLnN0eWxlLnNldFByb3BlcnR5KCctLWZpbGwtY29sb3InLCBjb2xvci5maWxsIHx8IHNlbGYuX2RlZmF1bHRGaWxsQ29sb3IpO1xuICAgIGNvbG9ySWNvbi5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1zdHJva2UtY29sb3InLCBjb2xvci5zdHJva2UgfHwgc2VsZi5fZGVmYXVsdFN0cm9rZUNvbG9yKTtcblxuICAgIHJldHVybiB7XG4gICAgICBncm91cDogY29sb3IubGFiZWwgPT09ICdEZWZhdWx0J1xuICAgICAgICA/IHtcbiAgICAgICAgICBpZDogJ2RlZmF1bHQnLFxuICAgICAgICAgIG5hbWU6ICdEZWZhdWx0J1xuICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgIGlkOiAnY3VzdG9tJyxcbiAgICAgICAgICBuYW1lOiAnQ3VzdG9tJ1xuICAgICAgICB9LFxuICAgICAgdGl0bGU6IHNlbGYuX3RyYW5zbGF0ZShjb2xvci5sYWJlbCksXG4gICAgICBpZDogY29sb3IubGFiZWwudG9Mb3dlckNhc2UoKSArICctY29sb3InLFxuICAgICAgaW1hZ2VVcmw6IGBkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCwkeyBlbmNvZGVVUklDb21wb25lbnQoY29sb3JJY29uLm91dGVySFRNTCkgfWAsXG4gICAgICBhY3Rpb246IGNyZWF0ZUFjdGlvbihzZWxmLl9tb2RlbGluZywgZWxlbWVudHMsIGNvbG9yKVxuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiBlbnRyaWVzO1xufTtcblxuXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24obW9kZWxpbmcsIGVsZW1lbnQsIGNvbG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBtb2RlbGluZy5zZXRDb2xvcihlbGVtZW50LCBjb2xvcik7XG4gIH07XG59Il0sIm5hbWVzIjpbImRvbWlmeSIsIkNPTE9SUyIsImxhYmVsIiwiZmlsbCIsInVuZGVmaW5lZCIsInN0cm9rZSIsIkNvbG9yUG9wdXBQcm92aWRlciIsImNvbmZpZyIsImJwbW5SZW5kZXJlckNvbmZpZyIsInBvcHVwTWVudSIsIm1vZGVsaW5nIiwidHJhbnNsYXRlIiwiX3BvcHVwTWVudSIsIl9tb2RlbGluZyIsIl90cmFuc2xhdGUiLCJfY29sb3JzIiwiY29sb3JzIiwiX2RlZmF1bHRGaWxsQ29sb3IiLCJkZWZhdWx0RmlsbENvbG9yIiwiX2RlZmF1bHRTdHJva2VDb2xvciIsImRlZmF1bHRTdHJva2VDb2xvciIsInJlZ2lzdGVyUHJvdmlkZXIiLCIkaW5qZWN0IiwicHJvdG90eXBlIiwiZ2V0RW50cmllcyIsImVsZW1lbnRzIiwic2VsZiIsImNvbG9ySWNvbiIsImVudHJpZXMiLCJtYXAiLCJjb2xvciIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJncm91cCIsImlkIiwibmFtZSIsInRpdGxlIiwidG9Mb3dlckNhc2UiLCJpbWFnZVVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm91dGVySFRNTCIsImFjdGlvbiIsImNyZWF0ZUFjdGlvbiIsImVsZW1lbnQiLCJzZXRDb2xvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js-color-picker/colors/ColorPopupProvider.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js-color-picker/colors/index.js":
/*!*******************************************************!*\
  !*** ../bpmn-io/bpmn-js-color-picker/colors/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ColorContextPadProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ColorContextPadProvider */ \"../bpmn-io/bpmn-js-color-picker/colors/ColorContextPadProvider.js\");\n/* harmony import */ var _ColorPopupProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ColorPopupProvider */ \"../bpmn-io/bpmn-js-color-picker/colors/ColorPopupProvider.js\");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  __init__: ['colorContextPadProvider', 'colorPopupProvider'],\n  colorContextPadProvider: ['type', _ColorContextPadProvider__WEBPACK_IMPORTED_MODULE_0__[\"default\"]],\n  colorPopupProvider: ['type', _ColorPopupProvider__WEBPACK_IMPORTED_MODULE_1__[\"default\"]]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnBtbi1pby9icG1uLWpzLWNvbG9yLXBpY2tlci9jb2xvcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdFO0FBQ1Y7QUFFdEQsaUVBQWU7RUFDYkUsUUFBUSxFQUFFLENBQ1IseUJBQXlCLEVBQ3pCLG9CQUFvQixDQUNyQjtFQUNEQyx1QkFBdUIsRUFBRSxDQUFFLE1BQU0sRUFBRUgsZ0VBQXVCLENBQUU7RUFDNURJLGtCQUFrQixFQUFFLENBQUUsTUFBTSxFQUFFSCwyREFBa0I7QUFDbEQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2tkYXlzLTIwMjMvLi4vYnBtbi1pby9icG1uLWpzLWNvbG9yLXBpY2tlci9jb2xvcnMvaW5kZXguanM/NmM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29sb3JDb250ZXh0UGFkUHJvdmlkZXIgZnJvbSAnLi9Db2xvckNvbnRleHRQYWRQcm92aWRlcic7XG5pbXBvcnQgQ29sb3JQb3B1cFByb3ZpZGVyIGZyb20gJy4vQ29sb3JQb3B1cFByb3ZpZGVyJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBfX2luaXRfXzogW1xuICAgICdjb2xvckNvbnRleHRQYWRQcm92aWRlcicsXG4gICAgJ2NvbG9yUG9wdXBQcm92aWRlcidcbiAgXSxcbiAgY29sb3JDb250ZXh0UGFkUHJvdmlkZXI6IFsgJ3R5cGUnLCBDb2xvckNvbnRleHRQYWRQcm92aWRlciBdLFxuICBjb2xvclBvcHVwUHJvdmlkZXI6IFsgJ3R5cGUnLCBDb2xvclBvcHVwUHJvdmlkZXIgXVxufTsiXSwibmFtZXMiOlsiQ29sb3JDb250ZXh0UGFkUHJvdmlkZXIiLCJDb2xvclBvcHVwUHJvdmlkZXIiLCJfX2luaXRfXyIsImNvbG9yQ29udGV4dFBhZFByb3ZpZGVyIiwiY29sb3JQb3B1cFByb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js-color-picker/colors/index.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js-color-picker/index.js":
/*!************************************************!*\
  !*** ../bpmn-io/bpmn-js-color-picker/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./colors */ "../bpmn-io/bpmn-js-color-picker/colors/index.js");


/***/ }),

/***/ "../bpmn-io/bpmn-js/lib/features/append-preview/AppendPreview.js":
/*!***********************************************************************!*\
  !*** ../bpmn-io/bpmn-js/lib/features/append-preview/AppendPreview.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AppendPreview)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/bpmn-js/node_modules/min-dash/dist/index.esm.js\");\n\nconst round = Math.round;\nfunction AppendPreview(complexPreview, connectionDocking, elementFactory, eventBus, layouter, rules) {\n  this._complexPreview = complexPreview;\n  this._connectionDocking = connectionDocking;\n  this._elementFactory = elementFactory;\n  this._eventBus = eventBus;\n  this._layouter = layouter;\n  this._rules = rules;\n}\nAppendPreview.prototype.create = function (source, type, options) {\n  const complexPreview = this._complexPreview,\n    connectionDocking = this._connectionDocking,\n    elementFactory = this._elementFactory,\n    eventBus = this._eventBus,\n    layouter = this._layouter,\n    rules = this._rules;\n  const shape = elementFactory.createShape((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.assign)({\n    type: type\n  }, options));\n  const position = eventBus.fire('autoPlace', {\n    source,\n    shape\n  });\n  if (!position) {\n    return;\n  }\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.assign)(shape, {\n    x: position.x - round(shape.width / 2),\n    y: position.y - round(shape.height / 2)\n  });\n  const connectionCreateAllowed = rules.allowed('connection.create', {\n    source,\n    target: shape,\n    hints: {\n      targetParent: source.parent\n    }\n  });\n  let connection = null;\n  if (connectionCreateAllowed) {\n    connection = elementFactory.createConnection(connectionCreateAllowed);\n    connection.waypoints = layouter.layoutConnection(connection, {\n      source,\n      target: shape\n    });\n    connection.waypoints = connectionDocking.getCroppedWaypoints(connection, source, shape);\n  }\n  complexPreview.create({\n    create: [shape, connection].filter(element => !(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNil)(element))\n  });\n};\nAppendPreview.prototype.delete = function () {\n  this._complexPreview.delete();\n};\nAppendPreview.$inject = ['complexPreview', 'connectionDocking', 'elementFactory', 'eventBus', 'layouter', 'rules'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnBtbi1pby9icG1uLWpzL2xpYi9mZWF0dXJlcy9hcHBlbmQtcHJldmlldy9BcHBlbmRQcmV2aWV3LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBR2tCO0FBRWxCLE1BQU1FLEtBQUssR0FBR0MsSUFBSSxDQUFDRCxLQUFLO0FBRVQsU0FBU0UsYUFBYUEsQ0FBQ0MsY0FBYyxFQUFFQyxpQkFBaUIsRUFBRUMsY0FBYyxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFO0VBQ2xILElBQUksQ0FBQ0MsZUFBZSxHQUFHTixjQUFjO0VBQ3JDLElBQUksQ0FBQ08sa0JBQWtCLEdBQUdOLGlCQUFpQjtFQUMzQyxJQUFJLENBQUNPLGVBQWUsR0FBR04sY0FBYztFQUNyQyxJQUFJLENBQUNPLFNBQVMsR0FBR04sUUFBUTtFQUN6QixJQUFJLENBQUNPLFNBQVMsR0FBR04sUUFBUTtFQUN6QixJQUFJLENBQUNPLE1BQU0sR0FBR04sS0FBSztBQUNyQjtBQUVBTixhQUFhLENBQUNhLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHLFVBQVNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7RUFDL0QsTUFBTWhCLGNBQWMsR0FBRyxJQUFJLENBQUNNLGVBQWU7SUFDckNMLGlCQUFpQixHQUFHLElBQUksQ0FBQ00sa0JBQWtCO0lBQzNDTCxjQUFjLEdBQUcsSUFBSSxDQUFDTSxlQUFlO0lBQ3JDTCxRQUFRLEdBQUcsSUFBSSxDQUFDTSxTQUFTO0lBQ3pCTCxRQUFRLEdBQUcsSUFBSSxDQUFDTSxTQUFTO0lBQ3pCTCxLQUFLLEdBQUcsSUFBSSxDQUFDTSxNQUFNO0VBRXpCLE1BQU1NLEtBQUssR0FBR2YsY0FBYyxDQUFDZ0IsV0FBVyxDQUFDdkIsZ0RBQU0sQ0FBQztJQUFFb0IsSUFBSSxFQUFFQTtFQUFLLENBQUMsRUFBRUMsT0FBTyxDQUFDLENBQUM7RUFFekUsTUFBTUcsUUFBUSxHQUFHaEIsUUFBUSxDQUFDaUIsSUFBSSxDQUFDLFdBQVcsRUFBRTtJQUMxQ04sTUFBTTtJQUNORztFQUNGLENBQUMsQ0FBQztFQUVGLElBQUksQ0FBQ0UsUUFBUSxFQUFFO0lBQ2I7RUFDRjtFQUVBeEIsZ0RBQU0sQ0FBQ3NCLEtBQUssRUFBRTtJQUNaSSxDQUFDLEVBQUVGLFFBQVEsQ0FBQ0UsQ0FBQyxHQUFHeEIsS0FBSyxDQUFDb0IsS0FBSyxDQUFDSyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDQyxDQUFDLEVBQUVKLFFBQVEsQ0FBQ0ksQ0FBQyxHQUFHMUIsS0FBSyxDQUFDb0IsS0FBSyxDQUFDTyxNQUFNLEdBQUcsQ0FBQztFQUN4QyxDQUFDLENBQUM7RUFFRixNQUFNQyx1QkFBdUIsR0FBR3BCLEtBQUssQ0FBQ3FCLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRTtJQUNqRVosTUFBTTtJQUNOYSxNQUFNLEVBQUVWLEtBQUs7SUFDYlcsS0FBSyxFQUFFO01BQ0xDLFlBQVksRUFBRWYsTUFBTSxDQUFDZ0I7SUFDdkI7RUFDRixDQUFDLENBQUM7RUFFRixJQUFJQyxVQUFVLEdBQUcsSUFBSTtFQUVyQixJQUFJTix1QkFBdUIsRUFBRTtJQUMzQk0sVUFBVSxHQUFHN0IsY0FBYyxDQUFDOEIsZ0JBQWdCLENBQUNQLHVCQUF1QixDQUFDO0lBRXJFTSxVQUFVLENBQUNFLFNBQVMsR0FBRzdCLFFBQVEsQ0FBQzhCLGdCQUFnQixDQUFDSCxVQUFVLEVBQUU7TUFDM0RqQixNQUFNO01BQ05hLE1BQU0sRUFBRVY7SUFDVixDQUFDLENBQUM7SUFFRmMsVUFBVSxDQUFDRSxTQUFTLEdBQUdoQyxpQkFBaUIsQ0FBQ2tDLG1CQUFtQixDQUFDSixVQUFVLEVBQUVqQixNQUFNLEVBQUVHLEtBQUssQ0FBQztFQUN6RjtFQUVBakIsY0FBYyxDQUFDYSxNQUFNLENBQUM7SUFDcEJBLE1BQU0sRUFBRSxDQUNOSSxLQUFLLEVBQ0xjLFVBQVUsQ0FDWCxDQUFDSyxNQUFNLENBQUVDLE9BQU8sSUFBSyxDQUFDekMsK0NBQUssQ0FBQ3lDLE9BQU8sQ0FBQztFQUN2QyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUR0QyxhQUFhLENBQUNhLFNBQVMsQ0FBQzBCLE1BQU0sR0FBRyxZQUFXO0VBQzFDLElBQUksQ0FBQ2hDLGVBQWUsQ0FBQ2dDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFFRHZDLGFBQWEsQ0FBQ3dDLE9BQU8sR0FBRyxDQUN0QixnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBQ25CLGdCQUFnQixFQUNoQixVQUFVLEVBQ1YsVUFBVSxFQUNWLE9BQU8sQ0FDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2tkYXlzLTIwMjMvLi4vYnBtbi1pby9icG1uLWpzL2xpYi9mZWF0dXJlcy9hcHBlbmQtcHJldmlldy9BcHBlbmRQcmV2aWV3LmpzPzllZWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXNzaWduLFxuICBpc05pbFxufSBmcm9tICdtaW4tZGFzaCc7XG5cbmNvbnN0IHJvdW5kID0gTWF0aC5yb3VuZDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwZW5kUHJldmlldyhjb21wbGV4UHJldmlldywgY29ubmVjdGlvbkRvY2tpbmcsIGVsZW1lbnRGYWN0b3J5LCBldmVudEJ1cywgbGF5b3V0ZXIsIHJ1bGVzKSB7XG4gIHRoaXMuX2NvbXBsZXhQcmV2aWV3ID0gY29tcGxleFByZXZpZXc7XG4gIHRoaXMuX2Nvbm5lY3Rpb25Eb2NraW5nID0gY29ubmVjdGlvbkRvY2tpbmc7XG4gIHRoaXMuX2VsZW1lbnRGYWN0b3J5ID0gZWxlbWVudEZhY3Rvcnk7XG4gIHRoaXMuX2V2ZW50QnVzID0gZXZlbnRCdXM7XG4gIHRoaXMuX2xheW91dGVyID0gbGF5b3V0ZXI7XG4gIHRoaXMuX3J1bGVzID0gcnVsZXM7XG59XG5cbkFwcGVuZFByZXZpZXcucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKHNvdXJjZSwgdHlwZSwgb3B0aW9ucykge1xuICBjb25zdCBjb21wbGV4UHJldmlldyA9IHRoaXMuX2NvbXBsZXhQcmV2aWV3LFxuICAgICAgICBjb25uZWN0aW9uRG9ja2luZyA9IHRoaXMuX2Nvbm5lY3Rpb25Eb2NraW5nLFxuICAgICAgICBlbGVtZW50RmFjdG9yeSA9IHRoaXMuX2VsZW1lbnRGYWN0b3J5LFxuICAgICAgICBldmVudEJ1cyA9IHRoaXMuX2V2ZW50QnVzLFxuICAgICAgICBsYXlvdXRlciA9IHRoaXMuX2xheW91dGVyLFxuICAgICAgICBydWxlcyA9IHRoaXMuX3J1bGVzO1xuXG4gIGNvbnN0IHNoYXBlID0gZWxlbWVudEZhY3RvcnkuY3JlYXRlU2hhcGUoYXNzaWduKHsgdHlwZTogdHlwZSB9LCBvcHRpb25zKSk7XG5cbiAgY29uc3QgcG9zaXRpb24gPSBldmVudEJ1cy5maXJlKCdhdXRvUGxhY2UnLCB7XG4gICAgc291cmNlLFxuICAgIHNoYXBlXG4gIH0pO1xuXG4gIGlmICghcG9zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBhc3NpZ24oc2hhcGUsIHtcbiAgICB4OiBwb3NpdGlvbi54IC0gcm91bmQoc2hhcGUud2lkdGggLyAyKSxcbiAgICB5OiBwb3NpdGlvbi55IC0gcm91bmQoc2hhcGUuaGVpZ2h0IC8gMilcbiAgfSk7XG5cbiAgY29uc3QgY29ubmVjdGlvbkNyZWF0ZUFsbG93ZWQgPSBydWxlcy5hbGxvd2VkKCdjb25uZWN0aW9uLmNyZWF0ZScsIHtcbiAgICBzb3VyY2UsXG4gICAgdGFyZ2V0OiBzaGFwZSxcbiAgICBoaW50czoge1xuICAgICAgdGFyZ2V0UGFyZW50OiBzb3VyY2UucGFyZW50XG4gICAgfVxuICB9KTtcblxuICBsZXQgY29ubmVjdGlvbiA9IG51bGw7XG5cbiAgaWYgKGNvbm5lY3Rpb25DcmVhdGVBbGxvd2VkKSB7XG4gICAgY29ubmVjdGlvbiA9IGVsZW1lbnRGYWN0b3J5LmNyZWF0ZUNvbm5lY3Rpb24oY29ubmVjdGlvbkNyZWF0ZUFsbG93ZWQpO1xuXG4gICAgY29ubmVjdGlvbi53YXlwb2ludHMgPSBsYXlvdXRlci5sYXlvdXRDb25uZWN0aW9uKGNvbm5lY3Rpb24sIHtcbiAgICAgIHNvdXJjZSxcbiAgICAgIHRhcmdldDogc2hhcGVcbiAgICB9KTtcblxuICAgIGNvbm5lY3Rpb24ud2F5cG9pbnRzID0gY29ubmVjdGlvbkRvY2tpbmcuZ2V0Q3JvcHBlZFdheXBvaW50cyhjb25uZWN0aW9uLCBzb3VyY2UsIHNoYXBlKTtcbiAgfVxuXG4gIGNvbXBsZXhQcmV2aWV3LmNyZWF0ZSh7XG4gICAgY3JlYXRlOiBbXG4gICAgICBzaGFwZSxcbiAgICAgIGNvbm5lY3Rpb25cbiAgICBdLmZpbHRlcigoZWxlbWVudCkgPT4gIWlzTmlsKGVsZW1lbnQpKVxuICB9KTtcbn07XG5cbkFwcGVuZFByZXZpZXcucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jb21wbGV4UHJldmlldy5kZWxldGUoKTtcbn07XG5cbkFwcGVuZFByZXZpZXcuJGluamVjdCA9IFtcbiAgJ2NvbXBsZXhQcmV2aWV3JyxcbiAgJ2Nvbm5lY3Rpb25Eb2NraW5nJyxcbiAgJ2VsZW1lbnRGYWN0b3J5JyxcbiAgJ2V2ZW50QnVzJyxcbiAgJ2xheW91dGVyJyxcbiAgJ3J1bGVzJ1xuXTsiXSwibmFtZXMiOlsiYXNzaWduIiwiaXNOaWwiLCJyb3VuZCIsIk1hdGgiLCJBcHBlbmRQcmV2aWV3IiwiY29tcGxleFByZXZpZXciLCJjb25uZWN0aW9uRG9ja2luZyIsImVsZW1lbnRGYWN0b3J5IiwiZXZlbnRCdXMiLCJsYXlvdXRlciIsInJ1bGVzIiwiX2NvbXBsZXhQcmV2aWV3IiwiX2Nvbm5lY3Rpb25Eb2NraW5nIiwiX2VsZW1lbnRGYWN0b3J5IiwiX2V2ZW50QnVzIiwiX2xheW91dGVyIiwiX3J1bGVzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwic291cmNlIiwidHlwZSIsIm9wdGlvbnMiLCJzaGFwZSIsImNyZWF0ZVNoYXBlIiwicG9zaXRpb24iLCJmaXJlIiwieCIsIndpZHRoIiwieSIsImhlaWdodCIsImNvbm5lY3Rpb25DcmVhdGVBbGxvd2VkIiwiYWxsb3dlZCIsInRhcmdldCIsImhpbnRzIiwidGFyZ2V0UGFyZW50IiwicGFyZW50IiwiY29ubmVjdGlvbiIsImNyZWF0ZUNvbm5lY3Rpb24iLCJ3YXlwb2ludHMiLCJsYXlvdXRDb25uZWN0aW9uIiwiZ2V0Q3JvcHBlZFdheXBvaW50cyIsImZpbHRlciIsImVsZW1lbnQiLCJkZWxldGUiLCIkaW5qZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js/lib/features/append-preview/AppendPreview.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js/lib/features/modeling/util/LaneUtil.js":
/*!*****************************************************************!*\
  !*** ../bpmn-io/bpmn-js/lib/features/modeling/util/LaneUtil.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LANE_INDENTATION: () => (/* binding */ LANE_INDENTATION),\n/* harmony export */   collectLanes: () => (/* binding */ collectLanes),\n/* harmony export */   computeLanesResize: () => (/* binding */ computeLanesResize),\n/* harmony export */   getChildLanes: () => (/* binding */ getChildLanes),\n/* harmony export */   getLanesRoot: () => (/* binding */ getLanesRoot)\n/* harmony export */ });\n/* harmony import */ var _util_ModelUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../util/ModelUtil */ \"../bpmn-io/bpmn-js/lib/util/ModelUtil.js\");\n/* harmony import */ var _ModelingUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ModelingUtil */ \"../bpmn-io/bpmn-js/lib/features/modeling/util/ModelingUtil.js\");\n/* harmony import */ var diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! diagram-js/lib/layout/LayoutUtil */ \"../bpmn-io/diagram-js/lib/layout/LayoutUtil.js\");\n/* harmony import */ var diagram_js_lib_features_resize_ResizeUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! diagram-js/lib/features/resize/ResizeUtil */ \"../bpmn-io/diagram-js/lib/features/resize/ResizeUtil.js\");\n\n\n\n\n\n/**\n * @typedef {import('../../../model/Types').Shape} Shape\n *\n * @typedef {import('diagram-js/lib/util/Types').Rect} Rect\n */\n\nvar abs = Math.abs;\nfunction getTRBLResize(oldBounds, newBounds) {\n  return (0,diagram_js_lib_features_resize_ResizeUtil__WEBPACK_IMPORTED_MODULE_0__.substractTRBL)((0,diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asTRBL)(newBounds), (0,diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asTRBL)(oldBounds));\n}\nvar LANE_PARENTS = ['bpmn:Participant', 'bpmn:Process', 'bpmn:SubProcess'];\nvar LANE_INDENTATION = 30;\n\n/**\n * Return all lanes that are children of the given shape.\n *\n * @param  {Shape} shape\n * @param  {Shape[]} [collectedShapes]\n *\n * @return {Shape[]}\n */\nfunction collectLanes(shape, collectedShapes) {\n  collectedShapes = collectedShapes || [];\n  shape.children.filter(function (s) {\n    if ((0,_util_ModelUtil__WEBPACK_IMPORTED_MODULE_2__.is)(s, 'bpmn:Lane')) {\n      collectLanes(s, collectedShapes);\n      collectedShapes.push(s);\n    }\n  });\n  return collectedShapes;\n}\n\n/**\n * Return all lanes that are direct children of the given shape.\n *\n * @param {Shape} shape\n *\n * @return {Shape[]}\n */\nfunction getChildLanes(shape) {\n  return shape.children.filter(function (c) {\n    return (0,_util_ModelUtil__WEBPACK_IMPORTED_MODULE_2__.is)(c, 'bpmn:Lane');\n  });\n}\n\n/**\n * Return the parent shape of the given lane.\n *\n * @param {Shape} shape\n *\n * @return {Shape}\n */\nfunction getLanesRoot(shape) {\n  return (0,_ModelingUtil__WEBPACK_IMPORTED_MODULE_3__.getParent)(shape, LANE_PARENTS) || shape;\n}\n\n/**\n * Compute the required resize operations for lanes\n * adjacent to the given shape, assuming it will be\n * resized to the given new bounds.\n *\n * @param {Shape} shape\n * @param {Rect} newBounds\n *\n * @return { {\n *   shape: Shape;\n *   newBounds: Rect;\n * }[] }\n */\nfunction computeLanesResize(shape, newBounds) {\n  var rootElement = getLanesRoot(shape);\n  var initialShapes = (0,_util_ModelUtil__WEBPACK_IMPORTED_MODULE_2__.is)(rootElement, 'bpmn:Process') ? [] : [rootElement];\n  var allLanes = collectLanes(rootElement, initialShapes),\n    shapeTrbl = (0,diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asTRBL)(shape),\n    shapeNewTrbl = (0,diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asTRBL)(newBounds),\n    trblResize = getTRBLResize(shape, newBounds),\n    resizeNeeded = [];\n  allLanes.forEach(function (other) {\n    if (other === shape) {\n      return;\n    }\n    var topResize = 0,\n      rightResize = trblResize.right,\n      bottomResize = 0,\n      leftResize = trblResize.left;\n    var otherTrbl = (0,diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asTRBL)(other);\n    if (trblResize.top) {\n      if (abs(otherTrbl.bottom - shapeTrbl.top) < 10) {\n        bottomResize = shapeNewTrbl.top - otherTrbl.bottom;\n      }\n      if (abs(otherTrbl.top - shapeTrbl.top) < 5) {\n        topResize = shapeNewTrbl.top - otherTrbl.top;\n      }\n    }\n    if (trblResize.bottom) {\n      if (abs(otherTrbl.top - shapeTrbl.bottom) < 10) {\n        topResize = shapeNewTrbl.bottom - otherTrbl.top;\n      }\n      if (abs(otherTrbl.bottom - shapeTrbl.bottom) < 5) {\n        bottomResize = shapeNewTrbl.bottom - otherTrbl.bottom;\n      }\n    }\n    if (topResize || rightResize || bottomResize || leftResize) {\n      resizeNeeded.push({\n        shape: other,\n        newBounds: (0,diagram_js_lib_features_resize_ResizeUtil__WEBPACK_IMPORTED_MODULE_0__.resizeTRBL)(other, {\n          top: topResize,\n          right: rightResize,\n          bottom: bottomResize,\n          left: leftResize\n        })\n      });\n    }\n  });\n  return resizeNeeded;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js/lib/features/modeling/util/LaneUtil.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js/lib/features/modeling/util/ModelingUtil.js":
/*!*********************************************************************!*\
  !*** ../bpmn-io/bpmn-js/lib/features/modeling/util/ModelingUtil.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getParent: () => (/* binding */ getParent),\n/* harmony export */   is: () => (/* reexport safe */ _util_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.is),\n/* harmony export */   isAny: () => (/* reexport safe */ _util_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.isAny)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/bpmn-js/node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var _util_ModelUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/ModelUtil */ \"../bpmn-io/bpmn-js/lib/util/ModelUtil.js\");\n\n\n\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n */\n\n/**\n * Return the parent of the element with any of the given types.\n *\n * @param {Element} element\n * @param {string|string[]} anyType\n *\n * @return {Element|null}\n */\nfunction getParent(element, anyType) {\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_1__.isString)(anyType)) {\n    anyType = [anyType];\n  }\n  while (element = element.parent) {\n    if ((0,_util_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.isAny)(element, anyType)) {\n      return element;\n    }\n  }\n  return null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnBtbi1pby9icG1uLWpzL2xpYi9mZWF0dXJlcy9tb2RlbGluZy91dGlsL01vZGVsaW5nVXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvQztBQUVnQjtBQUVKOztBQUVoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNHLFNBQVNBLENBQUNDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0VBRTFDLElBQUlMLGtEQUFRLENBQUNLLE9BQU8sQ0FBQyxFQUFFO0lBQ3JCQSxPQUFPLEdBQUcsQ0FBRUEsT0FBTyxDQUFFO0VBQ3ZCO0VBRUEsT0FBUUQsT0FBTyxHQUFHQSxPQUFPLENBQUNFLE1BQU0sRUFBRztJQUNqQyxJQUFJSixzREFBSyxDQUFDRSxPQUFPLEVBQUVDLE9BQU8sQ0FBQyxFQUFFO01BQzNCLE9BQU9ELE9BQU87SUFDaEI7RUFDRjtFQUVBLE9BQU8sSUFBSTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2RheXMtMjAyMy8uLi9icG1uLWlvL2JwbW4tanMvbGliL2ZlYXR1cmVzL21vZGVsaW5nL3V0aWwvTW9kZWxpbmdVdGlsLmpzPzVjMzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICdtaW4tZGFzaCc7XG5cbmV4cG9ydCB7IGlzLCBpc0FueSB9IGZyb20gJy4uLy4uLy4uL3V0aWwvTW9kZWxVdGlsJztcblxuaW1wb3J0IHsgaXNBbnkgfSBmcm9tICcuLi8uLi8uLi91dGlsL01vZGVsVXRpbCc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vbW9kZWwvVHlwZXMnKS5FbGVtZW50fSBFbGVtZW50XG4gKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHBhcmVudCBvZiB0aGUgZWxlbWVudCB3aXRoIGFueSBvZiB0aGUgZ2l2ZW4gdHlwZXMuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gYW55VHlwZVxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR8bnVsbH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudChlbGVtZW50LCBhbnlUeXBlKSB7XG5cbiAgaWYgKGlzU3RyaW5nKGFueVR5cGUpKSB7XG4gICAgYW55VHlwZSA9IFsgYW55VHlwZSBdO1xuICB9XG5cbiAgd2hpbGUgKChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnQpKSB7XG4gICAgaWYgKGlzQW55KGVsZW1lbnQsIGFueVR5cGUpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0iXSwibmFtZXMiOlsiaXNTdHJpbmciLCJpcyIsImlzQW55IiwiZ2V0UGFyZW50IiwiZWxlbWVudCIsImFueVR5cGUiLCJwYXJlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js/lib/features/modeling/util/ModelingUtil.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js/lib/util/DiUtil.js":
/*!*********************************************!*\
  !*** ../bpmn-io/bpmn-js/lib/util/DiUtil.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasCompensateEventDefinition: () => (/* binding */ hasCompensateEventDefinition),\n/* harmony export */   hasErrorEventDefinition: () => (/* binding */ hasErrorEventDefinition),\n/* harmony export */   hasEscalationEventDefinition: () => (/* binding */ hasEscalationEventDefinition),\n/* harmony export */   hasEventDefinition: () => (/* binding */ hasEventDefinition),\n/* harmony export */   isEventSubProcess: () => (/* binding */ isEventSubProcess),\n/* harmony export */   isExpanded: () => (/* binding */ isExpanded),\n/* harmony export */   isInterrupting: () => (/* binding */ isInterrupting)\n/* harmony export */ });\n/* harmony import */ var _ModelUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ModelUtil */ \"../bpmn-io/bpmn-js/lib/util/ModelUtil.js\");\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/bpmn-js/node_modules/min-dash/dist/index.esm.js\");\n\n\n\n/**\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').ModdleElement} ModdleElement\n */\n\n/**\n * @param {Element} element\n * @param {ModdleElement} [di]\n *\n * @return {boolean}\n */\nfunction isExpanded(element, di) {\n  if ((0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.is)(element, 'bpmn:CallActivity')) {\n    return false;\n  }\n  if ((0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.is)(element, 'bpmn:SubProcess')) {\n    di = di || (0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.getDi)(element);\n    if (di && (0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.is)(di, 'bpmndi:BPMNPlane')) {\n      return true;\n    }\n    return di && !!di.isExpanded;\n  }\n  if ((0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.is)(element, 'bpmn:Participant')) {\n    return !!(0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.getBusinessObject)(element).processRef;\n  }\n  return true;\n}\n\n/**\n * @param {Element} element\n *\n * @return {boolean}\n */\nfunction isInterrupting(element) {\n  return element && (0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.getBusinessObject)(element).isInterrupting !== false;\n}\n\n/**\n * @param {Element} element\n *\n * @return {boolean}\n */\nfunction isEventSubProcess(element) {\n  return element && !!(0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.getBusinessObject)(element).triggeredByEvent;\n}\n\n/**\n * @param {Element} element\n * @param {string} eventType\n *\n * @return {boolean}\n */\nfunction hasEventDefinition(element, eventType) {\n  var eventDefinitions = (0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.getBusinessObject)(element).eventDefinitions;\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.some)(eventDefinitions, function (event) {\n    return (0,_ModelUtil__WEBPACK_IMPORTED_MODULE_0__.is)(event, eventType);\n  });\n}\n\n/**\n * @param {Element} element\n *\n * @return {boolean}\n */\nfunction hasErrorEventDefinition(element) {\n  return hasEventDefinition(element, 'bpmn:ErrorEventDefinition');\n}\n\n/**\n * @param {Element} element\n *\n * @return {boolean}\n */\nfunction hasEscalationEventDefinition(element) {\n  return hasEventDefinition(element, 'bpmn:EscalationEventDefinition');\n}\n\n/**\n * @param {Element} element\n *\n * @return {boolean}\n */\nfunction hasCompensateEventDefinition(element) {\n  return hasEventDefinition(element, 'bpmn:CompensateEventDefinition');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnBtbi1pby9icG1uLWpzL2xpYi91dGlsL0RpVXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFJcUI7QUFJSDs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0ksVUFBVUEsQ0FBQ0MsT0FBTyxFQUFFQyxFQUFFLEVBQUU7RUFFdEMsSUFBSU4sOENBQUUsQ0FBQ0ssT0FBTyxFQUFFLG1CQUFtQixDQUFDLEVBQUU7SUFDcEMsT0FBTyxLQUFLO0VBQ2Q7RUFFQSxJQUFJTCw4Q0FBRSxDQUFDSyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsRUFBRTtJQUNsQ0MsRUFBRSxHQUFHQSxFQUFFLElBQUlKLGlEQUFLLENBQUNHLE9BQU8sQ0FBQztJQUV6QixJQUFJQyxFQUFFLElBQUlOLDhDQUFFLENBQUNNLEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFO01BQ3BDLE9BQU8sSUFBSTtJQUNiO0lBRUEsT0FBT0EsRUFBRSxJQUFJLENBQUMsQ0FBQ0EsRUFBRSxDQUFDRixVQUFVO0VBQzlCO0VBRUEsSUFBSUosOENBQUUsQ0FBQ0ssT0FBTyxFQUFFLGtCQUFrQixDQUFDLEVBQUU7SUFDbkMsT0FBTyxDQUFDLENBQUNKLDZEQUFpQixDQUFDSSxPQUFPLENBQUMsQ0FBQ0UsVUFBVTtFQUNoRDtFQUVBLE9BQU8sSUFBSTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQyxjQUFjQSxDQUFDSCxPQUFPLEVBQUU7RUFDdEMsT0FBT0EsT0FBTyxJQUFJSiw2REFBaUIsQ0FBQ0ksT0FBTyxDQUFDLENBQUNHLGNBQWMsS0FBSyxLQUFLO0FBQ3ZFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQyxpQkFBaUJBLENBQUNKLE9BQU8sRUFBRTtFQUN6QyxPQUFPQSxPQUFPLElBQUksQ0FBQyxDQUFDSiw2REFBaUIsQ0FBQ0ksT0FBTyxDQUFDLENBQUNLLGdCQUFnQjtBQUNqRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQyxrQkFBa0JBLENBQUNOLE9BQU8sRUFBRU8sU0FBUyxFQUFFO0VBQ3JELElBQUlDLGdCQUFnQixHQUFHWiw2REFBaUIsQ0FBQ0ksT0FBTyxDQUFDLENBQUNRLGdCQUFnQjtFQUVsRSxPQUFPViw4Q0FBSSxDQUFDVSxnQkFBZ0IsRUFBRSxVQUFTQyxLQUFLLEVBQUU7SUFDNUMsT0FBT2QsOENBQUUsQ0FBQ2MsS0FBSyxFQUFFRixTQUFTLENBQUM7RUFDN0IsQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNHLHVCQUF1QkEsQ0FBQ1YsT0FBTyxFQUFFO0VBQy9DLE9BQU9NLGtCQUFrQixDQUFDTixPQUFPLEVBQUUsMkJBQTJCLENBQUM7QUFDakU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNXLDRCQUE0QkEsQ0FBQ1gsT0FBTyxFQUFFO0VBQ3BELE9BQU9NLGtCQUFrQixDQUFDTixPQUFPLEVBQUUsZ0NBQWdDLENBQUM7QUFDdEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNZLDRCQUE0QkEsQ0FBQ1osT0FBTyxFQUFFO0VBQ3BELE9BQU9NLGtCQUFrQixDQUFDTixPQUFPLEVBQUUsZ0NBQWdDLENBQUM7QUFDdEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrZGF5cy0yMDIzLy4uL2JwbW4taW8vYnBtbi1qcy9saWIvdXRpbC9EaVV0aWwuanM/MWFjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBpcyxcbiAgZ2V0QnVzaW5lc3NPYmplY3QsXG4gIGdldERpXG59IGZyb20gJy4vTW9kZWxVdGlsJztcblxuaW1wb3J0IHtcbiAgc29tZVxufSBmcm9tICdtaW4tZGFzaCc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vbW9kZWwvVHlwZXMnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9tb2RlbC9UeXBlcycpLk1vZGRsZUVsZW1lbnR9IE1vZGRsZUVsZW1lbnRcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtNb2RkbGVFbGVtZW50fSBbZGldXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXhwYW5kZWQoZWxlbWVudCwgZGkpIHtcblxuICBpZiAoaXMoZWxlbWVudCwgJ2JwbW46Q2FsbEFjdGl2aXR5JykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXMoZWxlbWVudCwgJ2JwbW46U3ViUHJvY2VzcycpKSB7XG4gICAgZGkgPSBkaSB8fCBnZXREaShlbGVtZW50KTtcblxuICAgIGlmIChkaSAmJiBpcyhkaSwgJ2JwbW5kaTpCUE1OUGxhbmUnKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpICYmICEhZGkuaXNFeHBhbmRlZDtcbiAgfVxuXG4gIGlmIChpcyhlbGVtZW50LCAnYnBtbjpQYXJ0aWNpcGFudCcpKSB7XG4gICAgcmV0dXJuICEhZ2V0QnVzaW5lc3NPYmplY3QoZWxlbWVudCkucHJvY2Vzc1JlZjtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVycnVwdGluZyhlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ICYmIGdldEJ1c2luZXNzT2JqZWN0KGVsZW1lbnQpLmlzSW50ZXJydXB0aW5nICE9PSBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFdmVudFN1YlByb2Nlc3MoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCAmJiAhIWdldEJ1c2luZXNzT2JqZWN0KGVsZW1lbnQpLnRyaWdnZXJlZEJ5RXZlbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0V2ZW50RGVmaW5pdGlvbihlbGVtZW50LCBldmVudFR5cGUpIHtcbiAgdmFyIGV2ZW50RGVmaW5pdGlvbnMgPSBnZXRCdXNpbmVzc09iamVjdChlbGVtZW50KS5ldmVudERlZmluaXRpb25zO1xuXG4gIHJldHVybiBzb21lKGV2ZW50RGVmaW5pdGlvbnMsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGlzKGV2ZW50LCBldmVudFR5cGUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzRXJyb3JFdmVudERlZmluaXRpb24oZWxlbWVudCkge1xuICByZXR1cm4gaGFzRXZlbnREZWZpbml0aW9uKGVsZW1lbnQsICdicG1uOkVycm9yRXZlbnREZWZpbml0aW9uJyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0VzY2FsYXRpb25FdmVudERlZmluaXRpb24oZWxlbWVudCkge1xuICByZXR1cm4gaGFzRXZlbnREZWZpbml0aW9uKGVsZW1lbnQsICdicG1uOkVzY2FsYXRpb25FdmVudERlZmluaXRpb24nKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzQ29tcGVuc2F0ZUV2ZW50RGVmaW5pdGlvbihlbGVtZW50KSB7XG4gIHJldHVybiBoYXNFdmVudERlZmluaXRpb24oZWxlbWVudCwgJ2JwbW46Q29tcGVuc2F0ZUV2ZW50RGVmaW5pdGlvbicpO1xufVxuIl0sIm5hbWVzIjpbImlzIiwiZ2V0QnVzaW5lc3NPYmplY3QiLCJnZXREaSIsInNvbWUiLCJpc0V4cGFuZGVkIiwiZWxlbWVudCIsImRpIiwicHJvY2Vzc1JlZiIsImlzSW50ZXJydXB0aW5nIiwiaXNFdmVudFN1YlByb2Nlc3MiLCJ0cmlnZ2VyZWRCeUV2ZW50IiwiaGFzRXZlbnREZWZpbml0aW9uIiwiZXZlbnRUeXBlIiwiZXZlbnREZWZpbml0aW9ucyIsImV2ZW50IiwiaGFzRXJyb3JFdmVudERlZmluaXRpb24iLCJoYXNFc2NhbGF0aW9uRXZlbnREZWZpbml0aW9uIiwiaGFzQ29tcGVuc2F0ZUV2ZW50RGVmaW5pdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js/lib/util/DiUtil.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js/lib/util/ModelUtil.js":
/*!************************************************!*\
  !*** ../bpmn-io/bpmn-js/lib/util/ModelUtil.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBusinessObject: () => (/* binding */ getBusinessObject),\n/* harmony export */   getDi: () => (/* binding */ getDi),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   isAny: () => (/* binding */ isAny)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/bpmn-js/node_modules/min-dash/dist/index.esm.js\");\n\n\n/**\n * @typedef { import('../model/Types').Element } Element\n * @typedef { import('../model/Types').ModdleElement } ModdleElement\n */\n\n/**\n * Is an element of the given BPMN type?\n *\n * @param  {Element|ModdleElement} element\n * @param  {string} type\n *\n * @return {boolean}\n */\nfunction is(element, type) {\n  var bo = getBusinessObject(element);\n  return bo && typeof bo.$instanceOf === 'function' && bo.$instanceOf(type);\n}\n\n/**\n * Return true if element has any of the given types.\n *\n * @param {Element|ModdleElement} element\n * @param {string[]} types\n *\n * @return {boolean}\n */\nfunction isAny(element, types) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.some)(types, function (t) {\n    return is(element, t);\n  });\n}\n\n/**\n * Return the business object for a given element.\n *\n * @param {Element|ModdleElement} element\n *\n * @return {ModdleElement}\n */\nfunction getBusinessObject(element) {\n  return element && element.businessObject || element;\n}\n\n/**\n * Return the di object for a given element.\n *\n * @param {Element} element\n *\n * @return {ModdleElement}\n */\nfunction getDi(element) {\n  return element && element.di;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnBtbi1pby9icG1uLWpzL2xpYi91dGlsL01vZGVsVXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLEVBQUVBLENBQUNDLE9BQU8sRUFBRUMsSUFBSSxFQUFFO0VBQ2hDLElBQUlDLEVBQUUsR0FBR0MsaUJBQWlCLENBQUNILE9BQU8sQ0FBQztFQUVuQyxPQUFPRSxFQUFFLElBQUssT0FBT0EsRUFBRSxDQUFDRSxXQUFXLEtBQUssVUFBVyxJQUFJRixFQUFFLENBQUNFLFdBQVcsQ0FBQ0gsSUFBSSxDQUFDO0FBQzdFOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTSSxLQUFLQSxDQUFDTCxPQUFPLEVBQUVNLEtBQUssRUFBRTtFQUNwQyxPQUFPUiw4Q0FBSSxDQUFDUSxLQUFLLEVBQUUsVUFBU0MsQ0FBQyxFQUFFO0lBQzdCLE9BQU9SLEVBQUUsQ0FBQ0MsT0FBTyxFQUFFTyxDQUFDLENBQUM7RUFDdkIsQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTSixpQkFBaUJBLENBQUNILE9BQU8sRUFBRTtFQUN6QyxPQUFRQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ1EsY0FBYyxJQUFLUixPQUFPO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU1MsS0FBS0EsQ0FBQ1QsT0FBTyxFQUFFO0VBQzdCLE9BQU9BLE9BQU8sSUFBSUEsT0FBTyxDQUFDVSxFQUFFO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2RheXMtMjAyMy8uLi9icG1uLWlvL2JwbW4tanMvbGliL3V0aWwvTW9kZWxVdGlsLmpzPzdlYjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgc29tZVxufSBmcm9tICdtaW4tZGFzaCc7XG5cbi8qKlxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uL21vZGVsL1R5cGVzJykuRWxlbWVudCB9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi9tb2RlbC9UeXBlcycpLk1vZGRsZUVsZW1lbnQgfSBNb2RkbGVFbGVtZW50XG4gKi9cblxuLyoqXG4gKiBJcyBhbiBlbGVtZW50IG9mIHRoZSBnaXZlbiBCUE1OIHR5cGU/XG4gKlxuICogQHBhcmFtICB7RWxlbWVudHxNb2RkbGVFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0gIHtzdHJpbmd9IHR5cGVcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXMoZWxlbWVudCwgdHlwZSkge1xuICB2YXIgYm8gPSBnZXRCdXNpbmVzc09iamVjdChlbGVtZW50KTtcblxuICByZXR1cm4gYm8gJiYgKHR5cGVvZiBiby4kaW5zdGFuY2VPZiA9PT0gJ2Z1bmN0aW9uJykgJiYgYm8uJGluc3RhbmNlT2YodHlwZSk7XG59XG5cblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiBlbGVtZW50IGhhcyBhbnkgb2YgdGhlIGdpdmVuIHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxNb2RkbGVFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSB0eXBlc1xuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FueShlbGVtZW50LCB0eXBlcykge1xuICByZXR1cm4gc29tZSh0eXBlcywgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBpcyhlbGVtZW50LCB0KTtcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBidXNpbmVzcyBvYmplY3QgZm9yIGEgZ2l2ZW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR8TW9kZGxlRWxlbWVudH0gZWxlbWVudFxuICpcbiAqIEByZXR1cm4ge01vZGRsZUVsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXNpbmVzc09iamVjdChlbGVtZW50KSB7XG4gIHJldHVybiAoZWxlbWVudCAmJiBlbGVtZW50LmJ1c2luZXNzT2JqZWN0KSB8fCBlbGVtZW50O1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZGkgb2JqZWN0IGZvciBhIGdpdmVuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKlxuICogQHJldHVybiB7TW9kZGxlRWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERpKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5kaTtcbn0iXSwibmFtZXMiOlsic29tZSIsImlzIiwiZWxlbWVudCIsInR5cGUiLCJibyIsImdldEJ1c2luZXNzT2JqZWN0IiwiJGluc3RhbmNlT2YiLCJpc0FueSIsInR5cGVzIiwidCIsImJ1c2luZXNzT2JqZWN0IiwiZ2V0RGkiLCJkaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js/lib/util/ModelUtil.js\n");

/***/ }),

/***/ "../bpmn-io/diagram-js/lib/features/resize/ResizeUtil.js":
/*!***************************************************************!*\
  !*** ../bpmn-io/diagram-js/lib/features/resize/ResizeUtil.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPadding: () => (/* binding */ addPadding),\n/* harmony export */   computeChildrenBBox: () => (/* binding */ computeChildrenBBox),\n/* harmony export */   ensureConstraints: () => (/* binding */ ensureConstraints),\n/* harmony export */   getMinResizeBounds: () => (/* binding */ getMinResizeBounds),\n/* harmony export */   reattachPoint: () => (/* binding */ reattachPoint),\n/* harmony export */   resizeBounds: () => (/* binding */ resizeBounds),\n/* harmony export */   resizeTRBL: () => (/* binding */ resizeTRBL),\n/* harmony export */   substractTRBL: () => (/* binding */ substractTRBL)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/diagram-js/node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var _util_Elements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/Elements */ \"../bpmn-io/diagram-js/lib/util/Elements.js\");\n/* harmony import */ var _layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../layout/LayoutUtil */ \"../bpmn-io/diagram-js/lib/layout/LayoutUtil.js\");\n\nvar max = Math.max,\n  min = Math.min;\nvar DEFAULT_CHILD_BOX_PADDING = 20;\n\n\n\n/**\n * @typedef {import('../../core/Types').ElementLike} Element\n * @typedef {import('../../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../../util/Types').Direction} Direction\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Rect} Rect\n * @typedef {import('../../util/Types').RectTRBL} RectTRBL\n */\n\n/**\n * Substract a TRBL from another\n *\n * @param {RectTRBL} trblA\n * @param {RectTRBL} trblB\n *\n * @return {RectTRBL}\n */\nfunction substractTRBL(trblA, trblB) {\n  return {\n    top: trblA.top - trblB.top,\n    right: trblA.right - trblB.right,\n    bottom: trblA.bottom - trblB.bottom,\n    left: trblA.left - trblB.left\n  };\n}\n\n/**\n * Resize the given bounds by the specified delta from a given anchor point.\n *\n * @param {Rect} bounds the bounding box that should be resized\n * @param {Direction} direction in which the element is resized (nw, ne, se, sw)\n * @param {Point} delta of the resize operation\n *\n * @return {Rect} resized bounding box\n */\nfunction resizeBounds(bounds, direction, delta) {\n  var dx = delta.x,\n    dy = delta.y;\n  var newBounds = {\n    x: bounds.x,\n    y: bounds.y,\n    width: bounds.width,\n    height: bounds.height\n  };\n  if (direction.indexOf('n') !== -1) {\n    newBounds.y = bounds.y + dy;\n    newBounds.height = bounds.height - dy;\n  } else if (direction.indexOf('s') !== -1) {\n    newBounds.height = bounds.height + dy;\n  }\n  if (direction.indexOf('e') !== -1) {\n    newBounds.width = bounds.width + dx;\n  } else if (direction.indexOf('w') !== -1) {\n    newBounds.x = bounds.x + dx;\n    newBounds.width = bounds.width - dx;\n  }\n  return newBounds;\n}\n\n/**\n * Resize the given bounds by applying the passed\n * { top, right, bottom, left } delta.\n *\n * @param {Rect} bounds\n * @param {RectTRBL} resize\n *\n * @return {Rect}\n */\nfunction resizeTRBL(bounds, resize) {\n  return {\n    x: bounds.x + (resize.left || 0),\n    y: bounds.y + (resize.top || 0),\n    width: bounds.width - (resize.left || 0) + (resize.right || 0),\n    height: bounds.height - (resize.top || 0) + (resize.bottom || 0)\n  };\n}\nfunction reattachPoint(bounds, newBounds, point) {\n  var sx = bounds.width / newBounds.width,\n    sy = bounds.height / newBounds.height;\n  return {\n    x: Math.round(newBounds.x + newBounds.width / 2) - Math.floor((bounds.x + bounds.width / 2 - point.x) / sx),\n    y: Math.round(newBounds.y + newBounds.height / 2) - Math.floor((bounds.y + bounds.height / 2 - point.y) / sy)\n  };\n}\nfunction applyConstraints(attr, trbl, resizeConstraints) {\n  var value = trbl[attr],\n    minValue = resizeConstraints.min && resizeConstraints.min[attr],\n    maxValue = resizeConstraints.max && resizeConstraints.max[attr];\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(minValue)) {\n    value = (/top|left/.test(attr) ? min : max)(value, minValue);\n  }\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(maxValue)) {\n    value = (/top|left/.test(attr) ? max : min)(value, maxValue);\n  }\n  return value;\n}\nfunction ensureConstraints(currentBounds, resizeConstraints) {\n  if (!resizeConstraints) {\n    return currentBounds;\n  }\n  var currentTrbl = (0,_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asTRBL)(currentBounds);\n  return (0,_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asBounds)({\n    top: applyConstraints('top', currentTrbl, resizeConstraints),\n    right: applyConstraints('right', currentTrbl, resizeConstraints),\n    bottom: applyConstraints('bottom', currentTrbl, resizeConstraints),\n    left: applyConstraints('left', currentTrbl, resizeConstraints)\n  });\n}\nfunction getMinResizeBounds(direction, currentBounds, minDimensions, childrenBounds) {\n  var currentBox = (0,_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asTRBL)(currentBounds);\n  var minBox = {\n    top: /n/.test(direction) ? currentBox.bottom - minDimensions.height : currentBox.top,\n    left: /w/.test(direction) ? currentBox.right - minDimensions.width : currentBox.left,\n    bottom: /s/.test(direction) ? currentBox.top + minDimensions.height : currentBox.bottom,\n    right: /e/.test(direction) ? currentBox.left + minDimensions.width : currentBox.right\n  };\n  var childrenBox = childrenBounds ? (0,_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asTRBL)(childrenBounds) : minBox;\n  var combinedBox = {\n    top: min(minBox.top, childrenBox.top),\n    left: min(minBox.left, childrenBox.left),\n    bottom: max(minBox.bottom, childrenBox.bottom),\n    right: max(minBox.right, childrenBox.right)\n  };\n  return (0,_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.asBounds)(combinedBox);\n}\nfunction asPadding(mayBePadding, defaultValue) {\n  if (typeof mayBePadding !== 'undefined') {\n    return mayBePadding;\n  } else {\n    return DEFAULT_CHILD_BOX_PADDING;\n  }\n}\nfunction addPadding(bbox, padding) {\n  var left, right, top, bottom;\n  if (typeof padding === 'object') {\n    left = asPadding(padding.left);\n    right = asPadding(padding.right);\n    top = asPadding(padding.top);\n    bottom = asPadding(padding.bottom);\n  } else {\n    left = right = top = bottom = asPadding(padding);\n  }\n  return {\n    x: bbox.x - left,\n    y: bbox.y - top,\n    width: bbox.width + left + right,\n    height: bbox.height + top + bottom\n  };\n}\n\n/**\n * Is the given element part of the resize\n * targets min boundary box?\n *\n * This is the default implementation which excludes\n * connections and labels.\n *\n * @param {Element} element\n */\nfunction isBBoxChild(element) {\n  // exclude connections\n  if (element.waypoints) {\n    return false;\n  }\n\n  // exclude labels\n  if (element.type === 'label') {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Return children bounding computed from a shapes children\n * or a list of prefiltered children.\n *\n * @param {Shape|Shape[]} shapeOrChildren\n * @param {RectTRBL|number} padding\n *\n * @return {Rect}\n */\nfunction computeChildrenBBox(shapeOrChildren, padding) {\n  var elements;\n\n  // compute based on shape\n  if (shapeOrChildren.length === undefined) {\n    // grab all the children that are part of the\n    // parents children box\n    elements = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.filter)(shapeOrChildren.children, isBBoxChild);\n  } else {\n    elements = shapeOrChildren;\n  }\n  if (elements.length) {\n    return addPadding((0,_util_Elements__WEBPACK_IMPORTED_MODULE_2__.getBBox)(elements), padding);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/diagram-js/lib/features/resize/ResizeUtil.js\n");

/***/ }),

/***/ "../bpmn-io/diagram-js/lib/layout/LayoutUtil.js":
/*!******************************************************!*\
  !*** ../bpmn-io/diagram-js/lib/layout/LayoutUtil.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asBounds: () => (/* binding */ asBounds),\n/* harmony export */   asTRBL: () => (/* binding */ asTRBL),\n/* harmony export */   filterRedundantWaypoints: () => (/* binding */ filterRedundantWaypoints),\n/* harmony export */   getBoundsMid: () => (/* binding */ getBoundsMid),\n/* harmony export */   getConnectionMid: () => (/* binding */ getConnectionMid),\n/* harmony export */   getElementLineIntersection: () => (/* binding */ getElementLineIntersection),\n/* harmony export */   getIntersections: () => (/* binding */ getIntersections),\n/* harmony export */   getMid: () => (/* binding */ getMid),\n/* harmony export */   getOrientation: () => (/* binding */ getOrientation),\n/* harmony export */   roundBounds: () => (/* binding */ roundBounds),\n/* harmony export */   roundPoint: () => (/* binding */ roundPoint)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/diagram-js/node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var _util_Geometry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Geometry */ \"../bpmn-io/diagram-js/lib/util/Geometry.js\");\n/* harmony import */ var path_intersection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path-intersection */ \"../bpmn-io/diagram-js/node_modules/path-intersection/intersect.js\");\n/* harmony import */ var path_intersection__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path_intersection__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ModelUtil */ \"../bpmn-io/diagram-js/lib/util/ModelUtil.js\");\n\n\n\n\n\n/**\n * @typedef {import('../core/Types').ElementLike} Element\n * @typedef {import('../core/Types').ConnectionLike} Connection\n *\n * @typedef {import('../util/Types').DirectionTRBL} DirectionTRBL\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n * @typedef {import('../util/Types').RectTRBL} RectTRBL\n */\n\n/**\n * @param {Rect} bounds\n *\n * @returns {Rect}\n */\nfunction roundBounds(bounds) {\n  return {\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  };\n}\n\n/**\n * @param {Point} point\n *\n * @returns {Point}\n */\nfunction roundPoint(point) {\n  return {\n    x: Math.round(point.x),\n    y: Math.round(point.y)\n  };\n}\n\n/**\n * Convert the given bounds to a { top, left, bottom, right } descriptor.\n *\n * @param {Point|Rect} bounds\n *\n * @return {RectTRBL}\n */\nfunction asTRBL(bounds) {\n  return {\n    top: bounds.y,\n    right: bounds.x + (bounds.width || 0),\n    bottom: bounds.y + (bounds.height || 0),\n    left: bounds.x\n  };\n}\n\n/**\n * Convert a { top, left, bottom, right } to an objects bounds.\n *\n * @param {RectTRBL} trbl\n *\n * @return {Rect}\n */\nfunction asBounds(trbl) {\n  return {\n    x: trbl.left,\n    y: trbl.top,\n    width: trbl.right - trbl.left,\n    height: trbl.bottom - trbl.top\n  };\n}\n\n/**\n * Get the mid of the given bounds or point.\n *\n * @param {Point|Rect} bounds\n *\n * @return {Point}\n */\nfunction getBoundsMid(bounds) {\n  return roundPoint({\n    x: bounds.x + (bounds.width || 0) / 2,\n    y: bounds.y + (bounds.height || 0) / 2\n  });\n}\n\n/**\n * Get the mid of the given Connection.\n *\n * @param {Connection} connection\n *\n * @return {Point}\n */\nfunction getConnectionMid(connection) {\n  var waypoints = connection.waypoints;\n\n  // calculate total length and length of each segment\n  var parts = waypoints.reduce(function (parts, point, index) {\n    var lastPoint = waypoints[index - 1];\n    if (lastPoint) {\n      var lastPart = parts[parts.length - 1];\n      var startLength = lastPart && lastPart.endLength || 0;\n      var length = distance(lastPoint, point);\n      parts.push({\n        start: lastPoint,\n        end: point,\n        startLength: startLength,\n        endLength: startLength + length,\n        length: length\n      });\n    }\n    return parts;\n  }, []);\n  var totalLength = parts.reduce(function (length, part) {\n    return length + part.length;\n  }, 0);\n\n  // find which segement contains middle point\n  var midLength = totalLength / 2;\n  var i = 0;\n  var midSegment = parts[i];\n  while (midSegment.endLength < midLength) {\n    midSegment = parts[++i];\n  }\n\n  // calculate relative position on mid segment\n  var segmentProgress = (midLength - midSegment.startLength) / midSegment.length;\n  var midPoint = {\n    x: midSegment.start.x + (midSegment.end.x - midSegment.start.x) * segmentProgress,\n    y: midSegment.start.y + (midSegment.end.y - midSegment.start.y) * segmentProgress\n  };\n  return midPoint;\n}\n\n/**\n * Get the mid of the given Element.\n *\n * @param {Element} element\n *\n * @return {Point}\n */\nfunction getMid(element) {\n  if ((0,_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__.isConnection)(element)) {\n    return getConnectionMid(element);\n  }\n  return getBoundsMid(element);\n}\n\n// orientation utils //////////////////////\n\n/**\n * Get orientation of the given rectangle with respect to\n * the reference rectangle.\n *\n * A padding (positive or negative) may be passed to influence\n * horizontal / vertical orientation and intersection.\n *\n * @param {Rect} rect\n * @param {Rect} reference\n * @param {Point|number} padding\n *\n * @return {DirectionTRBL} the orientation; one of top, top-left, left, ..., bottom, right or intersect.\n */\nfunction getOrientation(rect, reference, padding) {\n  padding = padding || 0;\n\n  // make sure we can use an object, too\n  // for individual { x, y } padding\n  if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_2__.isObject)(padding)) {\n    padding = {\n      x: padding,\n      y: padding\n    };\n  }\n  var rectOrientation = asTRBL(rect),\n    referenceOrientation = asTRBL(reference);\n  var top = rectOrientation.bottom + padding.y <= referenceOrientation.top,\n    right = rectOrientation.left - padding.x >= referenceOrientation.right,\n    bottom = rectOrientation.top - padding.y >= referenceOrientation.bottom,\n    left = rectOrientation.right + padding.x <= referenceOrientation.left;\n  var vertical = top ? 'top' : bottom ? 'bottom' : null,\n    horizontal = left ? 'left' : right ? 'right' : null;\n  if (horizontal && vertical) {\n    return vertical + '-' + horizontal;\n  } else {\n    return horizontal || vertical || 'intersect';\n  }\n}\n\n// intersection utils //////////////////////\n\n/**\n * Get intersection between an element and a line path.\n *\n * @param {string} elementPath\n * @param {string} linePath\n * @param {boolean} cropStart Whether to crop start or end.\n *\n * @return {Point}\n */\nfunction getElementLineIntersection(elementPath, linePath, cropStart) {\n  var intersections = getIntersections(elementPath, linePath);\n\n  // recognize intersections\n  // only one -> choose\n  // two close together -> choose first\n  // two or more distinct -> pull out appropriate one\n  // none -> ok (fallback to point itself)\n  if (intersections.length === 1) {\n    return roundPoint(intersections[0]);\n  } else if (intersections.length === 2 && (0,_util_Geometry__WEBPACK_IMPORTED_MODULE_3__.pointDistance)(intersections[0], intersections[1]) < 1) {\n    return roundPoint(intersections[0]);\n  } else if (intersections.length > 1) {\n    // sort by intersections based on connection segment +\n    // distance from start\n    intersections = (0,min_dash__WEBPACK_IMPORTED_MODULE_2__.sortBy)(intersections, function (i) {\n      var distance = Math.floor(i.t2 * 100) || 1;\n      distance = 100 - distance;\n      distance = (distance < 10 ? '0' : '') + distance;\n\n      // create a sort string that makes sure we sort\n      // line segment ASC + line segment position DESC (for cropStart)\n      // line segment ASC + line segment position ASC (for cropEnd)\n      return i.segment2 + '#' + distance;\n    });\n    return roundPoint(intersections[cropStart ? 0 : intersections.length - 1]);\n  }\n  return null;\n}\nfunction getIntersections(a, b) {\n  return path_intersection__WEBPACK_IMPORTED_MODULE_0___default()(a, b);\n}\nfunction filterRedundantWaypoints(waypoints) {\n  // alter copy of waypoints, not original\n  waypoints = waypoints.slice();\n  var idx = 0,\n    point,\n    previousPoint,\n    nextPoint;\n  while (waypoints[idx]) {\n    point = waypoints[idx];\n    previousPoint = waypoints[idx - 1];\n    nextPoint = waypoints[idx + 1];\n    if ((0,_util_Geometry__WEBPACK_IMPORTED_MODULE_3__.pointDistance)(point, nextPoint) === 0 || (0,_util_Geometry__WEBPACK_IMPORTED_MODULE_3__.pointsOnLine)(previousPoint, nextPoint, point)) {\n      // remove point, if overlapping with {nextPoint}\n      // or on line with {previousPoint} -> {point} -> {nextPoint}\n      waypoints.splice(idx, 1);\n    } else {\n      idx++;\n    }\n  }\n  return waypoints;\n}\n\n// helpers //////////////////////\n\nfunction distance(a, b) {\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/diagram-js/lib/layout/LayoutUtil.js\n");

/***/ }),

/***/ "../bpmn-io/diagram-js/lib/util/Elements.js":
/*!**************************************************!*\
  !*** ../bpmn-io/diagram-js/lib/util/Elements.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   eachElement: () => (/* binding */ eachElement),\n/* harmony export */   getBBox: () => (/* binding */ getBBox),\n/* harmony export */   getClosure: () => (/* binding */ getClosure),\n/* harmony export */   getEnclosedElements: () => (/* binding */ getEnclosedElements),\n/* harmony export */   getParents: () => (/* binding */ getParents),\n/* harmony export */   getType: () => (/* binding */ getType),\n/* harmony export */   isFrameElement: () => (/* binding */ isFrameElement),\n/* harmony export */   selfAndAllChildren: () => (/* binding */ selfAndAllChildren),\n/* harmony export */   selfAndChildren: () => (/* binding */ selfAndChildren),\n/* harmony export */   selfAndDirectChildren: () => (/* binding */ selfAndDirectChildren)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/diagram-js/node_modules/min-dash/dist/index.esm.js\");\n\n\n/**\n * @typedef {import('../model/Types').Connection} Connection\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').Shape} Shape\n *\n * @typedef {import('../../type/Types').Rect} Rect\n *\n * @typedef { {\n *   allShapes: Record<string, Shape>,\n *   allConnections: Record<string, Connection>,\n *   topLevel: Record<string, Element>,\n *   enclosedConnections: Record<string, Connection>,\n *   enclosedElements: Record<string, Element>\n * } } Closure\n */\n\n/**\n * Get parent elements.\n *\n * @param {Element[]} elements\n *\n * @return {Element[]}\n */\nfunction getParents(elements) {\n  // find elements that are not children of any other elements\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.filter)(elements, function (element) {\n    return !(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.find)(elements, function (e) {\n      return e !== element && getParent(element, e);\n    });\n  });\n}\nfunction getParent(element, parent) {\n  if (!parent) {\n    return;\n  }\n  if (element === parent) {\n    return parent;\n  }\n  if (!element.parent) {\n    return;\n  }\n  return getParent(element.parent, parent);\n}\n\n/**\n * Adds an element to a collection and returns true if the\n * element was added.\n *\n * @param {Object[]} elements\n * @param {Object} element\n * @param {boolean} [unique]\n */\nfunction add(elements, element, unique) {\n  var canAdd = !unique || elements.indexOf(element) === -1;\n  if (canAdd) {\n    elements.push(element);\n  }\n  return canAdd;\n}\n\n/**\n * Iterate over each element in a collection, calling the iterator function `fn`\n * with (element, index, recursionDepth).\n *\n * Recurse into all elements that are returned by `fn`.\n *\n * @param {Element|Element[]} elements\n * @param {(element: Element, index: number, depth: number) => Element[] | boolean | undefined} fn\n * @param {number} [depth] maximum recursion depth\n */\nfunction eachElement(elements, fn, depth) {\n  depth = depth || 0;\n  if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(elements)) {\n    elements = [elements];\n  }\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(elements, function (s, i) {\n    var filter = fn(s, i, depth);\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(filter) && filter.length) {\n      eachElement(filter, fn, depth + 1);\n    }\n  });\n}\n\n/**\n * Collects self + child elements up to a given depth from a list of elements.\n *\n * @param {Element|Element[]} elements the elements to select the children from\n * @param {boolean} unique whether to return a unique result set (no duplicates)\n * @param {number} maxDepth the depth to search through or -1 for infinite\n *\n * @return {Element[]} found elements\n */\nfunction selfAndChildren(elements, unique, maxDepth) {\n  var result = [],\n    processedChildren = [];\n  eachElement(elements, function (element, i, depth) {\n    add(result, element, unique);\n    var children = element.children;\n\n    // max traversal depth not reached yet\n    if (maxDepth === -1 || depth < maxDepth) {\n      // children exist && children not yet processed\n      if (children && add(processedChildren, children, unique)) {\n        return children;\n      }\n    }\n  });\n  return result;\n}\n\n/**\n * Return self + direct children for a number of elements\n *\n * @param {Element[]} elements to query\n * @param {boolean} [allowDuplicates] to allow duplicates in the result set\n *\n * @return {Element[]} the collected elements\n */\nfunction selfAndDirectChildren(elements, allowDuplicates) {\n  return selfAndChildren(elements, !allowDuplicates, 1);\n}\n\n/**\n * Return self + ALL children for a number of elements\n *\n * @param {Element[]} elements to query\n * @param {boolean} [allowDuplicates] to allow duplicates in the result set\n *\n * @return {Element[]} the collected elements\n */\nfunction selfAndAllChildren(elements, allowDuplicates) {\n  return selfAndChildren(elements, !allowDuplicates, -1);\n}\n\n/**\n * Gets the the closure for all selected elements,\n * their enclosed children and connections.\n *\n * @param {Element[]} elements\n * @param {boolean} [isTopLevel=true]\n * @param {Closure} [closure]\n *\n * @return {Closure} newClosure\n */\nfunction getClosure(elements, isTopLevel, closure) {\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(isTopLevel)) {\n    isTopLevel = true;\n  }\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(isTopLevel)) {\n    closure = isTopLevel;\n    isTopLevel = true;\n  }\n  closure = closure || {};\n  var allShapes = copyObject(closure.allShapes),\n    allConnections = copyObject(closure.allConnections),\n    enclosedElements = copyObject(closure.enclosedElements),\n    enclosedConnections = copyObject(closure.enclosedConnections);\n  var topLevel = copyObject(closure.topLevel, isTopLevel && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.groupBy)(elements, function (e) {\n    return e.id;\n  }));\n  function handleConnection(c) {\n    if (topLevel[c.source.id] && topLevel[c.target.id]) {\n      topLevel[c.id] = [c];\n    }\n\n    // not enclosed as a child, but maybe logically\n    // (connecting two moved elements?)\n    if (allShapes[c.source.id] && allShapes[c.target.id]) {\n      enclosedConnections[c.id] = enclosedElements[c.id] = c;\n    }\n    allConnections[c.id] = c;\n  }\n  function handleElement(element) {\n    enclosedElements[element.id] = element;\n    if (element.waypoints) {\n      // remember connection\n      enclosedConnections[element.id] = allConnections[element.id] = element;\n    } else {\n      // remember shape\n      allShapes[element.id] = element;\n\n      // remember all connections\n      (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(element.incoming, handleConnection);\n      (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(element.outgoing, handleConnection);\n\n      // recurse into children\n      return element.children;\n    }\n  }\n  eachElement(elements, handleElement);\n  return {\n    allShapes: allShapes,\n    allConnections: allConnections,\n    topLevel: topLevel,\n    enclosedConnections: enclosedConnections,\n    enclosedElements: enclosedElements\n  };\n}\n\n/**\n * Returns the surrounding bbox for all elements in\n * the array or the element primitive.\n *\n * @param {Element|Element[]} elements\n * @param {boolean} [stopRecursion=false]\n *\n * @return {Rect}\n */\nfunction getBBox(elements, stopRecursion) {\n  stopRecursion = !!stopRecursion;\n  if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(elements)) {\n    elements = [elements];\n  }\n  var minX, minY, maxX, maxY;\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(elements, function (element) {\n    // If element is a connection the bbox must be computed first\n    var bbox = element;\n    if (element.waypoints && !stopRecursion) {\n      bbox = getBBox(element.waypoints, true);\n    }\n    var x = bbox.x,\n      y = bbox.y,\n      height = bbox.height || 0,\n      width = bbox.width || 0;\n    if (x < minX || minX === undefined) {\n      minX = x;\n    }\n    if (y < minY || minY === undefined) {\n      minY = y;\n    }\n    if (x + width > maxX || maxX === undefined) {\n      maxX = x + width;\n    }\n    if (y + height > maxY || maxY === undefined) {\n      maxY = y + height;\n    }\n  });\n  return {\n    x: minX,\n    y: minY,\n    height: maxY - minY,\n    width: maxX - minX\n  };\n}\n\n/**\n * Returns all elements that are enclosed from the bounding box.\n *\n *   * If bbox.(width|height) is not specified the method returns\n *     all elements with element.x/y > bbox.x/y\n *   * If only bbox.x or bbox.y is specified, method return all elements with\n *     e.x > bbox.x or e.y > bbox.y\n *\n * @param {Element[]} elements List of Elements to search through\n * @param {Rect} bbox the enclosing bbox.\n *\n * @return {Element[]} enclosed elements\n */\nfunction getEnclosedElements(elements, bbox) {\n  var filteredElements = {};\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(elements, function (element) {\n    var e = element;\n    if (e.waypoints) {\n      e = getBBox(e);\n    }\n    if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.y) && e.x > bbox.x) {\n      filteredElements[element.id] = element;\n    }\n    if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.x) && e.y > bbox.y) {\n      filteredElements[element.id] = element;\n    }\n    if (e.x > bbox.x && e.y > bbox.y) {\n      if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.width) && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.height) && e.width + e.x < bbox.width + bbox.x && e.height + e.y < bbox.height + bbox.y) {\n        filteredElements[element.id] = element;\n      } else if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.width) || !(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.height)) {\n        filteredElements[element.id] = element;\n      }\n    }\n  });\n  return filteredElements;\n}\n\n/**\n * Get the element's type\n *\n * @param {Element} element\n *\n * @return {'connection' | 'shape' | 'root'}\n */\nfunction getType(element) {\n  if ('waypoints' in element) {\n    return 'connection';\n  }\n  if ('x' in element) {\n    return 'shape';\n  }\n  return 'root';\n}\n\n/**\n * @param {Element} element\n *\n * @return {boolean}\n */\nfunction isFrameElement(element) {\n  return !!(element && element.isFrame);\n}\n\n// helpers ///////////////////////////////\n\nfunction copyObject(src1, src2) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.assign)({}, src1 || {}, src2 || {});\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/diagram-js/lib/util/Elements.js\n");

/***/ }),

/***/ "../bpmn-io/diagram-js/lib/util/Geometry.js":
/*!**************************************************!*\
  !*** ../bpmn-io/diagram-js/lib/util/Geometry.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMidPoint: () => (/* binding */ getMidPoint),\n/* harmony export */   pointDistance: () => (/* binding */ pointDistance),\n/* harmony export */   pointInRect: () => (/* binding */ pointInRect),\n/* harmony export */   pointsAligned: () => (/* binding */ pointsAligned),\n/* harmony export */   pointsAlignedOnAxis: () => (/* binding */ pointsAlignedOnAxis),\n/* harmony export */   pointsOnLine: () => (/* binding */ pointsOnLine)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/diagram-js/node_modules/min-dash/dist/index.esm.js\");\n\n\n/**\n * @typedef {import('../util/Types').Axis} Axis\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n */\n\n/**\n * Computes the distance between two points.\n *\n * @param {Point} a\n * @param {Point} b\n *\n * @return {number} The distance between the two points.\n */\nfunction pointDistance(a, b) {\n  if (!a || !b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}\n\n/**\n * Returns true if the point r is on the line between p and q.\n *\n * @param {Point} p\n * @param {Point} q\n * @param {Point} r\n * @param {number} [accuracy=5] The accuracy with which to check (lower is better).\n *\n * @return {boolean}\n */\nfunction pointsOnLine(p, q, r, accuracy) {\n  if (typeof accuracy === 'undefined') {\n    accuracy = 5;\n  }\n  if (!p || !q || !r) {\n    return false;\n  }\n  var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),\n    dist = pointDistance(p, q);\n\n  // @see http://stackoverflow.com/a/907491/412190\n  return Math.abs(val / dist) <= accuracy;\n}\nvar ALIGNED_THRESHOLD = 2;\n\n/**\n * Check whether two points are horizontally or vertically aligned.\n *\n * @param {Point[]|Point} a\n * @param {Point} [b]\n *\n * @return {string|boolean} If and how the two points are aligned ('h', 'v' or `false`).\n */\nfunction pointsAligned(a, b) {\n  var points = Array.from(arguments).flat();\n  const axisMap = {\n    'x': 'v',\n    'y': 'h'\n  };\n  for (const [axis, orientation] of Object.entries(axisMap)) {\n    if (pointsAlignedOnAxis(axis, points)) {\n      return orientation;\n    }\n  }\n  return false;\n}\n\n/**\n * @param {Axis} axis\n * @param {Point[]} points\n *\n * @return {boolean}\n */\nfunction pointsAlignedOnAxis(axis, points) {\n  const referencePoint = points[0];\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.every)(points, function (point) {\n    return Math.abs(referencePoint[axis] - point[axis]) <= ALIGNED_THRESHOLD;\n  });\n}\n\n/**\n * Returns true if the point p is inside the rectangle rect\n *\n * @param {Point} p\n * @param {Rect} rect\n * @param {number} tolerance\n *\n * @return {boolean}\n */\nfunction pointInRect(p, rect, tolerance) {\n  tolerance = tolerance || 0;\n  return p.x > rect.x - tolerance && p.y > rect.y - tolerance && p.x < rect.x + rect.width + tolerance && p.y < rect.y + rect.height + tolerance;\n}\n\n/**\n * Returns a point in the middle of points p and q\n *\n * @param {Point} p\n * @param {Point} q\n *\n * @return {Point} The mid point between the two points.\n */\nfunction getMidPoint(p, q) {\n  return {\n    x: Math.round(p.x + (q.x - p.x) / 2.0),\n    y: Math.round(p.y + (q.y - p.y) / 2.0)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnBtbi1pby9kaWFncmFtLWpzL2xpYi91dGlsL0dlb21ldHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFa0I7O0FBRWxCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGFBQWFBLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xDLElBQUksQ0FBQ0QsQ0FBQyxJQUFJLENBQUNDLENBQUMsRUFBRTtJQUNaLE9BQU8sQ0FBQyxDQUFDO0VBQ1g7RUFFQSxPQUFPQyxJQUFJLENBQUNDLElBQUksQ0FDZEQsSUFBSSxDQUFDRSxHQUFHLENBQUNKLENBQUMsQ0FBQ0ssQ0FBQyxHQUFHSixDQUFDLENBQUNJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FDdEJILElBQUksQ0FBQ0UsR0FBRyxDQUFDSixDQUFDLENBQUNNLENBQUMsR0FBR0wsQ0FBQyxDQUFDSyxDQUFDLEVBQUUsQ0FBQyxDQUN2QixDQUFDO0FBQ0g7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQyxZQUFZQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxRQUFRLEVBQUU7RUFFOUMsSUFBSSxPQUFPQSxRQUFRLEtBQUssV0FBVyxFQUFFO0lBQ25DQSxRQUFRLEdBQUcsQ0FBQztFQUNkO0VBRUEsSUFBSSxDQUFDSCxDQUFDLElBQUksQ0FBQ0MsQ0FBQyxJQUFJLENBQUNDLENBQUMsRUFBRTtJQUNsQixPQUFPLEtBQUs7RUFDZDtFQUVBLElBQUlFLEdBQUcsR0FBRyxDQUFDSCxDQUFDLENBQUNKLENBQUMsR0FBR0csQ0FBQyxDQUFDSCxDQUFDLEtBQUtLLENBQUMsQ0FBQ0osQ0FBQyxHQUFHRSxDQUFDLENBQUNGLENBQUMsQ0FBQyxHQUFHLENBQUNHLENBQUMsQ0FBQ0gsQ0FBQyxHQUFHRSxDQUFDLENBQUNGLENBQUMsS0FBS0ksQ0FBQyxDQUFDTCxDQUFDLEdBQUdHLENBQUMsQ0FBQ0gsQ0FBQyxDQUFDO0lBQzNEUSxJQUFJLEdBQUdkLGFBQWEsQ0FBQ1MsQ0FBQyxFQUFFQyxDQUFDLENBQUM7O0VBRTlCO0VBQ0EsT0FBT1AsSUFBSSxDQUFDWSxHQUFHLENBQUNGLEdBQUcsR0FBR0MsSUFBSSxDQUFDLElBQUlGLFFBQVE7QUFDekM7QUFHQSxJQUFJSSxpQkFBaUIsR0FBRyxDQUFDOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsYUFBYUEsQ0FBQ2hCLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xDLElBQUlnQixNQUFNLEdBQUdDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7RUFFekMsTUFBTUMsT0FBTyxHQUFHO0lBQ2QsR0FBRyxFQUFFLEdBQUc7SUFDUixHQUFHLEVBQUU7RUFDUCxDQUFDO0VBRUQsS0FBSyxNQUFNLENBQUVDLElBQUksRUFBRUMsV0FBVyxDQUFFLElBQUlDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDSixPQUFPLENBQUMsRUFBRTtJQUMzRCxJQUFJSyxtQkFBbUIsQ0FBQ0osSUFBSSxFQUFFTixNQUFNLENBQUMsRUFBRTtNQUNyQyxPQUFPTyxXQUFXO0lBQ3BCO0VBQ0Y7RUFFQSxPQUFPLEtBQUs7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRyxtQkFBbUJBLENBQUNKLElBQUksRUFBRU4sTUFBTSxFQUFFO0VBQ2hELE1BQU1XLGNBQWMsR0FBR1gsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUVoQyxPQUFPbkIsK0NBQUssQ0FBQ21CLE1BQU0sRUFBRSxVQUFTWSxLQUFLLEVBQUU7SUFDbkMsT0FBTzNCLElBQUksQ0FBQ1ksR0FBRyxDQUFDYyxjQUFjLENBQUNMLElBQUksQ0FBQyxHQUFHTSxLQUFLLENBQUNOLElBQUksQ0FBQyxDQUFDLElBQUlSLGlCQUFpQjtFQUMxRSxDQUFDLENBQUM7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTZSxXQUFXQSxDQUFDdEIsQ0FBQyxFQUFFdUIsSUFBSSxFQUFFQyxTQUFTLEVBQUU7RUFDOUNBLFNBQVMsR0FBR0EsU0FBUyxJQUFJLENBQUM7RUFFMUIsT0FBT3hCLENBQUMsQ0FBQ0gsQ0FBQyxHQUFHMEIsSUFBSSxDQUFDMUIsQ0FBQyxHQUFHMkIsU0FBUyxJQUN4QnhCLENBQUMsQ0FBQ0YsQ0FBQyxHQUFHeUIsSUFBSSxDQUFDekIsQ0FBQyxHQUFHMEIsU0FBUyxJQUN4QnhCLENBQUMsQ0FBQ0gsQ0FBQyxHQUFHMEIsSUFBSSxDQUFDMUIsQ0FBQyxHQUFHMEIsSUFBSSxDQUFDRSxLQUFLLEdBQUdELFNBQVMsSUFDckN4QixDQUFDLENBQUNGLENBQUMsR0FBR3lCLElBQUksQ0FBQ3pCLENBQUMsR0FBR3lCLElBQUksQ0FBQ0csTUFBTSxHQUFHRixTQUFTO0FBQy9DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRyxXQUFXQSxDQUFDM0IsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDaEMsT0FBTztJQUNMSixDQUFDLEVBQUVILElBQUksQ0FBQ2tDLEtBQUssQ0FBQzVCLENBQUMsQ0FBQ0gsQ0FBQyxHQUFJLENBQUNJLENBQUMsQ0FBQ0osQ0FBQyxHQUFHRyxDQUFDLENBQUNILENBQUMsSUFBSSxHQUFJLENBQUM7SUFDeENDLENBQUMsRUFBRUosSUFBSSxDQUFDa0MsS0FBSyxDQUFDNUIsQ0FBQyxDQUFDRixDQUFDLEdBQUksQ0FBQ0csQ0FBQyxDQUFDSCxDQUFDLEdBQUdFLENBQUMsQ0FBQ0YsQ0FBQyxJQUFJLEdBQUk7RUFDekMsQ0FBQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2RheXMtMjAyMy8uLi9icG1uLWlvL2RpYWdyYW0tanMvbGliL3V0aWwvR2VvbWV0cnkuanM/MjY0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBldmVyeVxufSBmcm9tICdtaW4tZGFzaCc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdXRpbC9UeXBlcycpLkF4aXN9IEF4aXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3V0aWwvVHlwZXMnKS5Qb2ludH0gUG9pbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3V0aWwvVHlwZXMnKS5SZWN0fSBSZWN0XG4gKi9cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzLlxuICpcbiAqIEBwYXJhbSB7UG9pbnR9IGFcbiAqIEBwYXJhbSB7UG9pbnR9IGJcbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gcG9pbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9pbnREaXN0YW5jZShhLCBiKSB7XG4gIGlmICghYSB8fCAhYikge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLnNxcnQoXG4gICAgTWF0aC5wb3coYS54IC0gYi54LCAyKSArXG4gICAgTWF0aC5wb3coYS55IC0gYi55LCAyKVxuICApO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwb2ludCByIGlzIG9uIHRoZSBsaW5lIGJldHdlZW4gcCBhbmQgcS5cbiAqXG4gKiBAcGFyYW0ge1BvaW50fSBwXG4gKiBAcGFyYW0ge1BvaW50fSBxXG4gKiBAcGFyYW0ge1BvaW50fSByXG4gKiBAcGFyYW0ge251bWJlcn0gW2FjY3VyYWN5PTVdIFRoZSBhY2N1cmFjeSB3aXRoIHdoaWNoIHRvIGNoZWNrIChsb3dlciBpcyBiZXR0ZXIpLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwb2ludHNPbkxpbmUocCwgcSwgciwgYWNjdXJhY3kpIHtcblxuICBpZiAodHlwZW9mIGFjY3VyYWN5ID09PSAndW5kZWZpbmVkJykge1xuICAgIGFjY3VyYWN5ID0gNTtcbiAgfVxuXG4gIGlmICghcCB8fCAhcSB8fCAhcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciB2YWwgPSAocS54IC0gcC54KSAqIChyLnkgLSBwLnkpIC0gKHEueSAtIHAueSkgKiAoci54IC0gcC54KSxcbiAgICAgIGRpc3QgPSBwb2ludERpc3RhbmNlKHAsIHEpO1xuXG4gIC8vIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvOTA3NDkxLzQxMjE5MFxuICByZXR1cm4gTWF0aC5hYnModmFsIC8gZGlzdCkgPD0gYWNjdXJhY3k7XG59XG5cblxudmFyIEFMSUdORURfVEhSRVNIT0xEID0gMjtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHR3byBwb2ludHMgYXJlIGhvcml6b250YWxseSBvciB2ZXJ0aWNhbGx5IGFsaWduZWQuXG4gKlxuICogQHBhcmFtIHtQb2ludFtdfFBvaW50fSBhXG4gKiBAcGFyYW0ge1BvaW50fSBbYl1cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd8Ym9vbGVhbn0gSWYgYW5kIGhvdyB0aGUgdHdvIHBvaW50cyBhcmUgYWxpZ25lZCAoJ2gnLCAndicgb3IgYGZhbHNlYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwb2ludHNBbGlnbmVkKGEsIGIpIHtcbiAgdmFyIHBvaW50cyA9IEFycmF5LmZyb20oYXJndW1lbnRzKS5mbGF0KCk7XG5cbiAgY29uc3QgYXhpc01hcCA9IHtcbiAgICAneCc6ICd2JyxcbiAgICAneSc6ICdoJ1xuICB9O1xuXG4gIGZvciAoY29uc3QgWyBheGlzLCBvcmllbnRhdGlvbiBdIG9mIE9iamVjdC5lbnRyaWVzKGF4aXNNYXApKSB7XG4gICAgaWYgKHBvaW50c0FsaWduZWRPbkF4aXMoYXhpcywgcG9pbnRzKSkge1xuICAgICAgcmV0dXJuIG9yaWVudGF0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0F4aXN9IGF4aXNcbiAqIEBwYXJhbSB7UG9pbnRbXX0gcG9pbnRzXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvaW50c0FsaWduZWRPbkF4aXMoYXhpcywgcG9pbnRzKSB7XG4gIGNvbnN0IHJlZmVyZW5jZVBvaW50ID0gcG9pbnRzWzBdO1xuXG4gIHJldHVybiBldmVyeShwb2ludHMsIGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHJlZmVyZW5jZVBvaW50W2F4aXNdIC0gcG9pbnRbYXhpc10pIDw9IEFMSUdORURfVEhSRVNIT0xEO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBvaW50IHAgaXMgaW5zaWRlIHRoZSByZWN0YW5nbGUgcmVjdFxuICpcbiAqIEBwYXJhbSB7UG9pbnR9IHBcbiAqIEBwYXJhbSB7UmVjdH0gcmVjdFxuICogQHBhcmFtIHtudW1iZXJ9IHRvbGVyYW5jZVxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwb2ludEluUmVjdChwLCByZWN0LCB0b2xlcmFuY2UpIHtcbiAgdG9sZXJhbmNlID0gdG9sZXJhbmNlIHx8IDA7XG5cbiAgcmV0dXJuIHAueCA+IHJlY3QueCAtIHRvbGVyYW5jZSAmJlxuICAgICAgICAgcC55ID4gcmVjdC55IC0gdG9sZXJhbmNlICYmXG4gICAgICAgICBwLnggPCByZWN0LnggKyByZWN0LndpZHRoICsgdG9sZXJhbmNlICYmXG4gICAgICAgICBwLnkgPCByZWN0LnkgKyByZWN0LmhlaWdodCArIHRvbGVyYW5jZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcG9pbnQgaW4gdGhlIG1pZGRsZSBvZiBwb2ludHMgcCBhbmQgcVxuICpcbiAqIEBwYXJhbSB7UG9pbnR9IHBcbiAqIEBwYXJhbSB7UG9pbnR9IHFcbiAqXG4gKiBAcmV0dXJuIHtQb2ludH0gVGhlIG1pZCBwb2ludCBiZXR3ZWVuIHRoZSB0d28gcG9pbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWlkUG9pbnQocCwgcSkge1xuICByZXR1cm4ge1xuICAgIHg6IE1hdGgucm91bmQocC54ICsgKChxLnggLSBwLngpIC8gMi4wKSksXG4gICAgeTogTWF0aC5yb3VuZChwLnkgKyAoKHEueSAtIHAueSkgLyAyLjApKVxuICB9O1xufVxuIl0sIm5hbWVzIjpbImV2ZXJ5IiwicG9pbnREaXN0YW5jZSIsImEiLCJiIiwiTWF0aCIsInNxcnQiLCJwb3ciLCJ4IiwieSIsInBvaW50c09uTGluZSIsInAiLCJxIiwiciIsImFjY3VyYWN5IiwidmFsIiwiZGlzdCIsImFicyIsIkFMSUdORURfVEhSRVNIT0xEIiwicG9pbnRzQWxpZ25lZCIsInBvaW50cyIsIkFycmF5IiwiZnJvbSIsImFyZ3VtZW50cyIsImZsYXQiLCJheGlzTWFwIiwiYXhpcyIsIm9yaWVudGF0aW9uIiwiT2JqZWN0IiwiZW50cmllcyIsInBvaW50c0FsaWduZWRPbkF4aXMiLCJyZWZlcmVuY2VQb2ludCIsInBvaW50IiwicG9pbnRJblJlY3QiLCJyZWN0IiwidG9sZXJhbmNlIiwid2lkdGgiLCJoZWlnaHQiLCJnZXRNaWRQb2ludCIsInJvdW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../bpmn-io/diagram-js/lib/util/Geometry.js\n");

/***/ }),

/***/ "../bpmn-io/diagram-js/lib/util/ModelUtil.js":
/*!***************************************************!*\
  !*** ../bpmn-io/diagram-js/lib/util/ModelUtil.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isConnection: () => (/* binding */ isConnection),\n/* harmony export */   isLabel: () => (/* binding */ isLabel),\n/* harmony export */   isRoot: () => (/* binding */ isRoot)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"../bpmn-io/diagram-js/node_modules/min-dash/dist/index.esm.js\");\n\n\n/**\n * Checks whether a value is an instance of Connection.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nfunction isConnection(value) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.has)(value, 'waypoints');\n}\n\n/**\n * Checks whether a value is an instance of Label.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nfunction isLabel(value) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.has)(value, 'labelTarget');\n}\n\n/**\n * Checks whether a value is an instance of Root.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nfunction isRoot(value) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNil)(value.parent);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vYnBtbi1pby9kaWFncmFtLWpzL2xpYi91dGlsL01vZGVsVXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSWtCOztBQUVsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNHLFlBQVlBLENBQUNDLEtBQUssRUFBRTtFQUNsQyxPQUFPRixrREFBUSxDQUFDRSxLQUFLLENBQUMsSUFBSUosNkNBQUcsQ0FBQ0ksS0FBSyxFQUFFLFdBQVcsQ0FBQztBQUNuRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLE9BQU9BLENBQUNELEtBQUssRUFBRTtFQUM3QixPQUFPRixrREFBUSxDQUFDRSxLQUFLLENBQUMsSUFBSUosNkNBQUcsQ0FBQ0ksS0FBSyxFQUFFLGFBQWEsQ0FBQztBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNFLE1BQU1BLENBQUNGLEtBQUssRUFBRTtFQUM1QixPQUFPRixrREFBUSxDQUFDRSxLQUFLLENBQUMsSUFBSUgsK0NBQUssQ0FBQ0csS0FBSyxDQUFDRyxNQUFNLENBQUM7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrZGF5cy0yMDIzLy4uL2JwbW4taW8vZGlhZ3JhbS1qcy9saWIvdXRpbC9Nb2RlbFV0aWwuanM/NTdlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBoYXMsXG4gIGlzTmlsLFxuICBpc09iamVjdFxufSBmcm9tICdtaW4tZGFzaCc7XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBDb25uZWN0aW9uLlxuICpcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Nvbm5lY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiBoYXModmFsdWUsICd3YXlwb2ludHMnKTtcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIExhYmVsLlxuICpcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xhYmVsKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgaGFzKHZhbHVlLCAnbGFiZWxUYXJnZXQnKTtcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIFJvb3QuXG4gKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUm9vdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIGlzTmlsKHZhbHVlLnBhcmVudCk7XG59Il0sIm5hbWVzIjpbImhhcyIsImlzTmlsIiwiaXNPYmplY3QiLCJpc0Nvbm5lY3Rpb24iLCJ2YWx1ZSIsImlzTGFiZWwiLCJpc1Jvb3QiLCJwYXJlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../bpmn-io/diagram-js/lib/util/ModelUtil.js\n");

/***/ }),

/***/ "./src/features/AppendNode.js":
/*!************************************!*\
  !*** ./src/features/AppendNode.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AppendNode)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var min_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! min-dom */ \"./node_modules/min-dom/dist/index.esm.js\");\n/* harmony import */ var diagram_js_lib_util_Elements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! diagram-js/lib/util/Elements */ \"./node_modules/diagram-js/lib/util/Elements.js\");\n\n\n\n\n/**\n * @typedef {import('../../model/Types').Element} Element\n *\n * @typedef {import('../../util/Types').Rect} Rect\n *\n * @typedef {import('../../core/Canvas').default} Canvas\n * @typedef {import('../../core/EventBus').default} EventBus\n * @typedef {import('../overlays/Overlays').default} Overlays\n *\n * @typedef {import('../overlays/Overlays').Overlay} Overlay\n *\n */\n\n/**\n * @template {Element} [ElementType=Element]\n *\n * @typedef {ElementType|ElementType[]} AppendNodeTarget\n */\n\nvar nodeSelector = '.djs-append-node-circle';\nvar OFFSET = 4;\nvar NODE_WIDTH = 20;\nvar DEFAULT_PRIORITY = 1000;\nvar ALLOWED_ACTIONS = ['click', 'dragstart'];\n\n/**\n * Append node around elements,\n * allowing to append anything.\n *\n * @param {Canvas} canvas\n * @param {EventBus} eventBus\n * @param {Overlays} overlays\n */\nfunction AppendNode(canvas, eventBus, overlays, appendPreview) {\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._overlays = overlays;\n  this._appendPreview = appendPreview;\n  this._current = null;\n  this._init();\n}\nAppendNode.$inject = ['canvas', 'eventBus', 'overlays', 'appendPreview'];\n\n// TODO provider to only show on relevant elements\n\n/**\n * Registers events needed for interaction with other components.\n */\nAppendNode.prototype._init = function () {\n  var self = this;\n  this._eventBus.on('selection.changed', function (event) {\n    var selection = event.newSelection;\n    var target = selection.length ? selection.length === 1 ? selection[0] : selection : null;\n    if (target) {\n      self.show(target, true);\n    } else {\n      self.hide();\n    }\n  });\n  this._eventBus.on('elements.changed', function (event) {\n    var elements = event.elements,\n      current = self._current;\n    if (!current) {\n      return;\n    }\n    var currentTarget = current.target;\n    var currentChanged = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.some)((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(currentTarget) ? currentTarget : [currentTarget], function (element) {\n      return includes(elements, element);\n    });\n\n    // re-open if elements in current selection changed\n    if (currentChanged) {\n      self.show(currentTarget, true);\n    }\n  });\n};\n\n/**\n * @overlord\n *\n * Register a context pad provider with the default priority. See\n * {@link AppendNodeProvider} for examples.\n *\n * @param {AppendNodeProvider} provider\n */\n\n/**\n * Register a context pad provider with the given priority. See\n * {@link AppendNodeProvider} for examples.\n *\n * @param {number} priority\n * @param {AppendNodeProvider} provider\n */\nAppendNode.prototype.registerProvider = function (priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on('appendNode.getProviders', priority, function (event) {\n    event.providers.push(provider);\n  });\n};\n\n/**\n * Get append node actions for given elements.\n *\n * @param {AppendNodeTarget} target\n *\n * @return {AppendNodeActions} object of drag and click actions\n */\nAppendNode.prototype.getActions = function (target) {\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) return {};\n  var providers = this._getProviders();\n  var clickFn = 'getAppendNodeClickAction';\n  var dragFn = 'getAppendNodeDragAction';\n  var entries = {};\n\n  // TODO does it make sense to register multiple?\n\n  // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(providers, provider => {\n    // click\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(provider[clickFn])) {\n      entries['click'] = provider[clickFn](target);\n    }\n\n    // drag\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(provider[dragFn])) {\n      entries['dragstart'] = provider[dragFn](target);\n    }\n    console.log('entries: ', entries);\n    entries.hover = (_, element) => {\n      // mouseover\n      console.log('mouseover');\n      this._appendPreview.create(element, 'bpmn:Task', {\n        hidden: true\n      });\n      return () => {\n        // mouseout\n        console.log('mouseout');\n        this._appendPreview.delete();\n      };\n    };\n  });\n  return entries;\n};\n\n/**\n * Trigger context pad via DOM event.\n *\n * The entry to trigger is determined by the target element.\n *\n * @param {string} action\n * @param {Event} event\n * @param {boolean} [autoActivate=false]\n */\n\nAppendNode.prototype.trigger = function (action, event, autoActivate) {\n  var originalEvent,\n    button = event.delegateTarget || event.target;\n  if (!button) {\n    return event.preventDefault();\n  }\n\n  //entry = domAttr(button, 'data-action');\n  originalEvent = event.originalEvent || event;\n  const HOVER_DELAY = 300;\n  if (action === 'mouseover') {\n    this._timeout = setTimeout(() => {\n      this._mouseout = this.triggerAction('hover', originalEvent, autoActivate);\n    }, HOVER_DELAY);\n  } else if (action === 'mouseout') {\n    clearTimeout(this._timeout);\n    if (this._mouseout) {\n      this._mouseout();\n      this._mouseout = null;\n    }\n  }\n  return this.triggerAction(action, originalEvent, autoActivate);\n};\n\n/**\n * Trigger append node action.\n *\n * @param {string} action\n * @param {Event} event\n * @param {boolean} [autoActivate=false]\n */\nAppendNode.prototype.triggerAction = function (actionId, event, autoActivate) {\n  if (!this.isShown()) {\n    return;\n  }\n  var target = this._current.target,\n    actions = this._current.actions;\n  var action = actions[actionId];\n  if (!action) {\n    return;\n  }\n\n  //var handler = entry.action;\n  // action\n\n  if (this._eventBus.fire('appendNode.trigger', {\n    action,\n    event\n  }) === false) {\n    return;\n  }\n\n  // simple action (via callback function)\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(action)) {\n    return action(event, target, autoActivate);\n  }\n\n  // silence other actions\n  event.preventDefault();\n};\n\n/**\n * Show the append node for given elements.\n *\n * @param {AppendNodeTarget} target\n * @param {boolean} [force=false] - Force re-showing append node.\n */\nAppendNode.prototype.show = function (target, force) {\n  if (!force && this.isShown(target)) {\n    return;\n  }\n  this.hide();\n  this._updateAndShow(target);\n};\nAppendNode.prototype._getProviders = function () {\n  var event = this._eventBus.createEvent({\n    type: 'appendNode.getProviders',\n    providers: []\n  });\n  this._eventBus.fire(event);\n  return event.providers;\n};\n\n/**\n * @param {AppendNodeTarget} target\n */\nAppendNode.prototype._updateAndShow = function (target) {\n  var actions = this.getActions(target),\n    node = this.getNode(target),\n    html = node.html,\n    // TODO multiple nodes\n    image;\n  var showNode = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(actions) && ALLOWED_ACTIONS.some(action => (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(actions[action]));\n  (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.classes)(html).add(showNode ? 'show' : 'hide'); // TODO rename classes\n\n  this._current = {\n    target: target,\n    actions: actions,\n    node: node\n  };\n  this._eventBus.fire('appendNodes.show', {\n    current: this._current\n  });\n};\n\n/**\n * @param {AppendNodeTarget} target\n *\n * @return {Overlay}\n */\nAppendNode.prototype.getNode = function (target) {\n  if (this.isShown()) {\n    return this._current.node;\n  }\n  var self = this;\n  var overlays = this._overlays;\n\n  // TODO use real preview\n  /*\n  var appendPreview = `\n    <svg>  \n      <g class=\"djs-element djs-connection\" style=\"display: block;\">\n        <g class=\"djs-visual\">\n          <path data-corner-radius=\"5\" style=\"fill: none; stroke-linecap: round; stroke-linejoin: round; stroke: rgb(34, 36, 42); stroke-width: 2px; marker-end: url(&quot;#sequenceflow-end-white-hsl_225_10_15_-341b8e86qykbiuvsan2j7nkil&quot;);\" d=\"M370,790L420,790\"></path>\n        </g>\n      </g>\n    </svg>\n  `;\n  */\n\n  // TODO multiple nodes\n  var html = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.domify)(`\n    <div class=\"djs-append-node\">\n      <div class=\"djs-append-node-circle\" title=\"Append/connect\" draggable=\"true\"></div>\n    </div>\n  `);\n  var position = this._getPosition(target);\n  var overlaysConfig = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.assign)({\n    html: html\n  }, this._overlaysConfig, position);\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.delegate.bind(html, nodeSelector, 'click', function (event) {\n    self.trigger('click', event);\n  });\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.delegate.bind(html, nodeSelector, 'dragstart', function (event) {\n    self.trigger('dragstart', event);\n  });\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.delegate.bind(html, nodeSelector, 'mouseover', function (event) {\n    self.trigger('mouseover', event);\n  });\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.delegate.bind(html, nodeSelector, 'mouseout', function (event) {\n    self.trigger('mouseout', event);\n  });\n\n  // stop propagation of mouse events\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.event.bind(html, 'mousedown', function (event) {\n    event.stopPropagation();\n  });\n  var activeRootElement = this._canvas.getRootElement();\n\n  // TODO multiple nodes\n  this._overlayId = overlays.add(activeRootElement, 'append-node', overlaysConfig);\n  var node = overlays.get(this._overlayId);\n  this._eventBus.fire('appendNodes.create', {\n    target: target,\n    node: node\n  });\n  return node;\n};\n\n/**\n * Hide the node\n */\nAppendNode.prototype.hide = function () {\n  if (!this.isShown()) {\n    return;\n  }\n  this._overlays.remove(this._overlayId);\n  this._overlayId = null;\n  this._eventBus.fire('appendNodes.hide', {\n    current: this._current\n  });\n  this._current = null;\n};\n\n/**\n * Check if node is shown.\n *\n * If target is provided, check if it is shown\n * for the given target.\n *\n * @param {AppendNodeTarget} [target]\n * @return {boolean}\n */\nAppendNode.prototype.isShown = function (target) {\n  var current = this._current;\n  if (!current) {\n    return false;\n  }\n\n  // basic no-args is open check\n  if (!target) {\n    return true;\n  }\n  var currentTarget = current.target;\n\n  // TODO\n  // strict handling of single vs. multi-selection\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) !== (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(currentTarget)) {\n    return false;\n  }\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {\n    return target.length === currentTarget.length && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.every)(target, function (element) {\n      return includes(currentTarget, element);\n    });\n  } else {\n    return currentTarget === target;\n  }\n};\n\n// TODO multiple nodes\n/**\n * Get append node position.\n *\n * @param {AppendNodeTarget} target\n *\n * @return {Rect}\n */\nAppendNode.prototype._getPosition = function (target) {\n  var elements = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) ? target : [target];\n  var bBox = (0,diagram_js_lib_util_Elements__WEBPACK_IMPORTED_MODULE_2__.getBBox)(elements);\n  return {\n    position: {\n      left: bBox.x + bBox.width + OFFSET,\n      top: bBox.y + bBox.height / 2 - NODE_WIDTH\n    }\n  };\n};\n\n// helpers //////////\n\n/**\n * @param {any[]} array\n * @param {any} item\n *\n * @return {boolean}\n */\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/AppendNode.js\n");

/***/ }),

/***/ "./src/features/AppendNodeProvider.js":
/*!********************************************!*\
  !*** ./src/features/AppendNodeProvider.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AppendNodeProvider)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var bpmn_js_lib_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bpmn-js/lib/util/ModelUtil */ \"../bpmn-io/bpmn-js/lib/util/ModelUtil.js\");\n/* harmony import */ var bpmn_js_lib_util_DiUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bpmn-js/lib/util/DiUtil */ \"../bpmn-io/bpmn-js/lib/util/DiUtil.js\");\n/* harmony import */ var diagram_js_lib_util_Mouse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! diagram-js/lib/util/Mouse */ \"./node_modules/diagram-js/lib/util/Mouse.js\");\n\n\n\n\n\n/**\n * @typedef {import('didi').Injector} Injector\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('diagram-js/lib/features/context-pad/ContextPad').default} ContextPad\n * @typedef {import('../modeling/Modeling').default} Modeling\n * @typedef {import('../modeling/ElementFactory').default} ElementFactory\n * @typedef {import('diagram-js/lib/features/connect/Connect').default} Connect\n * @typedef {import('diagram-js/lib/features/create/Create').default} Create\n * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').default} PopupMenu\n * @typedef {import('diagram-js/lib/features/canvas/Canvas').default} Canvas\n * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules\n * @typedef {import('diagram-js/lib/features/dragging/Dragging').default} Dragging\n * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate\n *\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').ModdleElement} ModdleElement\n *\n * @typedef { { } } AppendNodeConfig\n */\n\n/**\n * BPMN-specific append node provider.\n *\n * @param {AppendNodeConfig} config\n * @param {Injector} injector\n * @param {EventBus} eventBus\n * @param {ContextPad} contextPad\n * @param {Modeling} modeling\n * @param {ElementFactory} elementFactory\n * @param {Connect} connect\n * @param {Create} create\n * @param {PopupMenu} popupMenu\n * @param {Canvas} canvas\n * @param {Rules} rules\n * @param {Dragging} dragging\n * @param {Translate} translate\n */\nfunction AppendNodeProvider(config, injector, eventBus, appendNode, modeling, elementFactory, connect, create, popupMenu, canvas, rules, dragging, translate) {\n  config = config || {};\n  appendNode.registerProvider(this);\n  this._appendNode = appendNode;\n  this._modeling = modeling;\n  this._elementFactory = elementFactory;\n  this._connect = connect;\n  this._create = create;\n  this._popupMenu = popupMenu;\n  this._canvas = canvas;\n  this._rules = rules;\n  this._dragging = dragging;\n  this._translate = translate;\n  if (config.autoPlace !== false) {\n    this._autoPlace = injector.get('autoPlace', false);\n  }\n  eventBus.on('create.end', 250, function (event) {\n    var context = event.context,\n      shape = context.shape;\n    if (!(0,diagram_js_lib_util_Mouse__WEBPACK_IMPORTED_MODULE_0__.hasPrimaryModifier)(event) || !appendNode.isShown(shape)) {\n      return;\n    }\n  });\n}\nAppendNodeProvider.$inject = ['config.appendNode', 'injector', 'eventBus', 'appendNode', 'modeling', 'elementFactory', 'connect', 'create', 'popupMenu', 'canvas', 'rules', 'dragging', 'translate'];\nfunction isAppendAllowed(element) {\n  var businessObject = element.businessObject;\n  return element.type !== 'label' & (0,bpmn_js_lib_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__.is)(businessObject, 'bpmn:FlowNode') && (!(0,bpmn_js_lib_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__.is)(businessObject, 'bpmn:EndEvent') && !businessObject.isForCompensation && !isEventType(businessObject, 'bpmn:IntermediateThrowEvent', 'bpmn:LinkEventDefinition') && !(0,bpmn_js_lib_util_DiUtil__WEBPACK_IMPORTED_MODULE_2__.isEventSubProcess)(businessObject) || (0,bpmn_js_lib_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__.is)(businessObject, 'bpmn:EventBasedGateway') || isEventType(businessObject, 'bpmn:BoundaryEvent', 'bpmn:CompensateEventDefinition'));\n}\n;\n\n/**\n* @param {Element} element\n*\n* @return {AppendNodeAction}\n*/\n/*\nAppendNodeProvider.prototype.getAppendNodeClickAction = function (element) {\n  var appendNode = this._appendNode,\n    modeling = this._modeling,\n\n    elementFactory = this._elementFactory,\n    connect = this._connect,\n    create = this._create,\n    popupMenu = this._popupMenu,\n    rules = this._rules,\n    autoPlace = this._autoPlace,\n    translate = this._translate;\n\n  if (!isAppendAllowed(element)) return null;\n\n  var task = 'bpmn:Task';\n  var options = {};\n\n  function appendStart(event, element) {\n\n    var shape = elementFactory.createShape(assign({ type: task }, options));\n    create.start(event, shape, {\n      source: element\n    });\n  }\n\n\n  var append = autoPlace ? function(event, element) {\n    var shape = elementFactory.createShape(assign({ type: task }, options));\n\n    autoPlace.append(element, shape);\n  } : appendStart;\n\n  return append;\n}\n*/\n\nAppendNodeProvider.prototype.getAppendNodeClickAction = function (element) {\n  var appendNode = this._appendNode,\n    modeling = this._modeling,\n    elementFactory = this._elementFactory,\n    connect = this._connect,\n    create = this._create,\n    popupMenu = this._popupMenu,\n    rules = this._rules,\n    autoPlace = this._autoPlace,\n    translate = this._translate;\n  if (!isAppendAllowed(element)) return null;\n  const getAppendMenuPosition = this._getAppendMenuPosition.bind(this);\n  if (popupMenu.isEmpty(element, 'bpmn-append')) return null;\n  return function (event, element) {\n    const position = (0,min_dash__WEBPACK_IMPORTED_MODULE_3__.assign)(getAppendMenuPosition(element), {\n      cursor: {\n        x: event.x,\n        y: event.y\n      }\n    });\n    popupMenu.open(element, 'bpmn-append', position, {\n      title: translate('Append element'),\n      width: 300,\n      search: true\n    });\n  };\n};\n\n/**\n* @param {Element} element\n*\n* @return {AppendNodeAction}\n*/\nAppendNodeProvider.prototype.getAppendNodeDragAction = function (element) {\n  var appendNode = this._appendNode,\n    modeling = this._modeling,\n    elementFactory = this._elementFactory,\n    connect = this._connect,\n    create = this._create,\n    popupMenu = this._popupMenu,\n    rules = this._rules,\n    dragging = this._dragging,\n    autoPlace = this._autoPlace,\n    translate = this._translate;\n  if (!isAppendAllowed(element)) return null;\n  var businessObject = element.businessObject;\n  function startConnect(event, element) {\n    connect.start(event, element);\n    /*\n    dragging.init(event, 'connect', {\n      data: {\n        shape: element,\n        context: {\n          start: element\n        }\n      }\n    });\n    */\n  }\n\n  return startConnect;\n};\n\n/**\n * Calculates the position for the append menu relatively to the element.\n * The menu should pop up directly behind the mouse cursor\n *\n * @param {djs.model.Base} element\n * @returns {Object}\n */\nAppendNodeProvider.prototype._getAppendMenuPosition = function (element) {\n  const appendNode = this._appendNode;\n  const popupMenu = this._popupMenu;\n  const X_OFFSET = 20;\n  const Y_OFFSET = 90;\n  const POPUP_HEIGHT = 360;\n\n  // TODO get height from popup after creation or make configurable\n\n  const node = appendNode.getNode(element).html;\n  const nodeRect = node.getBoundingClientRect();\n  const pos = {\n    x: nodeRect.left - X_OFFSET,\n    y: nodeRect.top + POPUP_HEIGHT - Y_OFFSET\n  };\n  return pos;\n};\n\n// helpers /////////\n\n/**\n * @param {ModdleElement} businessObject\n * @param {string} type\n * @param {string} eventDefinitionType\n *\n * @return {boolean}\n */\nfunction isEventType(businessObject, type, eventDefinitionType) {\n  var isType = businessObject.$instanceOf(type);\n  var isDefinition = false;\n  var definitions = businessObject.eventDefinitions || [];\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_3__.forEach)(definitions, function (def) {\n    if (def.$type === eventDefinitionType) {\n      isDefinition = true;\n    }\n  });\n  return isType && isDefinition;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/AppendNodeProvider.js\n");

/***/ }),

/***/ "./src/features/BoundaryEventAppender.js":
/*!***********************************************!*\
  !*** ./src/features/BoundaryEventAppender.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BoundaryEventAppender)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var min_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! min-dom */ \"./node_modules/min-dom/dist/index.esm.js\");\n/* harmony import */ var diagram_js_lib_util_Elements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! diagram-js/lib/util/Elements */ \"./node_modules/diagram-js/lib/util/Elements.js\");\n\n\n\n\n/**\n * @typedef {import('../../model/Types').Element} Element\n *\n * @typedef {import('../../util/Types').Rect} Rect\n *\n * @typedef {import('../../core/Canvas').default} Canvas\n * @typedef {import('../../core/EventBus').default} EventBus\n * @typedef {import('../overlays/Overlays').default} Overlays\n *\n * @typedef {import('../overlays/Overlays').Overlay} Overlay\n *\n */\n\n/**\n * @template {Element} [ElementType=Element]\n *\n * @typedef {ElementType|ElementType[]} BoundaryEventAppenderTarget\n */\n\nvar nodeSelector = '.djs-boundary-event-appender-circle';\nvar OFFSET = 20;\nvar NODE_WIDTH = 20;\nvar DEFAULT_PRIORITY = 1000;\nvar ALLOWED_ACTIONS = ['click', 'dragstart'];\n\n/**\n * Append node around elements,\n * allowing to append anything.\n *\n * @param {Canvas} canvas\n * @param {EventBus} eventBus\n * @param {Overlays} overlays\n */\nfunction BoundaryEventAppender(canvas, eventBus, overlays) {\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._overlays = overlays;\n  this._current = null;\n  this._init();\n}\nBoundaryEventAppender.$inject = ['canvas', 'eventBus', 'overlays'];\n\n// TODO provider to only show on relevant elements\n\n/**\n * Registers events needed for interaction with other components.\n */\nBoundaryEventAppender.prototype._init = function () {\n  var self = this;\n  this._eventBus.on('selection.changed', function (event) {\n    var selection = event.newSelection;\n    var target = selection.length ? selection.length === 1 ? selection[0] : selection : null;\n    if (target) {\n      self.show(target, true);\n    } else {\n      self.hide();\n    }\n  });\n  this._eventBus.on('elements.changed', function (event) {\n    var elements = event.elements,\n      current = self._current;\n    if (!current) {\n      return;\n    }\n    var currentTarget = current.target;\n    var currentChanged = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.some)((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(currentTarget) ? currentTarget : [currentTarget], function (element) {\n      return includes(elements, element);\n    });\n\n    // re-open if elements in current selection changed\n    if (currentChanged) {\n      self.show(currentTarget, true);\n    }\n  });\n};\n\n/**\n * @overlord\n *\n * Register a provider with the default priority. See\n * {@link BoundaryEventAppenderProvider} for examples.\n *\n * @param {BoundaryEventAppenderProvider} provider\n */\n\n/**\n * Register a provider with the given priority. See\n * {@link BoundaryEventAppenderProvider} for examples.\n *\n * @param {number} priority\n * @param {BoundaryEventAppenderProvider} provider\n */\nBoundaryEventAppender.prototype.registerProvider = function (priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on('boundaryEventAppender.getProviders', priority, function (event) {\n    event.providers.push(provider);\n  });\n};\n\n/**\n * Get boundary event appender actions for given elements.\n *\n * @param {BoundaryEventAppenderTarget} target\n *\n * @return {BoundaryEventAppenderActions} object of drag and click actions\n */\nBoundaryEventAppender.prototype.getActions = function (target) {\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) return {};\n  var providers = this._getProviders();\n  var clickFn = 'getBoundaryEventAppenderClickAction';\n  var dragFn = 'getBoundaryEventAppenderDragAction';\n  var entries = {};\n\n  // TODO does it make sense to register multiple?\n\n  // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(providers, function (provider) {\n    // click\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(provider[clickFn])) {\n      entries['click'] = provider[clickFn](target);\n    }\n\n    // drag\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(provider[dragFn])) {\n      entries['dragstart'] = provider[dragFn](target);\n    }\n  });\n  return entries;\n};\n\n/**\n * Trigger context pad via DOM event.\n *\n * The entry to trigger is determined by the target element.\n *\n * @param {string} action\n * @param {Event} event\n * @param {boolean} [autoActivate=false]\n */\n\nBoundaryEventAppender.prototype.trigger = function (action, event, autoActivate) {\n  var originalEvent,\n    button = event.delegateTarget || event.target;\n  if (!button) {\n    return event.preventDefault();\n  }\n  originalEvent = event.originalEvent || event;\n  return this.triggerAction(action, originalEvent, autoActivate);\n};\n\n/**\n * Trigger boundary event appender action.\n *\n * @param {string} action\n * @param {Event} event\n * @param {boolean} [autoActivate=false]\n */\nBoundaryEventAppender.prototype.triggerAction = function (actionId, event, autoActivate) {\n  if (!this.isShown()) {\n    return;\n  }\n  var target = this._current.target,\n    actions = this._current.actions;\n  var action = actions[actionId];\n  if (!action) {\n    return;\n  }\n\n  //var handler = entry.action;\n  // action\n\n  if (this._eventBus.fire('boundaryEventAppender.trigger', {\n    action,\n    event\n  }) === false) {\n    return;\n  }\n\n  // simple action (via callback function)\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(action)) {\n    return action(event, target, autoActivate);\n  }\n\n  // silence other actions\n  event.preventDefault();\n};\n\n/**\n * Show the boundary event appender for given elements.\n *\n * @param {BoundaryEventAppenderTarget} target\n * @param {boolean} [force=false] - Force re-showing boundary event appender.\n */\nBoundaryEventAppender.prototype.show = function (target, force) {\n  if (!force && this.isShown(target)) {\n    return;\n  }\n  this.hide();\n  this._updateAndShow(target);\n};\nBoundaryEventAppender.prototype._getProviders = function () {\n  var event = this._eventBus.createEvent({\n    type: 'boundaryEventAppender.getProviders',\n    providers: []\n  });\n  this._eventBus.fire(event);\n  return event.providers;\n};\n\n/**\n * @param {BoundaryEventAppenderTarget} target\n */\nBoundaryEventAppender.prototype._updateAndShow = function (target) {\n  var actions = this.getActions(target),\n    node = this.getNode(target),\n    html = node.html,\n    // TODO multiple nodes\n    image;\n  var showNode = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(actions) && ALLOWED_ACTIONS.some(action => (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(actions[action]));\n  (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.classes)(html).add(showNode ? 'show' : 'hide'); // TODO rename classes\n\n  this._current = {\n    target: target,\n    actions: actions,\n    node: node\n  };\n  this._eventBus.fire('boundaryEventAppenders.show', {\n    current: this._current\n  });\n};\n\n/**\n * @param {BoundaryEventAppenderTarget} target\n *\n * @return {Overlay}\n */\nBoundaryEventAppender.prototype.getNode = function (target) {\n  if (this.isShown()) {\n    return this._current.node;\n  }\n  var self = this;\n  var overlays = this._overlays;\n  var eventSvg = `\n    <svg>\n      <g class=\"djs-visual\">\n        <circle cx=\"18\" cy=\"18\" r=\"18\" style=\"stroke-linecap: round; stroke-linejoin: round; stroke-width: 1.5px; fill: white;\"></circle>\n        <circle cx=\"18\" cy=\"18\" r=\"15\" style=\"stroke-linecap: round; stroke-linejoin: round; stroke-width: 1.5px; fill: none;\"></circle>\n      </g>\n    </svg>\n  `;\n  var html = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.domify)(`\n    <div class=\"djs-boundary-event-appender\">\n      <div class=\"djs-boundary-event-appender-circle\" title=\"Add boundary event\" draggable=\"true\"></div>\n    </div>\n  `);\n  var position = this._getPosition(target);\n  var overlaysConfig = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.assign)({\n    html: html\n  }, this._overlaysConfig, position);\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.delegate.bind(html, nodeSelector, 'click', function (event) {\n    self.trigger('click', event);\n  });\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.delegate.bind(html, nodeSelector, 'dragstart', function (event) {\n    self.trigger('dragstart', event);\n  });\n\n  // stop propagation of mouse events\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.event.bind(html, 'mousedown', function (event) {\n    event.stopPropagation();\n  });\n  var activeRootElement = this._canvas.getRootElement();\n\n  // TODO multiple nodes\n  this._overlayId = overlays.add(activeRootElement, 'boundary-event-appender', overlaysConfig);\n  var node = overlays.get(this._overlayId);\n  this._eventBus.fire('boundaryEventAppenders.create', {\n    target: target,\n    node: node\n  });\n  return node;\n};\n\n/**\n * Hide the node\n */\nBoundaryEventAppender.prototype.hide = function () {\n  if (!this.isShown()) {\n    return;\n  }\n  this._overlays.remove(this._overlayId);\n  this._overlayId = null;\n  this._eventBus.fire('boundaryEventAppenders.hide', {\n    current: this._current\n  });\n  this._current = null;\n};\n\n/**\n * Check if node is shown.\n *\n * If target is provided, check if it is shown\n * for the given target.\n *\n * @param {BoundaryEventAppenderTarget} [target]\n * @return {boolean}\n */\nBoundaryEventAppender.prototype.isShown = function (target) {\n  var current = this._current;\n  if (!current) {\n    return false;\n  }\n\n  // basic no-args is open check\n  if (!target) {\n    return true;\n  }\n  var currentTarget = current.target;\n\n  // TODO\n  // strict handling of single vs. multi-selection\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) !== (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(currentTarget)) {\n    return false;\n  }\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {\n    return target.length === currentTarget.length && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.every)(target, function (element) {\n      return includes(currentTarget, element);\n    });\n  } else {\n    return currentTarget === target;\n  }\n};\n\n/**\n * Get boundary event appender position.\n *\n * @param {BoundaryEventAppenderTarget} target\n *\n * @return {Rect}\n */\nBoundaryEventAppender.prototype._getPosition = function (target) {\n  var elements = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) ? target : [target];\n  var bBox = (0,diagram_js_lib_util_Elements__WEBPACK_IMPORTED_MODULE_2__.getBBox)(elements);\n  console.log(bBox);\n  return {\n    position: {\n      left: bBox.x + bBox.width - OFFSET + 2,\n      top: bBox.y + bBox.height - OFFSET + 2\n    }\n  };\n};\n\n// helpers //////////\n\n/**\n * @param {any[]} array\n * @param {any} item\n *\n * @return {boolean}\n */\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/BoundaryEventAppender.js\n");

/***/ }),

/***/ "./src/features/BoundaryEventAppenderProvider.js":
/*!*******************************************************!*\
  !*** ./src/features/BoundaryEventAppenderProvider.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BoundaryEventAppenderProvider)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var bpmn_js_lib_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bpmn-js/lib/util/ModelUtil */ \"../bpmn-io/bpmn-js/lib/util/ModelUtil.js\");\n/* harmony import */ var bpmn_js_lib_util_DiUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bpmn-js/lib/util/DiUtil */ \"../bpmn-io/bpmn-js/lib/util/DiUtil.js\");\n/* harmony import */ var diagram_js_lib_util_Mouse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! diagram-js/lib/util/Mouse */ \"./node_modules/diagram-js/lib/util/Mouse.js\");\n\n\n\n\n\n\n\n\n/**\n * @typedef {import('didi').Injector} Injector\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('diagram-js/lib/features/context-pad/ContextPad').default} ContextPad\n * @typedef {import('../modeling/Modeling').default} Modeling\n * @typedef {import('../modeling/ElementFactory').default} ElementFactory\n * @typedef {import('diagram-js/lib/features/connect/Connect').default} Connect\n * @typedef {import('diagram-js/lib/features/create/Create').default} Create\n * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').default} PopupMenu\n * @typedef {import('diagram-js/lib/features/canvas/Canvas').default} Canvas\n * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules\n * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate\n *\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').ModdleElement} ModdleElement\n *\n * @typedef { { } } BoundaryEventAppenderConfig\n */\n\n/**\n * BPMN-specific boundary event appender provider.\n *\n * @param {BoundaryEventAppenderConfig} config\n * @param {Injector} injector\n * @param {EventBus} eventBus\n * @param {ContextPad} contextPad\n * @param {Modeling} modeling\n * @param {ElementFactory} elementFactory\n * @param {Connect} connect\n * @param {Create} create\n * @param {PopupMenu} popupMenu\n * @param {Canvas} canvas\n * @param {Rules} rules\n * @param {Translate} translate\n */\nfunction BoundaryEventAppenderProvider(config, injector, eventBus, boundaryEventAppender, modeling, elementFactory, connect, create, popupMenu, canvas, rules, translate) {\n  config = config || {};\n  boundaryEventAppender.registerProvider(this);\n  this._boundaryEventAppender = boundaryEventAppender;\n  this._modeling = modeling;\n  this._elementFactory = elementFactory;\n  this._connect = connect;\n  this._create = create;\n  this._popupMenu = popupMenu;\n  this._canvas = canvas;\n  this._rules = rules;\n  this._translate = translate;\n  if (config.autoPlace !== false) {\n    this._autoPlace = injector.get('autoPlace', false);\n  }\n  eventBus.on('create.end', 250, function (event) {\n    var context = event.context,\n      shape = context.shape;\n    if (!(0,diagram_js_lib_util_Mouse__WEBPACK_IMPORTED_MODULE_0__.hasPrimaryModifier)(event) || !boundaryEventAppender.isShown(shape)) {\n      return;\n    }\n  });\n}\nBoundaryEventAppenderProvider.$inject = ['config.boundaryEventAppender', 'injector', 'eventBus', 'boundaryEventAppender', 'modeling', 'elementFactory', 'connect', 'create', 'popupMenu', 'canvas', 'rules', 'translate'];\nfunction isAppendAllowed(element) {\n  var businessObject = element.businessObject;\n\n  // TODO only on task types + subprocesses\n\n  return element.type !== 'label' & (0,bpmn_js_lib_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__.is)(businessObject, 'bpmn:FlowNode') && !(0,bpmn_js_lib_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__.is)(businessObject, 'bpmn:Event') && !(0,bpmn_js_lib_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__.is)(businessObject, 'bpmn:Gateway') && !businessObject.isForCompensation && !(0,bpmn_js_lib_util_DiUtil__WEBPACK_IMPORTED_MODULE_2__.isEventSubProcess)(businessObject);\n}\n;\n\n/**\n* @param {Element} element\n*\n* @return {BoundaryEventAppenderAction}\n*/\nBoundaryEventAppenderProvider.prototype.getBoundaryEventAppenderClickAction = function (element) {\n  var boundaryEventAppender = this._boundaryEventAppender,\n    modeling = this._modeling,\n    elementFactory = this._elementFactory,\n    connect = this._connect,\n    create = this._create,\n    popupMenu = this._popupMenu,\n    rules = this._rules,\n    autoPlace = this._autoPlace,\n    translate = this._translate;\n  if (!isAppendAllowed(element)) return null;\n  var task = 'bpmn:BoundaryEvent';\n  var options = {};\n  function appendStart(event, element) {\n    var shape = elementFactory.createShape((0,min_dash__WEBPACK_IMPORTED_MODULE_3__.assign)({\n      type: task\n    }, options));\n    create.start(event, shape, {\n      source: element\n    });\n  }\n\n  // TODO custom autoplace to append the event on the element \n\n  /*\n  var append = autoPlace ? function(event, element) {\n    var shape = elementFactory.createShape(assign({ type: task }, options));\n     if (element.attachers.length) {\n      create.start(event, shape, {\n        source: element\n      });\n      return;\n    }\n   \n    var position = {\n      x: element.x + element.width,\n      y: element.y + element.height\n    };\n     var createdShape = modeling.createShape(shape, position, element, { attach: true });\n     //autoPlace.append(element, shape);\n  } : appendStart;\n  */\n\n  return appendStart;\n};\n\n/**\n* @param {Element} element\n*\n* @return {BoundaryEventAppenderAction}\n*/\nBoundaryEventAppenderProvider.prototype.getBoundaryEventAppenderDragAction = function (element) {\n  var boundaryEventAppender = this._boundaryEventAppender,\n    modeling = this._modeling,\n    elementFactory = this._elementFactory,\n    connect = this._connect,\n    create = this._create,\n    popupMenu = this._popupMenu,\n    rules = this._rules,\n    autoPlace = this._autoPlace,\n    translate = this._translate;\n  if (!isAppendAllowed(element)) return null;\n  var task = 'bpmn:BoundaryEvent';\n  var options = {};\n  return function (event, element) {\n    var shape = elementFactory.createShape((0,min_dash__WEBPACK_IMPORTED_MODULE_3__.assign)({\n      type: task\n    }, options));\n    create.start(event, shape, {\n      source: element\n    });\n  };\n};\n\n/**\n * Calculates the position for the append menu relatively to the element.\n * The menu should pop up directly behind the mouse cursor\n *\n * @param {djs.model.Base} element\n * @returns {Object}\n */\nBoundaryEventAppenderProvider.prototype._getAppendMenuPosition = function (element) {\n  const boundaryEventAppender = this._boundaryEventAppender;\n  const popupMenu = this._popupMenu;\n  const X_OFFSET = 20;\n  const Y_OFFSET = 90;\n  const POPUP_HEIGHT = 360;\n\n  // TODO get height from popup after creation or make configurable\n\n  const node = boundaryEventAppender.getNode(element).html;\n  const nodeRect = node.getBoundingClientRect();\n  const pos = {\n    x: nodeRect.left - X_OFFSET,\n    y: nodeRect.top + POPUP_HEIGHT - Y_OFFSET\n  };\n  return pos;\n};\n\n// helpers /////////\n\n/**\n * @param {ModdleElement} businessObject\n * @param {string} type\n * @param {string} eventDefinitionType\n *\n * @return {boolean}\n */\nfunction isEventType(businessObject, type, eventDefinitionType) {\n  var isType = businessObject.$instanceOf(type);\n  var isDefinition = false;\n  var definitions = businessObject.eventDefinitions || [];\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_3__.forEach)(definitions, function (def) {\n    if (def.$type === eventDefinitionType) {\n      isDefinition = true;\n    }\n  });\n  return isType && isDefinition;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/BoundaryEventAppenderProvider.js\n");

/***/ }),

/***/ "./src/features/Connect.js":
/*!*********************************!*\
  !*** ./src/features/Connect.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Connect),\n/* harmony export */   isReverse: () => (/* binding */ isReverse)\n/* harmony export */ });\n/* harmony import */ var diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! diagram-js/lib/layout/LayoutUtil */ \"./node_modules/diagram-js/lib/layout/LayoutUtil.js\");\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n\n\n\n/**\n * @typedef {import('../../model/Types').Element} Element\n *\n * @typedef {import('../../util/Types').Point} Point\n *\n * @typedef {import('../dragging/Dragging').default} Dragging\n * @typedef {import('../../core/EventBus').default} EventBus\n * @typedef {import('../modeling/Modeling').default} Modeling\n * @typedef {import('../modeling/ElementFactory').default} ElementFactory\n * @typedef {import('../rules/Rules').default} Rules\n */\n\n/**\n * @param {EventBus} eventBus\n * @param {Dragging} dragging\n * @param {Modeling} modeling\n * @param {Rules} rules\n * @param {ElementFactory} elementFactory\n */\nfunction Connect(eventBus, dragging, modeling, rules, elementFactory) {\n  // rules\n\n  var UNALLOWED_APPEND_SOURCES = ['bpmn:Participant', 'bpmn:DataObjectReference', 'bpmn:DataStoreReference', 'bpmn:EndEvent'];\n  function isAppendTargetValid(source, target) {\n    return !UNALLOWED_APPEND_SOURCES.includes(source.type) && (!target || target.type === 'bpmn:Process' || target.constructor.name === 'RootImpl' || !target.parent || target.type === 'bpmn:Participant' && source?.parent?.id === target.id);\n  }\n  function canConnect(source, target) {\n    return rules.allowed('connection.create', {\n      source: source,\n      target: target\n    });\n  }\n  function canConnectReverse(source, target) {\n    return canConnect(target, source);\n  }\n\n  // event handlers\n\n  eventBus.on('connect.hover', function (event) {\n    var context = event.context,\n      start = context.start,\n      hover = event.hover,\n      canExecute,\n      canAppend;\n\n    // cache hover state\n    context.hover = hover;\n    canExecute = context.canExecute = canConnect(start, hover);\n    canAppend = context.canAppend = isAppendTargetValid(start, hover);\n\n    // ignore hover\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNil)(canExecute)) {\n      return;\n    }\n    if (canExecute !== false) {\n      context.source = start;\n      context.target = hover;\n      return;\n    }\n    canExecute = context.canExecute = canConnectReverse(start, hover);\n\n    // ignore hover\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNil)(canExecute)) {\n      return;\n    }\n    if (canExecute !== false) {\n      context.source = hover;\n      context.target = start;\n    }\n  });\n  eventBus.on(['connect.out', 'connect.cleanup'], function (event) {\n    var context = event.context;\n    context.hover = null;\n    context.source = null;\n    context.target = null;\n    context.canExecute = false;\n    context.canAppend = false;\n  });\n  eventBus.on('connect.end', function (event) {\n    var context = event.context,\n      canExecute = context.canExecute,\n      canAppend = context.canAppend,\n      connectionStart = context.connectionStart,\n      connectionEnd = {\n        x: event.x,\n        y: event.y\n      },\n      source = context.source,\n      target = context.target;\n\n    // TODO exclude case where connect is forbidden\n    console.log(context);\n    if (canAppend) {\n      var shape = elementFactory.createShape((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.assign)({\n        type: 'bpmn:Task'\n      }, {}));\n      var createdShape = modeling.createShape(shape, connectionEnd, context.start.parent, {\n        attach: false\n      });\n      target = createdShape;\n      canExecute = context.canExecute = canConnect(context.start, target);\n    }\n    if (!canExecute) {\n      return false;\n    }\n    var attrs = null,\n      hints = {\n        connectionStart: isReverse(context) ? connectionEnd : connectionStart,\n        connectionEnd: isReverse(context) ? connectionStart : connectionEnd\n      };\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(canExecute)) {\n      attrs = canExecute;\n    }\n    context.connection = modeling.connect(context.start, target, attrs, hints);\n  });\n\n  // API\n\n  /**\n   * Start connect operation.\n   *\n   * @param {MouseEvent|TouchEvent} event\n   * @param {Element} start\n   * @param {Point} [connectionStart]\n   * @param {boolean} [autoActivate=false]\n   */\n  this.start = function (event, start, connectionStart, autoActivate) {\n    if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(connectionStart)) {\n      autoActivate = connectionStart;\n      connectionStart = (0,diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_1__.getMid)(start);\n    }\n    dragging.init(event, 'connect', {\n      autoActivate: autoActivate,\n      data: {\n        shape: start,\n        context: {\n          start: start,\n          connectionStart: connectionStart\n        }\n      }\n    });\n  };\n}\nConnect.$inject = ['eventBus', 'dragging', 'modeling', 'rules', 'elementFactory'];\n\n// helpers //////////\n\nfunction isReverse(context) {\n  var hover = context.hover,\n    source = context.source,\n    target = context.target;\n  return hover && source && hover === source && source !== target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/Connect.js\n");

/***/ }),

/***/ "./src/features/ContextPad.js":
/*!************************************!*\
  !*** ./src/features/ContextPad.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ContextPad)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var min_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! min-dom */ \"./node_modules/min-dom/dist/index.esm.js\");\n/* harmony import */ var diagram_js_lib_util_Elements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! diagram-js/lib/util/Elements */ \"./node_modules/diagram-js/lib/util/Elements.js\");\n/* harmony import */ var diagram_js_lib_util_EscapeUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! diagram-js/lib/util/EscapeUtil */ \"./node_modules/diagram-js/lib/util/EscapeUtil.js\");\n\n\n\n\n\n/**\n * @typedef {import('../../model/Types').Element} Element\n *\n * @typedef {import('../../util/Types').Rect} Rect\n *\n * @typedef {import('../../core/Canvas').default} Canvas\n * @typedef {import('../../core/EventBus').default} EventBus\n * @typedef {import('../overlays/Overlays').default} Overlays\n *\n * @typedef {import('../overlays/Overlays').Overlay} Overlay\n *\n * @typedef {import('./ContextPadProvider').default} ContextPadProvider\n * @typedef {import('./ContextPadProvider').ContextPadEntries} ContextPadEntries\n *\n * @typedef { {\n *   scale?: {\n *     min?: number;\n *     max?: number;\n *   };\n * } } ContextPadConfig\n */\n\n/**\n * @template {Element} [ElementType=Element]\n *\n * @typedef {ElementType|ElementType[]} ContextPadTarget\n */\n\nvar entrySelector = '.entry';\nvar DEFAULT_PRIORITY = 1000;\nvar CONTEXT_PAD_PADDING = 12;\n\n/**\n * A context pad that displays element specific, contextual actions next\n * to a diagram element.\n *\n * @param {Canvas} canvas\n * @param {ContextPadConfig} config\n * @param {EventBus} eventBus\n * @param {Overlays} overlays\n */\nfunction ContextPad(canvas, config, eventBus, overlays) {\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._overlays = overlays;\n  var scale = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isDefined)(config && config.scale) ? config.scale : {\n    min: 1,\n    max: 1.5\n  };\n  this._overlaysConfig = {\n    scale: scale\n  };\n  this._current = null;\n  this._init();\n}\nContextPad.$inject = ['canvas', 'config.contextPad', 'eventBus', 'overlays'];\n\n/**\n * Registers events needed for interaction with other components.\n */\nContextPad.prototype._init = function () {\n  var self = this;\n  this._eventBus.on('selection.changed', function (event) {\n    var selection = event.newSelection;\n    var target = selection.length ? selection.length === 1 ? selection[0] : selection : null;\n    if (target) {\n      self.open(target, true);\n    } else {\n      self.close();\n    }\n  });\n  this._eventBus.on('elements.changed', function (event) {\n    var elements = event.elements,\n      current = self._current;\n    if (!current) {\n      return;\n    }\n    var currentTarget = current.target;\n    var currentChanged = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.some)((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(currentTarget) ? currentTarget : [currentTarget], function (element) {\n      return includes(elements, element);\n    });\n\n    // re-open if elements in current selection changed\n    if (currentChanged) {\n      self.open(currentTarget, true);\n    }\n  });\n};\n\n/**\n * @overlord\n *\n * Register a context pad provider with the default priority. See\n * {@link ContextPadProvider} for examples.\n *\n * @param {ContextPadProvider} provider\n */\n\n/**\n * Register a context pad provider with the given priority. See\n * {@link ContextPadProvider} for examples.\n *\n * @param {number} priority\n * @param {ContextPadProvider} provider\n */\nContextPad.prototype.registerProvider = function (priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on('contextPad.getProviders', priority, function (event) {\n    event.providers.push(provider);\n  });\n};\n\n/**\n * Get context pad entries for given elements.\n *\n * @param {ContextPadTarget} target\n *\n * @return {ContextPadEntries} list of entries\n */\nContextPad.prototype.getEntries = function (target) {\n  var providers = this._getProviders();\n  var provideFn = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) ? 'getMultiElementContextPadEntries' : 'getContextPadEntries';\n  var entries = {};\n\n  // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(providers, function (provider) {\n    if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(provider[provideFn])) {\n      return;\n    }\n    var entriesOrUpdater = provider[provideFn](target);\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entriesOrUpdater)) {\n      entries = entriesOrUpdater(entries);\n    } else {\n      (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(entriesOrUpdater, function (entry, id) {\n        entries[id] = entry;\n      });\n    }\n  });\n  return entries;\n};\n\n/**\n * Trigger context pad via DOM event.\n *\n * The entry to trigger is determined by the target element.\n *\n * @param {string} action\n * @param {Event} event\n * @param {boolean} [autoActivate=false]\n */\nContextPad.prototype.trigger = function (action, event, autoActivate) {\n  var entry,\n    originalEvent,\n    button = event.delegateTarget || event.target;\n  if (!button) {\n    return event.preventDefault();\n  }\n  entry = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.attr)(button, 'data-action');\n  originalEvent = event.originalEvent || event;\n  return this.triggerEntry(entry, action, originalEvent, autoActivate);\n};\n\n/**\n * Trigger context pad entry.\n *\n * @param {string} entryId\n * @param {string} action\n * @param {Event} event\n * @param {boolean} [autoActivate=false]\n */\nContextPad.prototype.triggerEntry = function (entryId, action, event, autoActivate) {\n  if (!this.isShown()) {\n    return;\n  }\n  var target = this._current.target,\n    entries = this._current.entries;\n  var entry = entries[entryId];\n  if (!entry) {\n    return;\n  }\n  var handler = entry.action;\n  if (this._eventBus.fire('contextPad.trigger', {\n    entry,\n    event\n  }) === false) {\n    return;\n  }\n\n  // simple action (via callback function)\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isFunction)(handler)) {\n    if (action === 'click') {\n      return handler(event, target, autoActivate);\n    }\n  } else {\n    if (handler[action]) {\n      return handler[action](event, target, autoActivate);\n    }\n  }\n\n  // silence other actions\n  event.preventDefault();\n};\n\n/**\n * Open the context pad for given elements.\n *\n * @param {ContextPadTarget} target\n * @param {boolean} [force=false] - Force re-opening context pad.\n */\nContextPad.prototype.open = function (target, force) {\n  if (!force && this.isOpen(target)) {\n    return;\n  }\n  this.close();\n  this._updateAndOpen(target);\n};\nContextPad.prototype._getProviders = function () {\n  var event = this._eventBus.createEvent({\n    type: 'contextPad.getProviders',\n    providers: []\n  });\n  this._eventBus.fire(event);\n  return event.providers;\n};\n\n/**\n * @param {ContextPadTarget} target\n */\nContextPad.prototype._updateAndOpen = function (target) {\n  var entries = this.getEntries(target),\n    pad = this.getPad(target),\n    html = pad.html,\n    image;\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(entries, function (entry, id) {\n    var grouping = entry.group || 'default',\n      control = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.domify)(entry.html || '<div class=\"entry\" draggable=\"true\"></div>'),\n      container;\n    (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.attr)(control, 'data-action', id);\n    container = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.query)('[data-group=' + (0,diagram_js_lib_util_EscapeUtil__WEBPACK_IMPORTED_MODULE_2__.escapeCSS)(grouping) + ']', html);\n    if (!container) {\n      // add separator\n      if ((0,min_dom__WEBPACK_IMPORTED_MODULE_1__.query)('.group', html)) {\n        const separator = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.domify)('<div class=\"separator\"></div>');\n        html.appendChild(separator);\n      }\n      container = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.domify)('<div class=\"group\"></div>');\n      (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.attr)(container, 'data-group', grouping);\n      html.appendChild(container);\n    }\n    container.appendChild(control);\n    if (entry.className) {\n      addClasses(control, entry.className);\n    }\n    if (entry.title) {\n      (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.attr)(control, 'title', entry.title);\n    }\n    if (entry.imageUrl) {\n      image = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.domify)('<img>');\n      (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.attr)(image, 'src', entry.imageUrl);\n      image.style.width = '100%';\n      image.style.height = '100%';\n      control.appendChild(image);\n    }\n  });\n  (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.classes)(html).add('open');\n  this._current = {\n    target: target,\n    entries: entries,\n    pad: pad\n  };\n  this._eventBus.fire('contextPad.open', {\n    current: this._current\n  });\n};\n\n/**\n * @param {ContextPadTarget} target\n *\n * @return {Overlay}\n */\nContextPad.prototype.getPad = function (target) {\n  if (this.isOpen()) {\n    return this._current.pad;\n  }\n  var self = this;\n  var overlays = this._overlays;\n  var html = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.domify)('<div class=\"djs-context-pad\"></div>');\n  var position = this._getPosition(target);\n  var overlaysConfig = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.assign)({\n    html: html\n  }, this._overlaysConfig, position);\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.delegate.bind(html, entrySelector, 'click', function (event) {\n    self.trigger('click', event);\n  });\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.delegate.bind(html, entrySelector, 'dragstart', function (event) {\n    self.trigger('dragstart', event);\n  });\n\n  // stop propagation of mouse events\n  min_dom__WEBPACK_IMPORTED_MODULE_1__.event.bind(html, 'mousedown', function (event) {\n    event.stopPropagation();\n  });\n  var activeRootElement = this._canvas.getRootElement();\n  this._overlayId = overlays.add(activeRootElement, 'context-pad', overlaysConfig);\n  var pad = overlays.get(this._overlayId);\n  this._eventBus.fire('contextPad.create', {\n    target: target,\n    pad: pad\n  });\n  return pad;\n};\n\n/**\n * Close the context pad\n */\nContextPad.prototype.close = function () {\n  if (!this.isOpen()) {\n    return;\n  }\n  this._overlays.remove(this._overlayId);\n  this._overlayId = null;\n  this._eventBus.fire('contextPad.close', {\n    current: this._current\n  });\n  this._current = null;\n};\n\n/**\n * Check if pad is open.\n *\n * If target is provided, check if it is opened\n * for the given target (single or multiple elements).\n *\n * @param {ContextPadTarget} [target]\n * @return {boolean}\n */\nContextPad.prototype.isOpen = function (target) {\n  var current = this._current;\n  if (!current) {\n    return false;\n  }\n\n  // basic no-args is open check\n  if (!target) {\n    return true;\n  }\n  var currentTarget = current.target;\n\n  // strict handling of single vs. multi-selection\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) !== (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(currentTarget)) {\n    return false;\n  }\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {\n    return target.length === currentTarget.length && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.every)(target, function (element) {\n      return includes(currentTarget, element);\n    });\n  } else {\n    return currentTarget === target;\n  }\n};\n\n/**\n * Check if pad is open and not hidden.\n *\n * @return {boolean}\n */\nContextPad.prototype.isShown = function () {\n  return this.isOpen() && this._overlays.isShown();\n};\n\n/**\n * Get contex pad position.\n *\n * @param {ContextPadTarget} target\n *\n * @return {Rect}\n */\nContextPad.prototype._getPosition = function (target) {\n  var elements = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) ? target : [target];\n  var bBox = (0,diagram_js_lib_util_Elements__WEBPACK_IMPORTED_MODULE_3__.getBBox)(elements);\n\n  // TODO async repositioning after this._current.html is rendered\n\n  return {\n    position: {\n      left: bBox.x + bBox.width / 2,\n      top: bBox.y - 10\n    }\n  };\n};\n\n// helpers //////////\n\nfunction addClasses(element, classNames) {\n  var classes = (0,min_dom__WEBPACK_IMPORTED_MODULE_1__.classes)(element);\n  classNames = (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(classNames) ? classNames : classNames.split(/\\s+/g);\n  classNames.forEach(function (cls) {\n    classes.add(cls);\n  });\n}\n\n/**\n * @param {any[]} array\n * @param {any} item\n *\n * @return {boolean}\n */\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/ContextPad.js\n");

/***/ }),

/***/ "./src/features/ContextPadProvider.js":
/*!********************************************!*\
  !*** ./src/features/ContextPadProvider.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ContextPadProvider)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bpmn-js/lib/features/modeling/util/ModelingUtil */ \"../bpmn-io/bpmn-js/lib/util/ModelUtil.js\");\n/* harmony import */ var bpmn_js_lib_util_DiUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bpmn-js/lib/util/DiUtil */ \"../bpmn-io/bpmn-js/lib/util/DiUtil.js\");\n/* harmony import */ var bpmn_js_lib_features_modeling_util_LaneUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bpmn-js/lib/features/modeling/util/LaneUtil */ \"../bpmn-io/bpmn-js/lib/features/modeling/util/LaneUtil.js\");\n/* harmony import */ var diagram_js_lib_util_Mouse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! diagram-js/lib/util/Mouse */ \"./node_modules/diagram-js/lib/util/Mouse.js\");\n\n\n\n\n\n\n\n/**\n * @typedef {import('didi').Injector} Injector\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n * @typedef {import('diagram-js/lib/features/context-pad/ContextPad').default} ContextPad\n * @typedef {import('../modeling/Modeling').default} Modeling\n * @typedef {import('../modeling/ElementFactory').default} ElementFactory\n * @typedef {import('diagram-js/lib/features/connect/Connect').default} Connect\n * @typedef {import('diagram-js/lib/features/create/Create').default} Create\n * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').default} PopupMenu\n * @typedef {import('diagram-js/lib/features/canvas/Canvas').default} Canvas\n * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules\n * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate\n *\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').ModdleElement} ModdleElement\n *\n * @typedef {import('diagram-js/lib/features/context-pad/ContextPadProvider').default<Element>} BaseContextPadProvider\n * @typedef {import('diagram-js/lib/features/context-pad/ContextPadProvider').ContextPadEntries} ContextPadEntries\n * @typedef {import('diagram-js/lib/features/context-pad/ContextPadProvider').ContextPadEntry} ContextPadEntry\n *\n * @typedef { { autoPlace?: boolean; } } ContextPadConfig\n */\n\n/**\n * BPMN-specific context pad provider.\n *\n * @implements {BaseContextPadProvider}\n *\n * @param {ContextPadConfig} config\n * @param {Injector} injector\n * @param {EventBus} eventBus\n * @param {ContextPad} contextPad\n * @param {Modeling} modeling\n * @param {ElementFactory} elementFactory\n * @param {Connect} connect\n * @param {Create} create\n * @param {PopupMenu} popupMenu\n * @param {Canvas} canvas\n * @param {Rules} rules\n * @param {Translate} translate\n */\nfunction ContextPadProvider(config, injector, eventBus, contextPad, modeling, elementFactory, connect, create, popupMenu, canvas, rules, translate) {\n  config = config || {};\n  contextPad.registerProvider(this);\n  this._contextPad = contextPad;\n  this._modeling = modeling;\n  this._elementFactory = elementFactory;\n  this._connect = connect;\n  this._create = create;\n  this._popupMenu = popupMenu;\n  this._canvas = canvas;\n  this._rules = rules;\n  this._translate = translate;\n  if (config.autoPlace !== false) {\n    this._autoPlace = injector.get('autoPlace', false);\n  }\n  eventBus.on('create.end', 250, function (event) {\n    var context = event.context,\n      shape = context.shape;\n    if (!(0,diagram_js_lib_util_Mouse__WEBPACK_IMPORTED_MODULE_0__.hasPrimaryModifier)(event) || !contextPad.isOpen(shape)) {\n      return;\n    }\n    var entries = contextPad.getEntries(shape);\n    if (entries.replace) {\n      entries.replace.action.click(event, shape);\n    }\n  });\n}\nContextPadProvider.$inject = ['config.contextPad', 'injector', 'eventBus', 'contextPad', 'modeling', 'elementFactory', 'connect', 'create', 'popupMenu', 'canvas', 'rules', 'translate'];\n\n/**\n * @param {Element[]} elements\n *\n * @return {ContextPadEntries}\n */\nContextPadProvider.prototype.getMultiElementContextPadEntries = function (elements) {\n  var modeling = this._modeling;\n  var actions = {};\n  if (this._isDeleteAllowed(elements)) {\n    (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n      'delete': {\n        group: 'edit',\n        html: `<div class=\"entry\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"16\" height=\"16\" fill=\"white\" style=\"mix-blend-mode:multiply\"/>\n            <path d=\"M7 6H6V12H7V6Z\" fill=\"currentColor\"/>\n            <path d=\"M10 6H9V12H10V6Z\" fill=\"currentColor\"/>\n            <path d=\"M2 3V4H3V14C3 14.2652 3.10536 14.5196 3.29289 14.7071C3.48043 14.8946 3.73478 15 4 15H12C12.2652 15 12.5196 14.8946 12.7071 14.7071C12.8946 14.5196 13 14.2652 13 14V4H14V3H2ZM4 14V4H12V14H4Z\" fill=\"currentColor\"/>\n            <path d=\"M10 1H6V2H10V1Z\" fill=\"currentColor\"/>\n          </svg>\n        </div>`,\n        title: this._translate('Remove'),\n        action: {\n          click: function (event, elements) {\n            modeling.removeElements(elements.slice());\n          }\n        }\n      }\n    });\n  }\n  return actions;\n};\n\n/**\n * @param {Element[]} elements\n *\n * @return {boolean}\n */\nContextPadProvider.prototype._isDeleteAllowed = function (elements) {\n  var baseAllowed = this._rules.allowed('elements.delete', {\n    elements: elements\n  });\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_1__.isArray)(baseAllowed)) {\n    return (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.every)(baseAllowed, function (element) {\n      return includes(baseAllowed, element);\n    });\n  }\n  return baseAllowed;\n};\n\n/**\n * @param {Element} element\n *\n * @return {ContextPadEntries}\n */\nContextPadProvider.prototype.getContextPadEntries = function (element) {\n  var contextPad = this._contextPad,\n    modeling = this._modeling,\n    elementFactory = this._elementFactory,\n    connect = this._connect,\n    create = this._create,\n    popupMenu = this._popupMenu,\n    rules = this._rules,\n    autoPlace = this._autoPlace,\n    translate = this._translate;\n  var actions = {};\n  if (element.type === 'label') {\n    return actions;\n  }\n  var businessObject = element.businessObject;\n  function startConnect(event, element) {\n    connect.start(event, element);\n  }\n  function removeElement(e, element) {\n    modeling.removeElements([element]);\n  }\n  function getReplaceMenuPosition(element) {\n    var Y_OFFSET = 5;\n    var pad = contextPad.getPad(element).html;\n    var padRect = pad.getBoundingClientRect();\n    var pos = {\n      x: padRect.left,\n      y: padRect.bottom + Y_OFFSET\n    };\n    return pos;\n  }\n\n  /**\n   * Create an append action.\n   *\n   * @param {string} type\n   * @param {string} className\n   * @param {string} [title]\n   * @param {Object} [options]\n   *\n   * @return {ContextPadEntry}\n   */\n  function appendAction(type, className, title, options) {\n    if (typeof title !== 'string') {\n      options = title;\n      title = translate('Append {type}', {\n        type: type.replace(/^bpmn:/, '')\n      });\n    }\n    function appendStart(event, element) {\n      var shape = elementFactory.createShape((0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)({\n        type: type\n      }, options));\n      create.start(event, shape, {\n        source: element\n      });\n    }\n    var append = autoPlace ? function (event, element) {\n      var shape = elementFactory.createShape((0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)({\n        type: type\n      }, options));\n      autoPlace.append(element, shape);\n    } : appendStart;\n    return {\n      group: 'model',\n      className: className,\n      title: title,\n      action: {\n        dragstart: appendStart,\n        click: append\n      }\n    };\n  }\n  function splitLaneHandler(count) {\n    return function (_, element) {\n      // actual split\n      modeling.splitLane(element, count);\n\n      // refresh context pad after split to\n      // get rid of split icons\n      contextPad.open(element, true);\n    };\n  }\n  if (!popupMenu.isEmpty(element, 'bpmn-replace')) {\n    // Replace menu entry\n    (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n      'replace': {\n        group: 'edit',\n        html: `<div class=\"entry\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 17 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <mask id=\"myMask\">\n              <rect x=\"0\" y=\"0\" width=\"17\" height=\"17\" fill=\"white\" stroke=\"white\" />\n              <rect x=\"5.5\" y=\"6.5\" width=\"11\" height=\"9\" rx=\"2.5\" fill=\"black\" stroke=\"black\" />\n            </mask>\n            <rect x=\"0.5\" y=\"1.5\" width=\"10\" height=\"10\" rx=\"5\" fill=\"transparent\" stroke=\"currentColor\" mask=\"url(#myMask)\" />\n            <rect x=\"5.5\" y=\"6.5\" width=\"11\" height=\"9\" rx=\"2.5\" fill=\"transparent\" stroke=\"currentColor\" />\n          </svg>\n        </div>`,\n        title: translate('Change type'),\n        action: {\n          click: function (event, element) {\n            var position = (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(getReplaceMenuPosition(element), {\n              cursor: {\n                x: event.x,\n                y: event.y\n              }\n            });\n            popupMenu.open(element, 'bpmn-replace', position, {\n              title: translate('Foobar'),\n              width: 300,\n              search: true\n            });\n          }\n        }\n      }\n    });\n  }\n  if ((0,bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__.isAny)(businessObject, ['bpmn:Lane', 'bpmn:Participant']) && (0,bpmn_js_lib_util_DiUtil__WEBPACK_IMPORTED_MODULE_3__.isExpanded)(element)) {\n    var childLanes = (0,bpmn_js_lib_features_modeling_util_LaneUtil__WEBPACK_IMPORTED_MODULE_4__.getChildLanes)(element);\n    if (childLanes.length < 2) {\n      if (element.height >= 120) {\n        (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n          'lane-divide-two': {\n            group: 'lane-divide',\n            className: 'bpmn-icon-lane-divide-two',\n            title: translate('Divide into two Lanes'),\n            action: {\n              click: splitLaneHandler(2)\n            }\n          }\n        });\n      }\n      if (element.height >= 180) {\n        (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n          'lane-divide-three': {\n            group: 'lane-divide',\n            className: 'bpmn-icon-lane-divide-three',\n            title: translate('Divide into three Lanes'),\n            action: {\n              click: splitLaneHandler(3)\n            }\n          }\n        });\n      }\n    }\n    (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n      'lane-insert-below': {\n        group: 'lane-insert-below',\n        className: 'bpmn-icon-lane-insert-below',\n        title: translate('Add Lane below'),\n        action: {\n          click: function (event, element) {\n            modeling.addLane(element, 'bottom');\n          }\n        }\n      }\n    });\n  }\n  if ((0,bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__.is)(businessObject, 'bpmn:FlowNode')) {\n    if ((0,bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__.is)(businessObject, 'bpmn:EventBasedGateway')) {\n      (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n        'append.receive-task': appendAction('bpmn:ReceiveTask', 'bpmn-icon-receive-task', translate('Append ReceiveTask')),\n        'append.message-intermediate-event': appendAction('bpmn:IntermediateCatchEvent', 'bpmn-icon-intermediate-event-catch-message', translate('Append MessageIntermediateCatchEvent'), {\n          eventDefinitionType: 'bpmn:MessageEventDefinition'\n        }),\n        'append.timer-intermediate-event': appendAction('bpmn:IntermediateCatchEvent', 'bpmn-icon-intermediate-event-catch-timer', translate('Append TimerIntermediateCatchEvent'), {\n          eventDefinitionType: 'bpmn:TimerEventDefinition'\n        }),\n        'append.condition-intermediate-event': appendAction('bpmn:IntermediateCatchEvent', 'bpmn-icon-intermediate-event-catch-condition', translate('Append ConditionIntermediateCatchEvent'), {\n          eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n        }),\n        'append.signal-intermediate-event': appendAction('bpmn:IntermediateCatchEvent', 'bpmn-icon-intermediate-event-catch-signal', translate('Append SignalIntermediateCatchEvent'), {\n          eventDefinitionType: 'bpmn:SignalEventDefinition'\n        })\n      });\n    } else if (isEventType(businessObject, 'bpmn:BoundaryEvent', 'bpmn:CompensateEventDefinition')) {\n      (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n        'append.compensation-activity': appendAction('bpmn:Task', 'bpmn-icon-task', translate('Append compensation activity'), {\n          isForCompensation: true\n        })\n      });\n    } else if (!(0,bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__.is)(businessObject, 'bpmn:EndEvent') && !businessObject.isForCompensation && !isEventType(businessObject, 'bpmn:IntermediateThrowEvent', 'bpmn:LinkEventDefinition') && !(0,bpmn_js_lib_util_DiUtil__WEBPACK_IMPORTED_MODULE_3__.isEventSubProcess)(businessObject)) {\n      (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n        /*\n        'append.end-event': appendAction(\n          'bpmn:EndEvent',\n          'bpmn-icon-end-event-none',\n          translate('Append EndEvent')\n        ),\n        'append.gateway': appendAction(\n          'bpmn:ExclusiveGateway',\n          'bpmn-icon-gateway-none',\n          translate('Append Gateway')\n        ),\n        'append.append-task': appendAction(\n          'bpmn:Task',\n          'bpmn-icon-task',\n          translate('Append Task')\n        ),\n        'append.intermediate-event': appendAction(\n          'bpmn:IntermediateThrowEvent',\n          'bpmn-icon-intermediate-event-none',\n          translate('Append Intermediate/Boundary Event')\n        )\n        */\n      });\n    }\n  }\n  if ((0,bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__.is)(businessObject, 'bpmn:SequenceFlow')) {\n    (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n      'append.text-annotation': appendAction('bpmn:TextAnnotation', 'bpmn-icon-text-annotation', translate('Append TextAnnotation'))\n    });\n  }\n  if ((0,bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__.isAny)(businessObject, ['bpmn:FlowNode', 'bpmn:InteractionNode', 'bpmn:DataObjectReference', 'bpmn:DataStoreReference'])) {\n    (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n      'append.text-annotation': appendAction('bpmn:TextAnnotation', 'bpmn-icon-text-annotation', translate('Append TextAnnotation')),\n      'connect': {\n        group: 'connect',\n        html: `<div class=\"entry\">\n          <svg width=\"25\" height=\"24\" viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"24\" height=\"24\" transform=\"translate(0.948242)\" fill=\"transparent\" style=\"mix-blend-mode:multiply\"/>\n            <path d=\"M8.44824 4.5V6H17.8907L5.44824 18.4425L6.50574 19.5L18.9482 7.0575V16.5H20.4482V4.5H8.44824Z\" fill=\"currentColor\"/>\n          </svg>\n        </div>`,\n        title: translate('Connect using ' + (businessObject.isForCompensation ? '' : 'Sequence/MessageFlow or ') + 'Association'),\n        action: {\n          click: startConnect,\n          dragstart: startConnect\n        }\n      }\n    });\n  }\n  if ((0,bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__.is)(businessObject, 'bpmn:TextAnnotation')) {\n    (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n      'connect': {\n        group: 'connect',\n        html: `<div class=\"entry\">\n        <svg width=\"25\" height=\"24\" viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"24\" height=\"24\" transform=\"translate(0.948242)\" fill=\"transparent\" style=\"mix-blend-mode:multiply\"/>\n          <path d=\"M8.44824 4.5V6H17.8907L5.44824 18.4425L6.50574 19.5L18.9482 7.0575V16.5H20.4482V4.5H8.44824Z\" fill=\"currentColor\"/>\n        </svg>\n      </div>`,\n        title: translate('Connect using Association'),\n        action: {\n          click: startConnect,\n          dragstart: startConnect\n        }\n      }\n    });\n  }\n  if ((0,bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__.isAny)(businessObject, ['bpmn:DataObjectReference', 'bpmn:DataStoreReference'])) {\n    (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n      'connect': {\n        group: 'connect',\n        html: `<div class=\"entry\">\n        <svg width=\"25\" height=\"24\" viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"24\" height=\"24\" transform=\"translate(0.948242)\" fill=\"transparent\" style=\"mix-blend-mode:multiply\"/>\n          <path d=\"M8.44824 4.5V6H17.8907L5.44824 18.4425L6.50574 19.5L18.9482 7.0575V16.5H20.4482V4.5H8.44824Z\" fill=\"currentColor\"/>\n        </svg>\n      </div>`,\n        title: translate('Connect using DataInputAssociation'),\n        action: {\n          click: startConnect,\n          dragstart: startConnect\n        }\n      }\n    });\n  }\n  if ((0,bpmn_js_lib_features_modeling_util_ModelingUtil__WEBPACK_IMPORTED_MODULE_2__.is)(businessObject, 'bpmn:Group')) {\n    (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n      'append.text-annotation': appendAction('bpmn:TextAnnotation', 'bpmn-icon-text-annotation', translate('Append TextAnnotation'))\n    });\n  }\n\n  // delete element entry, only show if allowed by rules\n  var deleteAllowed = rules.allowed('elements.delete', {\n    elements: [element]\n  });\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_1__.isArray)(deleteAllowed)) {\n    // was the element returned as a deletion candidate?\n    deleteAllowed = deleteAllowed[0] === element;\n  }\n  if (deleteAllowed) {\n    (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.assign)(actions, {\n      'delete': {\n        group: 'delete',\n        html: `<div class=\"entry\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"16\" height=\"16\" fill=\"white\" style=\"mix-blend-mode:multiply\"/>\n            <path d=\"M7 6H6V12H7V6Z\" fill=\"currentColor\"/>\n            <path d=\"M10 6H9V12H10V6Z\" fill=\"currentColor\"/>\n            <path d=\"M2 3V4H3V14C3 14.2652 3.10536 14.5196 3.29289 14.7071C3.48043 14.8946 3.73478 15 4 15H12C12.2652 15 12.5196 14.8946 12.7071 14.7071C12.8946 14.5196 13 14.2652 13 14V4H14V3H2ZM4 14V4H12V14H4Z\" fill=\"currentColor\"/>\n            <path d=\"M10 1H6V2H10V1Z\" fill=\"currentColor\"/>\n          </svg>\n        </div>`,\n        title: translate('Remove'),\n        action: {\n          click: removeElement\n        }\n      }\n    });\n  }\n  return actions;\n};\n\n// helpers /////////\n\n/**\n * @param {ModdleElement} businessObject\n * @param {string} type\n * @param {string} eventDefinitionType\n *\n * @return {boolean}\n */\nfunction isEventType(businessObject, type, eventDefinitionType) {\n  var isType = businessObject.$instanceOf(type);\n  var isDefinition = false;\n  var definitions = businessObject.eventDefinitions || [];\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.forEach)(definitions, function (def) {\n    if (def.$type === eventDefinitionType) {\n      isDefinition = true;\n    }\n  });\n  return isType && isDefinition;\n}\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/ContextPadProvider.js\n");

/***/ }),

/***/ "./src/features/CustomAppendMenuProvider.js":
/*!**************************************************!*\
  !*** ./src/features/CustomAppendMenuProvider.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CustomAppendMenuProvider)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var _util_CreateOptionsUtil__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/CreateOptionsUtil */ \"./src/features/util/CreateOptionsUtil.js\");\n\n\n\n/**\n * This module is an append menu provider for the popup menu.\n */\nfunction CustomAppendMenuProvider(elementFactory, popupMenu, create, autoPlace, rules, mouse, translate) {\n  this._elementFactory = elementFactory;\n  this._popupMenu = popupMenu;\n  this._create = create;\n  this._autoPlace = autoPlace;\n  this._rules = rules;\n  this._create = create;\n  this._mouse = mouse;\n  this._translate = translate;\n  this.register();\n}\nCustomAppendMenuProvider.$inject = ['elementFactory', 'popupMenu', 'create', 'autoPlace', 'rules', 'mouse', 'translate'];\n\n/**\n * Register append menu provider in the popup menu\n */\nCustomAppendMenuProvider.prototype.register = function () {\n  this._popupMenu.registerProvider('bpmn-append', this);\n};\n\n/**\n * Gets the append options for the given element as menu entries\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\nCustomAppendMenuProvider.prototype.getPopupMenuEntries = function (element) {\n  const rules = this._rules;\n  const translate = this._translate;\n  const entries = {};\n  if (!rules.allowed('shape.append', {\n    element: element\n  })) {\n    return [];\n  }\n\n  // filter out elements with no incoming connections\n  const appendOptions = this._filterEntries(_util_CreateOptionsUtil__WEBPACK_IMPORTED_MODULE_0__.CREATE_OPTIONS);\n\n  // map options to menu entries\n  appendOptions.forEach(option => {\n    const {\n      actionName,\n      className,\n      label,\n      target,\n      description,\n      group,\n      search,\n      rank\n    } = option;\n    entries[`append-${actionName}`] = {\n      label: label && translate(label),\n      className,\n      description,\n      group: group && {\n        ...group,\n        name: translate(group.name)\n      },\n      search,\n      rank,\n      action: this._createEntryAction(element, target)\n    };\n  });\n  return entries;\n};\n\n/**\n * Filter out entries from the options.\n *\n * @param {Array<Object>} entries\n *\n * @return {Array<Object>} filtered entries\n */\nCustomAppendMenuProvider.prototype._filterEntries = function (entries) {\n  return entries.filter(option => {\n    const target = option.target;\n    const {\n      type,\n      eventDefinitionType\n    } = target;\n    if (['bpmn:StartEvent', 'bpmn:Participant'].includes(type)) {\n      return false;\n    }\n    if (type === 'bpmn:BoundaryEvent' && (0,min_dash__WEBPACK_IMPORTED_MODULE_1__.isUndefined)(eventDefinitionType)) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/**\n * Create an action for a given target.\n *\n * @param {djs.model.Base} element\n * @param {Object} target\n *\n * @return {Object}\n */\nCustomAppendMenuProvider.prototype._createEntryAction = function (element, target) {\n  const elementFactory = this._elementFactory;\n  const autoPlace = this._autoPlace;\n  const create = this._create;\n  const mouse = this._mouse;\n  const autoPlaceElement = () => {\n    const newElement = elementFactory.create('shape', target);\n    autoPlace.append(element, newElement);\n  };\n  const manualPlaceElement = event => {\n    const newElement = elementFactory.create('shape', target);\n    if (event instanceof KeyboardEvent) {\n      event = mouse.getLastMoveEvent();\n    }\n    return create.start(event, newElement, {\n      source: element\n    });\n  };\n  return {\n    click: this._canAutoPlaceElement(target) ? autoPlaceElement : manualPlaceElement,\n    dragstart: manualPlaceElement\n  };\n};\n\n/**\n * Check if the element should be auto placed.\n *\n * @param {Object} target\n *\n * @return {Boolean}\n */\nCustomAppendMenuProvider.prototype._canAutoPlaceElement = target => {\n  const {\n    type\n  } = target;\n  if (type === 'bpmn:BoundaryEvent') {\n    return false;\n  }\n  if (type === 'bpmn:SubProcess' && target.triggeredByEvent) {\n    return false;\n  }\n  if (type === 'bpmn:IntermediateCatchEvent' && target.eventDefinitionType === 'bpmn:LinkEventDefinition') {\n    return false;\n  }\n  return true;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/CustomAppendMenuProvider.js\n");

/***/ }),

/***/ "./src/features/index.js":
/*!*******************************!*\
  !*** ./src/features/index.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AppendNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AppendNode */ \"./src/features/AppendNode.js\");\n/* harmony import */ var _AppendNodeProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AppendNodeProvider */ \"./src/features/AppendNodeProvider.js\");\n/* harmony import */ var _BoundaryEventAppender__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BoundaryEventAppender */ \"./src/features/BoundaryEventAppender.js\");\n/* harmony import */ var _BoundaryEventAppenderProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BoundaryEventAppenderProvider */ \"./src/features/BoundaryEventAppenderProvider.js\");\n/* harmony import */ var _ContextPad__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ContextPad */ \"./src/features/ContextPad.js\");\n/* harmony import */ var _ContextPadProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ContextPadProvider */ \"./src/features/ContextPadProvider.js\");\n/* harmony import */ var bpmn_js_create_append_anything__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! bpmn-js-create-append-anything */ \"./node_modules/bpmn-js-create-append-anything/dist/index.es.js\");\n/* harmony import */ var _CustomAppendMenuProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CustomAppendMenuProvider */ \"./src/features/CustomAppendMenuProvider.js\");\n/* harmony import */ var bpmn_js_lib_features_append_preview_AppendPreview__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! bpmn-js/lib/features/append-preview/AppendPreview */ \"../bpmn-io/bpmn-js/lib/features/append-preview/AppendPreview.js\");\n/* harmony import */ var _Connect__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Connect */ \"./src/features/Connect.js\");\n/* harmony import */ var bpmn_js_color_picker__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! bpmn-js-color-picker */ \"../bpmn-io/bpmn-js-color-picker/index.js\");\n/* harmony import */ var diagram_js_grid__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! diagram-js-grid */ \"./node_modules/diagram-js-grid/dist/index.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  __init__: ['contextPad', 'contextPadProvider', 'appendNode', 'appendNodeProvider', 'boundaryEventAppender', 'boundaryEventAppenderProvider', 'appendMenuProvider', 'appendPreview', 'connect'],\n  __depends__: [bpmn_js_create_append_anything__WEBPACK_IMPORTED_MODULE_6__.CreateAppendAnythingModule, bpmn_js_color_picker__WEBPACK_IMPORTED_MODULE_9__[\"default\"], diagram_js_grid__WEBPACK_IMPORTED_MODULE_10__[\"default\"]],\n  contextPad: ['type', _ContextPad__WEBPACK_IMPORTED_MODULE_4__[\"default\"]],\n  contextPadProvider: ['type', _ContextPadProvider__WEBPACK_IMPORTED_MODULE_5__[\"default\"]],\n  appendNode: ['type', _AppendNode__WEBPACK_IMPORTED_MODULE_0__[\"default\"]],\n  appendNodeProvider: ['type', _AppendNodeProvider__WEBPACK_IMPORTED_MODULE_1__[\"default\"]],\n  boundaryEventAppender: ['type', _BoundaryEventAppender__WEBPACK_IMPORTED_MODULE_2__[\"default\"]],\n  boundaryEventAppenderProvider: ['type', _BoundaryEventAppenderProvider__WEBPACK_IMPORTED_MODULE_3__[\"default\"]],\n  appendMenuProvider: ['type', _CustomAppendMenuProvider__WEBPACK_IMPORTED_MODULE_7__[\"default\"]],\n  appendContextPadProvider: ['value', null],\n  appendPreview: ['type', bpmn_js_lib_features_append_preview_AppendPreview__WEBPACK_IMPORTED_MODULE_11__[\"default\"]],\n  connect: ['type', _Connect__WEBPACK_IMPORTED_MODULE_8__[\"default\"]]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZmVhdHVyZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFzQztBQUNnQjtBQUNNO0FBQ2dCO0FBQ3RDO0FBQ2dCO0FBQ3NCO0FBQ1Y7QUFDWTtBQUM5QztBQUV5QjtBQUVoQjtBQUV6QyxpRUFBZTtFQUNiWSxRQUFRLEVBQUUsQ0FBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLHVCQUF1QixFQUFFLCtCQUErQixFQUFFLG9CQUFvQixFQUFFLGVBQWUsRUFBRSxTQUFTLENBQUU7RUFDaE1DLFdBQVcsRUFBRSxDQUFFUCxzRkFBMEIsRUFBRUksNERBQXFCLEVBQUVDLHdEQUFVLENBQUU7RUFDOUVHLFVBQVUsRUFBRSxDQUFFLE1BQU0sRUFBRVYsbURBQVUsQ0FBRTtFQUNsQ1csa0JBQWtCLEVBQUUsQ0FBRSxNQUFNLEVBQUVWLDJEQUFrQixDQUFFO0VBQ2xEVyxVQUFVLEVBQUUsQ0FBRSxNQUFNLEVBQUVoQixtREFBVSxDQUFFO0VBQ2xDaUIsa0JBQWtCLEVBQUUsQ0FBRSxNQUFNLEVBQUVoQiwyREFBa0IsQ0FBRTtFQUNsRGlCLHFCQUFxQixFQUFFLENBQUUsTUFBTSxFQUFFaEIsOERBQXFCLENBQUU7RUFDeERpQiw2QkFBNkIsRUFBRSxDQUFFLE1BQU0sRUFBRWhCLHNFQUE2QixDQUFFO0VBQ3hFaUIsa0JBQWtCLEVBQUUsQ0FBRSxNQUFNLEVBQUViLGlFQUF3QixDQUFFO0VBQ3hEYyx3QkFBd0IsRUFBRSxDQUFFLE9BQU8sRUFBRSxJQUFJLENBQUU7RUFDM0NDLGFBQWEsRUFBRSxDQUFFLE1BQU0sRUFBRWQsMEZBQWEsQ0FBRTtFQUN4Q2UsT0FBTyxFQUFFLENBQUUsTUFBTSxFQUFFZCxnREFBTztBQUM1QixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2RheXMtMjAyMy8uL3NyYy9mZWF0dXJlcy9pbmRleC5qcz81OTE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHBlbmROb2RlIGZyb20gJy4vQXBwZW5kTm9kZSc7XG5pbXBvcnQgQXBwZW5kTm9kZVByb3ZpZGVyIGZyb20gJy4vQXBwZW5kTm9kZVByb3ZpZGVyJztcbmltcG9ydCBCb3VuZGFyeUV2ZW50QXBwZW5kZXIgZnJvbSAnLi9Cb3VuZGFyeUV2ZW50QXBwZW5kZXInO1xuaW1wb3J0IEJvdW5kYXJ5RXZlbnRBcHBlbmRlclByb3ZpZGVyIGZyb20gJy4vQm91bmRhcnlFdmVudEFwcGVuZGVyUHJvdmlkZXInO1xuaW1wb3J0IENvbnRleHRQYWQgZnJvbSAnLi9Db250ZXh0UGFkJztcbmltcG9ydCBDb250ZXh0UGFkUHJvdmlkZXIgZnJvbSAnLi9Db250ZXh0UGFkUHJvdmlkZXInO1xuaW1wb3J0IHsgQ3JlYXRlQXBwZW5kQW55dGhpbmdNb2R1bGUgfSBmcm9tICdicG1uLWpzLWNyZWF0ZS1hcHBlbmQtYW55dGhpbmcnO1xuaW1wb3J0IEN1c3RvbUFwcGVuZE1lbnVQcm92aWRlciBmcm9tICcuL0N1c3RvbUFwcGVuZE1lbnVQcm92aWRlcic7XG5pbXBvcnQgQXBwZW5kUHJldmlldyBmcm9tICdicG1uLWpzL2xpYi9mZWF0dXJlcy9hcHBlbmQtcHJldmlldy9BcHBlbmRQcmV2aWV3JztcbmltcG9ydCBDb25uZWN0IGZyb20gJy4vQ29ubmVjdCc7XG5cbmltcG9ydCBCcG1uQ29sb3JQaWNrZXJNb2R1bGUgZnJvbSAnYnBtbi1qcy1jb2xvci1waWNrZXInO1xuXG5pbXBvcnQgR3JpZE1vZHVsZSBmcm9tICdkaWFncmFtLWpzLWdyaWQnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIF9faW5pdF9fOiBbICdjb250ZXh0UGFkJywgJ2NvbnRleHRQYWRQcm92aWRlcicsICdhcHBlbmROb2RlJywgJ2FwcGVuZE5vZGVQcm92aWRlcicsICdib3VuZGFyeUV2ZW50QXBwZW5kZXInLCAnYm91bmRhcnlFdmVudEFwcGVuZGVyUHJvdmlkZXInLCAnYXBwZW5kTWVudVByb3ZpZGVyJywgJ2FwcGVuZFByZXZpZXcnLCAnY29ubmVjdCcgXSxcbiAgX19kZXBlbmRzX186IFsgQ3JlYXRlQXBwZW5kQW55dGhpbmdNb2R1bGUsIEJwbW5Db2xvclBpY2tlck1vZHVsZSwgR3JpZE1vZHVsZSBdLFxuICBjb250ZXh0UGFkOiBbICd0eXBlJywgQ29udGV4dFBhZCBdLFxuICBjb250ZXh0UGFkUHJvdmlkZXI6IFsgJ3R5cGUnLCBDb250ZXh0UGFkUHJvdmlkZXIgXSxcbiAgYXBwZW5kTm9kZTogWyAndHlwZScsIEFwcGVuZE5vZGUgXSxcbiAgYXBwZW5kTm9kZVByb3ZpZGVyOiBbICd0eXBlJywgQXBwZW5kTm9kZVByb3ZpZGVyIF0sXG4gIGJvdW5kYXJ5RXZlbnRBcHBlbmRlcjogWyAndHlwZScsIEJvdW5kYXJ5RXZlbnRBcHBlbmRlciBdLFxuICBib3VuZGFyeUV2ZW50QXBwZW5kZXJQcm92aWRlcjogWyAndHlwZScsIEJvdW5kYXJ5RXZlbnRBcHBlbmRlclByb3ZpZGVyIF0sXG4gIGFwcGVuZE1lbnVQcm92aWRlcjogWyAndHlwZScsIEN1c3RvbUFwcGVuZE1lbnVQcm92aWRlciBdLFxuICBhcHBlbmRDb250ZXh0UGFkUHJvdmlkZXI6IFsgJ3ZhbHVlJywgbnVsbCBdLFxuICBhcHBlbmRQcmV2aWV3OiBbICd0eXBlJywgQXBwZW5kUHJldmlldyBdLFxuICBjb25uZWN0OiBbICd0eXBlJywgQ29ubmVjdCBdXG59O1xuIl0sIm5hbWVzIjpbIkFwcGVuZE5vZGUiLCJBcHBlbmROb2RlUHJvdmlkZXIiLCJCb3VuZGFyeUV2ZW50QXBwZW5kZXIiLCJCb3VuZGFyeUV2ZW50QXBwZW5kZXJQcm92aWRlciIsIkNvbnRleHRQYWQiLCJDb250ZXh0UGFkUHJvdmlkZXIiLCJDcmVhdGVBcHBlbmRBbnl0aGluZ01vZHVsZSIsIkN1c3RvbUFwcGVuZE1lbnVQcm92aWRlciIsIkFwcGVuZFByZXZpZXciLCJDb25uZWN0IiwiQnBtbkNvbG9yUGlja2VyTW9kdWxlIiwiR3JpZE1vZHVsZSIsIl9faW5pdF9fIiwiX19kZXBlbmRzX18iLCJjb250ZXh0UGFkIiwiY29udGV4dFBhZFByb3ZpZGVyIiwiYXBwZW5kTm9kZSIsImFwcGVuZE5vZGVQcm92aWRlciIsImJvdW5kYXJ5RXZlbnRBcHBlbmRlciIsImJvdW5kYXJ5RXZlbnRBcHBlbmRlclByb3ZpZGVyIiwiYXBwZW5kTWVudVByb3ZpZGVyIiwiYXBwZW5kQ29udGV4dFBhZFByb3ZpZGVyIiwiYXBwZW5kUHJldmlldyIsImNvbm5lY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/features/index.js\n");

/***/ }),

/***/ "./src/features/util/CreateOptionsUtil.js":
/*!************************************************!*\
  !*** ./src/features/util/CreateOptionsUtil.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COMMON: () => (/* binding */ COMMON),\n/* harmony export */   COMMON_GROUP: () => (/* binding */ COMMON_GROUP),\n/* harmony export */   CREATE_OPTIONS: () => (/* binding */ CREATE_OPTIONS),\n/* harmony export */   DATA_GROUP: () => (/* binding */ DATA_GROUP),\n/* harmony export */   DATA_OBJECTS: () => (/* binding */ DATA_OBJECTS),\n/* harmony export */   EVENT_GROUP: () => (/* binding */ EVENT_GROUP),\n/* harmony export */   GATEWAY: () => (/* binding */ GATEWAY),\n/* harmony export */   GATEWAY_GROUP: () => (/* binding */ GATEWAY_GROUP),\n/* harmony export */   NONE_EVENTS: () => (/* binding */ NONE_EVENTS),\n/* harmony export */   PARTICIPANT: () => (/* binding */ PARTICIPANT),\n/* harmony export */   PARTICIPANT_GROUP: () => (/* binding */ PARTICIPANT_GROUP),\n/* harmony export */   SUBPROCESS: () => (/* binding */ SUBPROCESS),\n/* harmony export */   SUBPROCESS_GROUP: () => (/* binding */ SUBPROCESS_GROUP),\n/* harmony export */   TASK: () => (/* binding */ TASK),\n/* harmony export */   TASK_GROUP: () => (/* binding */ TASK_GROUP),\n/* harmony export */   TYPED_BOUNDARY_EVENT: () => (/* binding */ TYPED_BOUNDARY_EVENT),\n/* harmony export */   TYPED_END_EVENT: () => (/* binding */ TYPED_END_EVENT),\n/* harmony export */   TYPED_INTERMEDIATE_EVENT: () => (/* binding */ TYPED_INTERMEDIATE_EVENT),\n/* harmony export */   TYPED_START_EVENTS: () => (/* binding */ TYPED_START_EVENTS)\n/* harmony export */ });\nconst COMMON_GROUP = {\n  id: 'common',\n  name: 'Common'\n};\nconst EVENT_GROUP = {\n  id: 'events',\n  name: 'Events'\n};\nconst TASK_GROUP = {\n  id: 'tasks',\n  name: 'Tasks'\n};\nconst DATA_GROUP = {\n  id: 'data',\n  name: 'Data'\n};\nconst PARTICIPANT_GROUP = {\n  id: 'participants',\n  name: 'Participants'\n};\nconst SUBPROCESS_GROUP = {\n  id: 'subprocess',\n  name: 'Sub Processes'\n};\nconst GATEWAY_GROUP = {\n  id: 'gateways',\n  name: 'Gateways'\n};\nconst COMMON = [{\n  label: 'Task',\n  actionName: 'common-task',\n  className: 'bpmn-icon-task',\n  target: {\n    type: 'bpmn:Task'\n  }\n}, {\n  label: 'Exclusive Gateway',\n  actionName: 'common-exclusive-gateway',\n  className: 'bpmn-icon-gateway-xor',\n  target: {\n    type: 'bpmn:ExclusiveGateway'\n  }\n}, {\n  label: 'End Event',\n  actionName: 'common-none-end-event',\n  className: 'bpmn-icon-end-event-none',\n  target: {\n    type: 'bpmn:EndEvent'\n  }\n}].map(option => ({\n  ...option,\n  group: COMMON_GROUP\n}));\nconst NONE_EVENTS = [{\n  label: 'Start Event',\n  actionName: 'none-start-event',\n  className: 'bpmn-icon-start-event-none',\n  target: {\n    type: 'bpmn:StartEvent'\n  }\n}, {\n  label: 'Intermediate Throw Event',\n  actionName: 'none-intermediate-throwing',\n  className: 'bpmn-icon-intermediate-event-none',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent'\n  }\n}, {\n  label: 'Boundary Event',\n  actionName: 'none-boundary-event',\n  className: 'bpmn-icon-intermediate-event-none',\n  target: {\n    type: 'bpmn:BoundaryEvent'\n  }\n}, {\n  label: 'End Event',\n  actionName: 'none-end-event',\n  className: 'bpmn-icon-end-event-none',\n  target: {\n    type: 'bpmn:EndEvent'\n  }\n}].map(option => ({\n  ...option,\n  group: EVENT_GROUP\n}));\nconst TYPED_START_EVENTS = [{\n  label: 'Message Start Event',\n  actionName: 'message-start',\n  className: 'bpmn-icon-start-event-message',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Timer Start Event',\n  actionName: 'timer-start',\n  className: 'bpmn-icon-start-event-timer',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition'\n  }\n}, {\n  label: 'Conditional Start Event',\n  actionName: 'conditional-start',\n  className: 'bpmn-icon-start-event-condition',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n  }\n}, {\n  label: 'Signal Start Event',\n  actionName: 'signal-start',\n  className: 'bpmn-icon-start-event-signal',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}].map(option => ({\n  ...option,\n  group: EVENT_GROUP\n}));\nconst TYPED_INTERMEDIATE_EVENT = [{\n  label: 'Message Intermediate Catch Event',\n  actionName: 'message-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-message',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Message Intermediate Throw Event',\n  actionName: 'message-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-message',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Timer Intermediate Catch Event',\n  actionName: 'timer-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-timer',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition'\n  }\n}, {\n  label: 'Escalation Intermediate Throw Event',\n  actionName: 'escalation-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-escalation',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition'\n  }\n}, {\n  label: 'Conditional Intermediate Catch Event',\n  actionName: 'conditional-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-condition',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n  }\n}, {\n  label: 'Link Intermediate Catch Event',\n  actionName: 'link-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-link',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:LinkEventDefinition',\n    eventDefinitionAttrs: {\n      name: ''\n    }\n  }\n}, {\n  label: 'Link Intermediate Throw Event',\n  actionName: 'link-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-link',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:LinkEventDefinition',\n    eventDefinitionAttrs: {\n      name: ''\n    }\n  }\n}, {\n  label: 'Compensation Intermediate Throw Event',\n  actionName: 'compensation-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-compensation',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:CompensateEventDefinition'\n  }\n}, {\n  label: 'Signal Intermediate Catch Event',\n  actionName: 'signal-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-signal',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}, {\n  label: 'Signal Intermediate Throw Event',\n  actionName: 'signal-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-signal',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}].map(option => ({\n  ...option,\n  group: EVENT_GROUP\n}));\nconst TYPED_BOUNDARY_EVENT = [{\n  label: 'Message Boundary Event',\n  actionName: 'message-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-message',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Timer Boundary Event',\n  actionName: 'timer-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-timer',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition'\n  }\n}, {\n  label: 'Escalation Boundary Event',\n  actionName: 'escalation-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-escalation',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition'\n  }\n}, {\n  label: 'Conditional Boundary Event',\n  actionName: 'conditional-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-condition',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n  }\n}, {\n  label: 'Error Boundary Event',\n  actionName: 'error-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-error',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:ErrorEventDefinition'\n  }\n}, {\n  label: 'Cancel Boundary Event',\n  actionName: 'cancel-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-cancel',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:CancelEventDefinition'\n  }\n}, {\n  label: 'Signal Boundary Event',\n  actionName: 'signal-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-signal',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}, {\n  label: 'Compensation Boundary Event',\n  actionName: 'compensation-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-compensation',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:CompensateEventDefinition'\n  }\n}, {\n  label: 'Message Boundary Event (non-interrupting)',\n  actionName: 'non-interrupting-message-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-message',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition',\n    cancelActivity: false\n  }\n}, {\n  label: 'Timer Boundary Event (non-interrupting)',\n  actionName: 'non-interrupting-timer-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-timer',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition',\n    cancelActivity: false\n  }\n}, {\n  label: 'Escalation Boundary Event (non-interrupting)',\n  actionName: 'non-interrupting-escalation-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-escalation',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition',\n    cancelActivity: false\n  }\n}, {\n  label: 'Conditional Boundary Event (non-interrupting)',\n  actionName: 'non-interrupting-conditional-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-condition',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition',\n    cancelActivity: false\n  }\n}, {\n  label: 'Signal Boundary Event (non-interrupting)',\n  actionName: 'non-interrupting-signal-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-signal',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition',\n    cancelActivity: false\n  }\n}].map(option => ({\n  ...option,\n  group: EVENT_GROUP\n}));\nconst TYPED_END_EVENT = [{\n  label: 'Message End Event',\n  actionName: 'message-end',\n  className: 'bpmn-icon-end-event-message',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Escalation End Event',\n  actionName: 'escalation-end',\n  className: 'bpmn-icon-end-event-escalation',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition'\n  }\n}, {\n  label: 'Error End Event',\n  actionName: 'error-end',\n  className: 'bpmn-icon-end-event-error',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:ErrorEventDefinition'\n  }\n}, {\n  label: 'Cancel End Event',\n  actionName: 'cancel-end',\n  className: 'bpmn-icon-end-event-cancel',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:CancelEventDefinition'\n  }\n}, {\n  label: 'Compensation End Event',\n  actionName: 'compensation-end',\n  className: 'bpmn-icon-end-event-compensation',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:CompensateEventDefinition'\n  }\n}, {\n  label: 'Signal End Event',\n  actionName: 'signal-end',\n  className: 'bpmn-icon-end-event-signal',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}, {\n  label: 'Terminate End Event',\n  actionName: 'terminate-end',\n  className: 'bpmn-icon-end-event-terminate',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:TerminateEventDefinition'\n  }\n}].map(option => ({\n  ...option,\n  group: EVENT_GROUP\n}));\nconst GATEWAY = [{\n  label: 'Exclusive Gateway',\n  actionName: 'exclusive-gateway',\n  className: 'bpmn-icon-gateway-xor',\n  target: {\n    type: 'bpmn:ExclusiveGateway'\n  }\n}, {\n  label: 'Parallel Gateway',\n  actionName: 'parallel-gateway',\n  className: 'bpmn-icon-gateway-parallel',\n  target: {\n    type: 'bpmn:ParallelGateway'\n  }\n}, {\n  label: 'Inclusive Gateway',\n  search: 'or',\n  actionName: 'inclusive-gateway',\n  className: 'bpmn-icon-gateway-or',\n  target: {\n    type: 'bpmn:InclusiveGateway'\n  },\n  rank: -1\n}, {\n  label: 'Complex Gateway',\n  actionName: 'complex-gateway',\n  className: 'bpmn-icon-gateway-complex',\n  target: {\n    type: 'bpmn:ComplexGateway'\n  },\n  rank: -1\n}, {\n  label: 'Event based Gateway',\n  actionName: 'event-based-gateway',\n  className: 'bpmn-icon-gateway-eventbased',\n  target: {\n    type: 'bpmn:EventBasedGateway',\n    instantiate: false,\n    eventGatewayType: 'Exclusive'\n  }\n}].map(option => ({\n  ...option,\n  group: GATEWAY_GROUP\n}));\nconst SUBPROCESS = [{\n  label: 'Transaction',\n  actionName: 'transaction',\n  className: 'bpmn-icon-transaction',\n  target: {\n    type: 'bpmn:Transaction',\n    isExpanded: true\n  }\n}, {\n  label: 'Event Sub Process',\n  search: 'subprocess',\n  actionName: 'event-subprocess',\n  className: 'bpmn-icon-event-subprocess-expanded',\n  target: {\n    type: 'bpmn:SubProcess',\n    triggeredByEvent: true,\n    isExpanded: true\n  }\n}, {\n  label: 'Sub Process (collapsed)',\n  search: 'subprocess',\n  actionName: 'collapsed-subprocess',\n  className: 'bpmn-icon-subprocess-collapsed',\n  target: {\n    type: 'bpmn:SubProcess',\n    isExpanded: false\n  }\n}, {\n  label: 'Sub Process (expanded)',\n  search: 'subprocess',\n  actionName: 'expanded-subprocess',\n  className: 'bpmn-icon-subprocess-collapsed',\n  target: {\n    type: 'bpmn:SubProcess',\n    isExpanded: true\n  }\n}].map(option => ({\n  ...option,\n  group: SUBPROCESS_GROUP\n}));\nconst TASK = [{\n  label: 'Task',\n  actionName: 'task',\n  className: 'bpmn-icon-task',\n  target: {\n    type: 'bpmn:Task'\n  }\n}, {\n  label: 'User Task',\n  actionName: 'user-task',\n  className: 'bpmn-icon-user',\n  target: {\n    type: 'bpmn:UserTask'\n  }\n}, {\n  label: 'Service Task',\n  actionName: 'service-task',\n  className: 'bpmn-icon-service',\n  target: {\n    type: 'bpmn:ServiceTask'\n  }\n}, {\n  label: 'Send Task',\n  actionName: 'send-task',\n  className: 'bpmn-icon-send',\n  target: {\n    type: 'bpmn:SendTask'\n  },\n  rank: -1\n}, {\n  label: 'Receive Task',\n  actionName: 'receive-task',\n  className: 'bpmn-icon-receive',\n  target: {\n    type: 'bpmn:ReceiveTask'\n  },\n  rank: -1\n}, {\n  label: 'Manual Task',\n  actionName: 'manual-task',\n  className: 'bpmn-icon-manual',\n  target: {\n    type: 'bpmn:ManualTask'\n  },\n  rank: -1\n}, {\n  label: 'Business Rule Task',\n  actionName: 'rule-task',\n  className: 'bpmn-icon-business-rule',\n  target: {\n    type: 'bpmn:BusinessRuleTask'\n  }\n}, {\n  label: 'Script Task',\n  actionName: 'script-task',\n  className: 'bpmn-icon-script',\n  target: {\n    type: 'bpmn:ScriptTask'\n  }\n}, {\n  label: 'Call Activity',\n  actionName: 'call-activity',\n  className: 'bpmn-icon-call-activity',\n  target: {\n    type: 'bpmn:CallActivity'\n  }\n}].map(option => ({\n  ...option,\n  group: TASK_GROUP\n}));\nconst DATA_OBJECTS = [{\n  label: 'Data Store Reference',\n  actionName: 'data-store-reference',\n  className: 'bpmn-icon-data-store',\n  target: {\n    type: 'bpmn:DataStoreReference'\n  }\n}, {\n  label: 'Data Object Reference',\n  actionName: 'data-object-reference',\n  className: 'bpmn-icon-data-object',\n  target: {\n    type: 'bpmn:DataObjectReference'\n  }\n}].map(option => ({\n  ...option,\n  group: DATA_GROUP\n}));\nconst PARTICIPANT = [{\n  label: 'Expanded Pool',\n  search: 'Participant',\n  actionName: 'expanded-pool',\n  className: 'bpmn-icon-participant',\n  target: {\n    type: 'bpmn:Participant',\n    isExpanded: true\n  }\n}, {\n  label: 'Empty Pool',\n  search: 'Collapsed Participant',\n  actionName: 'collapsed-pool',\n  className: 'bpmn-icon-lane',\n  target: {\n    type: 'bpmn:Participant',\n    isExpanded: false\n  }\n}].map(option => ({\n  ...option,\n  group: PARTICIPANT_GROUP\n}));\nconst CREATE_OPTIONS = [...COMMON, ...GATEWAY, ...TASK, ...SUBPROCESS, ...NONE_EVENTS, ...TYPED_START_EVENTS, ...TYPED_INTERMEDIATE_EVENT, ...TYPED_END_EVENT, ...TYPED_BOUNDARY_EVENT, ...DATA_OBJECTS, ...PARTICIPANT];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/features/util/CreateOptionsUtil.js\n");

/***/ }),

/***/ "./node_modules/bpmn-js-create-append-anything/dist/index.es.js":
/*!**********************************************************************!*\
  !*** ./node_modules/bpmn-js-create-append-anything/dist/index.es.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreateAppendAnythingModule: () => (/* binding */ index$1),\n/* harmony export */   CreateAppendElementTemplatesModule: () => (/* binding */ index),\n/* harmony export */   RemoveTemplatesModule: () => (/* binding */ RemoveTemplatesModule)\n/* harmony export */ });\n/**\n * Flatten array, one level deep.\n *\n * @template T\n *\n * @param {T[][]} arr\n *\n * @return {T[]}\n */\n\nconst nativeToString = Object.prototype.toString;\nconst nativeHasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isUndefined(obj) {\n  return obj === undefined;\n}\n\nfunction isArray(obj) {\n  return nativeToString.call(obj) === '[object Array]';\n}\n\nfunction isObject(obj) {\n  return nativeToString.call(obj) === '[object Object]';\n}\n\nfunction isNumber(obj) {\n  return nativeToString.call(obj) === '[object Number]';\n}\n\n/**\n * @param {any} obj\n *\n * @return {boolean}\n */\nfunction isFunction(obj) {\n  const tag = nativeToString.call(obj);\n\n  return (\n    tag === '[object Function]' ||\n    tag === '[object AsyncFunction]' ||\n    tag === '[object GeneratorFunction]' ||\n    tag === '[object AsyncGeneratorFunction]' ||\n    tag === '[object Proxy]'\n  );\n}\n\n/**\n * Return true, if target owns a property with the given key.\n *\n * @param {Object} target\n * @param {String} key\n *\n * @return {Boolean}\n */\nfunction has(target, key) {\n  return nativeHasOwnProperty.call(target, key);\n}\n\n/**\n * @template T\n * @typedef { (\n *   ((e: T) => boolean) |\n *   ((e: T, idx: number) => boolean) |\n *   ((e: T, key: string) => boolean) |\n *   string |\n *   number\n * ) } Matcher\n */\n\n/**\n * @template T\n * @template U\n *\n * @typedef { (\n *   ((e: T) => U) | string | number\n * ) } Extractor\n */\n\n\n/**\n * @template T\n * @typedef { (val: T, key: any) => boolean } MatchFn\n */\n\n/**\n * @template T\n * @typedef { T[] } ArrayCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: string]: T } } StringKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: number]: T } } NumberKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { StringKeyValueCollection<T> | NumberKeyValueCollection<T> } KeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { KeyValueCollection<T> | ArrayCollection<T> } Collection\n */\n\n/**\n * Find element in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {Object}\n */\nfunction find(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let match;\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      match = val;\n\n      return false;\n    }\n  });\n\n  return match;\n\n}\n\n\n/**\n * Iterate over collection; returning something\n * (non-undefined) will stop iteration.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator\n *\n * @return {T} return result that stopped the iteration\n */\nfunction forEach(collection, iterator) {\n\n  let val,\n      result;\n\n  if (isUndefined(collection)) {\n    return;\n  }\n\n  const convertKey = isArray(collection) ? toNum : identity;\n\n  for (let key in collection) {\n\n    if (has(collection, key)) {\n      val = collection[key];\n\n      result = iterator(val, convertKey(key));\n\n      if (result === false) {\n        return val;\n      }\n    }\n  }\n}\n\n\n/**\n * Return true if some elements in the collection\n * match the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction some(collection, matcher) {\n\n  return !!find(collection, matcher);\n}\n\n\n/**\n * @template T\n * @param {Matcher<T>} matcher\n *\n * @return {MatchFn<T>}\n */\nfunction toMatcher(matcher) {\n  return isFunction(matcher) ? matcher : (e) => {\n    return e === matcher;\n  };\n}\n\n\nfunction identity(arg) {\n  return arg;\n}\n\nfunction toNum(arg) {\n  return Number(arg);\n}\n\n/**\n * Convenience wrapper for `Object.assign`.\n *\n * @param {Object} target\n * @param {...Object} others\n *\n * @return {Object} the target\n */\nfunction assign(target, ...others) {\n  return Object.assign(target, ...others);\n}\n\nconst EVENT_GROUP = {\n  id: 'events',\n  name: 'Events'\n};\n\nconst TASK_GROUP = {\n  id: 'tasks',\n  name: 'Tasks'\n};\n\nconst DATA_GROUP = {\n  id: 'data',\n  name: 'Data'\n};\n\nconst PARTICIPANT_GROUP = {\n  id: 'participants',\n  name: 'Participants'\n};\n\nconst SUBPROCESS_GROUP = {\n  id: 'subprocess',\n  name: 'Sub Processes'\n};\n\nconst GATEWAY_GROUP = {\n  id: 'gateways',\n  name: 'Gateways'\n};\n\nconst NONE_EVENTS = [\n  {\n    label: 'Start Event',\n    actionName: 'none-start-event',\n    className: 'bpmn-icon-start-event-none',\n    target: {\n      type: 'bpmn:StartEvent'\n    }\n  },\n  {\n    label: 'Intermediate Throw Event',\n    actionName: 'none-intermediate-throwing',\n    className: 'bpmn-icon-intermediate-event-none',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent'\n    }\n  },\n  {\n    label: 'Boundary Event',\n    actionName: 'none-boundary-event',\n    className: 'bpmn-icon-intermediate-event-none',\n    target: {\n      type: 'bpmn:BoundaryEvent'\n    }\n  },\n  {\n    label: 'End Event',\n    actionName: 'none-end-event',\n    className: 'bpmn-icon-end-event-none',\n    target: {\n      type: 'bpmn:EndEvent'\n    }\n  }\n].map(option => ({ ...option, group: EVENT_GROUP }));\n\nconst TYPED_START_EVENTS = [\n  {\n    label: 'Message Start Event',\n    actionName: 'message-start',\n    className: 'bpmn-icon-start-event-message',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Timer Start Event',\n    actionName: 'timer-start',\n    className: 'bpmn-icon-start-event-timer',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition'\n    }\n  },\n  {\n    label: 'Conditional Start Event',\n    actionName: 'conditional-start',\n    className: 'bpmn-icon-start-event-condition',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n    }\n  },\n  {\n    label: 'Signal Start Event',\n    actionName: 'signal-start',\n    className: 'bpmn-icon-start-event-signal',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  }\n].map(option => ({ ...option, group: EVENT_GROUP }));\n\nconst TYPED_INTERMEDIATE_EVENT = [\n  {\n    label: 'Message Intermediate Catch Event',\n    actionName: 'message-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-message',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Message Intermediate Throw Event',\n    actionName: 'message-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-message',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Timer Intermediate Catch Event',\n    actionName: 'timer-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-timer',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition'\n    }\n  },\n  {\n    label: 'Escalation Intermediate Throw Event',\n    actionName: 'escalation-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-escalation',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n    }\n  },\n  {\n    label: 'Conditional Intermediate Catch Event',\n    actionName: 'conditional-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-condition',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n    }\n  },\n  {\n    label: 'Link Intermediate Catch Event',\n    actionName: 'link-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-link',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:LinkEventDefinition',\n      eventDefinitionAttrs: {\n        name: ''\n      }\n    }\n  },\n  {\n    label: 'Link Intermediate Throw Event',\n    actionName: 'link-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-link',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:LinkEventDefinition',\n      eventDefinitionAttrs: {\n        name: ''\n      }\n    }\n  },\n  {\n    label: 'Compensation Intermediate Throw Event',\n    actionName: 'compensation-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-compensation',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n    }\n  },\n  {\n    label: 'Signal Intermediate Catch Event',\n    actionName: 'signal-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-signal',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  },\n  {\n    label: 'Signal Intermediate Throw Event',\n    actionName: 'signal-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-signal',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  }\n].map(option => ({ ...option, group: EVENT_GROUP }));\n\nconst TYPED_BOUNDARY_EVENT = [\n  {\n    label: 'Message Boundary Event',\n    actionName: 'message-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-message',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Timer Boundary Event',\n    actionName: 'timer-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-timer',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition'\n    }\n  },\n  {\n    label: 'Escalation Boundary Event',\n    actionName: 'escalation-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-escalation',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n    }\n  },\n  {\n    label: 'Conditional Boundary Event',\n    actionName: 'conditional-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-condition',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n    }\n  },\n  {\n    label: 'Error Boundary Event',\n    actionName: 'error-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-error',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:ErrorEventDefinition'\n    }\n  },\n  {\n    label: 'Cancel Boundary Event',\n    actionName: 'cancel-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-cancel',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:CancelEventDefinition'\n    }\n  },\n  {\n    label: 'Signal Boundary Event',\n    actionName: 'signal-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-signal',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  },\n  {\n    label: 'Compensation Boundary Event',\n    actionName: 'compensation-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-compensation',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n    }\n  },\n  {\n    label: 'Message Boundary Event (non-interrupting)',\n    actionName: 'non-interrupting-message-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-message',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition',\n      cancelActivity: false\n    }\n  },\n  {\n    label: 'Timer Boundary Event (non-interrupting)',\n    actionName: 'non-interrupting-timer-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-timer',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition',\n      cancelActivity: false\n    }\n  },\n  {\n    label: 'Escalation Boundary Event (non-interrupting)',\n    actionName: 'non-interrupting-escalation-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-escalation',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition',\n      cancelActivity: false\n    }\n  },\n  {\n    label: 'Conditional Boundary Event (non-interrupting)',\n    actionName: 'non-interrupting-conditional-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-condition',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition',\n      cancelActivity: false\n    }\n  },\n  {\n    label: 'Signal Boundary Event (non-interrupting)',\n    actionName: 'non-interrupting-signal-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-signal',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition',\n      cancelActivity: false\n    }\n  }\n].map(option => ({ ...option, group: EVENT_GROUP }));\n\nconst TYPED_END_EVENT = [\n  {\n    label: 'Message End Event',\n    actionName: 'message-end',\n    className: 'bpmn-icon-end-event-message',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Escalation End Event',\n    actionName: 'escalation-end',\n    className: 'bpmn-icon-end-event-escalation',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n    }\n  },\n  {\n    label: 'Error End Event',\n    actionName: 'error-end',\n    className: 'bpmn-icon-end-event-error',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:ErrorEventDefinition'\n    }\n  },\n  {\n    label: 'Cancel End Event',\n    actionName: 'cancel-end',\n    className: 'bpmn-icon-end-event-cancel',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:CancelEventDefinition'\n    }\n  },\n  {\n    label: 'Compensation End Event',\n    actionName: 'compensation-end',\n    className: 'bpmn-icon-end-event-compensation',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n    }\n  },\n  {\n    label: 'Signal End Event',\n    actionName: 'signal-end',\n    className: 'bpmn-icon-end-event-signal',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  },\n  {\n    label: 'Terminate End Event',\n    actionName: 'terminate-end',\n    className: 'bpmn-icon-end-event-terminate',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:TerminateEventDefinition'\n    }\n  }\n].map(option => ({ ...option, group: EVENT_GROUP }));\n\nconst GATEWAY$1 = [\n  {\n    label: 'Exclusive Gateway',\n    actionName: 'exclusive-gateway',\n    className: 'bpmn-icon-gateway-xor',\n    target: {\n      type: 'bpmn:ExclusiveGateway'\n    }\n  },\n  {\n    label: 'Parallel Gateway',\n    actionName: 'parallel-gateway',\n    className: 'bpmn-icon-gateway-parallel',\n    target: {\n      type: 'bpmn:ParallelGateway'\n    }\n  },\n  {\n    label: 'Inclusive Gateway',\n    search: 'or',\n    actionName: 'inclusive-gateway',\n    className: 'bpmn-icon-gateway-or',\n    target: {\n      type: 'bpmn:InclusiveGateway'\n    },\n    rank: -1\n  },\n  {\n    label: 'Complex Gateway',\n    actionName: 'complex-gateway',\n    className: 'bpmn-icon-gateway-complex',\n    target: {\n      type: 'bpmn:ComplexGateway'\n    },\n    rank: -1\n  },\n  {\n    label: 'Event based Gateway',\n    actionName: 'event-based-gateway',\n    className: 'bpmn-icon-gateway-eventbased',\n    target: {\n      type: 'bpmn:EventBasedGateway',\n      instantiate: false,\n      eventGatewayType: 'Exclusive'\n    }\n  }\n].map(option => ({ ...option, group: GATEWAY_GROUP }));\n\nconst SUBPROCESS = [\n  {\n    label: 'Transaction',\n    actionName: 'transaction',\n    className: 'bpmn-icon-transaction',\n    target: {\n      type: 'bpmn:Transaction',\n      isExpanded: true\n    }\n  },\n  {\n    label: 'Event Sub Process',\n    search: 'subprocess',\n    actionName: 'event-subprocess',\n    className: 'bpmn-icon-event-subprocess-expanded',\n    target: {\n      type: 'bpmn:SubProcess',\n      triggeredByEvent: true,\n      isExpanded: true\n    }\n  },\n  {\n    label: 'Sub Process (collapsed)',\n    search: 'subprocess',\n    actionName: 'collapsed-subprocess',\n    className: 'bpmn-icon-subprocess-collapsed',\n    target: {\n      type: 'bpmn:SubProcess',\n      isExpanded: false\n    }\n  },\n  {\n    label: 'Sub Process (expanded)',\n    search: 'subprocess',\n    actionName: 'expanded-subprocess',\n    className: 'bpmn-icon-subprocess-collapsed',\n    target: {\n      type: 'bpmn:SubProcess',\n      isExpanded: true\n    }\n  }\n].map(option => ({ ...option, group: SUBPROCESS_GROUP }));\n\nconst TASK$1 = [\n  {\n    label: 'Task',\n    actionName: 'task',\n    className: 'bpmn-icon-task',\n    target: {\n      type: 'bpmn:Task'\n    }\n  },\n  {\n    label: 'User Task',\n    actionName: 'user-task',\n    className: 'bpmn-icon-user',\n    target: {\n      type: 'bpmn:UserTask'\n    }\n  },\n  {\n    label: 'Service Task',\n    actionName: 'service-task',\n    className: 'bpmn-icon-service',\n    target: {\n      type: 'bpmn:ServiceTask'\n    }\n  },\n  {\n    label: 'Send Task',\n    actionName: 'send-task',\n    className: 'bpmn-icon-send',\n    target: {\n      type: 'bpmn:SendTask'\n    },\n    rank: -1\n  },\n  {\n    label: 'Receive Task',\n    actionName: 'receive-task',\n    className: 'bpmn-icon-receive',\n    target: {\n      type: 'bpmn:ReceiveTask'\n    },\n    rank: -1\n  },\n  {\n    label: 'Manual Task',\n    actionName: 'manual-task',\n    className: 'bpmn-icon-manual',\n    target: {\n      type: 'bpmn:ManualTask'\n    },\n    rank: -1\n  },\n  {\n    label: 'Business Rule Task',\n    actionName: 'rule-task',\n    className: 'bpmn-icon-business-rule',\n    target: {\n      type: 'bpmn:BusinessRuleTask'\n    }\n  },\n  {\n    label: 'Script Task',\n    actionName: 'script-task',\n    className: 'bpmn-icon-script',\n    target: {\n      type: 'bpmn:ScriptTask'\n    }\n  },\n  {\n    label: 'Call Activity',\n    actionName: 'call-activity',\n    className: 'bpmn-icon-call-activity',\n    target: {\n      type: 'bpmn:CallActivity'\n    }\n  }\n].map(option => ({ ...option, group: TASK_GROUP }));\n\nconst DATA_OBJECTS = [\n  {\n    label: 'Data Store Reference',\n    actionName: 'data-store-reference',\n    className: 'bpmn-icon-data-store',\n    target: {\n      type: 'bpmn:DataStoreReference'\n    }\n  },\n  {\n    label: 'Data Object Reference',\n    actionName: 'data-object-reference',\n    className: 'bpmn-icon-data-object',\n    target: {\n      type: 'bpmn:DataObjectReference'\n    }\n  }\n].map(option => ({ ...option, group: DATA_GROUP }));\n\nconst PARTICIPANT$1 = [\n  {\n    label: 'Expanded Pool',\n    search: 'Participant',\n    actionName: 'expanded-pool',\n    className: 'bpmn-icon-participant',\n    target: {\n      type: 'bpmn:Participant',\n      isExpanded: true\n    }\n  },\n  {\n    label: 'Empty Pool',\n    search: 'Collapsed Participant',\n    actionName: 'collapsed-pool',\n    className: 'bpmn-icon-lane',\n    target: {\n      type: 'bpmn:Participant',\n      isExpanded: false\n    }\n  }\n].map(option => ({ ...option, group: PARTICIPANT_GROUP }));\n\nconst CREATE_OPTIONS = [\n  ...GATEWAY$1,\n  ...TASK$1,\n  ...SUBPROCESS,\n  ...NONE_EVENTS,\n  ...TYPED_START_EVENTS,\n  ...TYPED_INTERMEDIATE_EVENT,\n  ...TYPED_END_EVENT,\n  ...TYPED_BOUNDARY_EVENT,\n  ...DATA_OBJECTS,\n  ...PARTICIPANT$1\n];\n\n/**\n * This module is an append menu provider for the popup menu.\n */\nfunction AppendMenuProvider(\n    elementFactory, popupMenu,\n    create, autoPlace, rules,\n    mouse, translate\n) {\n\n  this._elementFactory = elementFactory;\n  this._popupMenu = popupMenu;\n  this._create = create;\n  this._autoPlace = autoPlace;\n  this._rules = rules;\n  this._create = create;\n  this._mouse = mouse;\n  this._translate = translate;\n\n  this.register();\n}\n\nAppendMenuProvider.$inject = [\n  'elementFactory',\n  'popupMenu',\n  'create',\n  'autoPlace',\n  'rules',\n  'mouse',\n  'translate'\n];\n\n/**\n * Register append menu provider in the popup menu\n */\nAppendMenuProvider.prototype.register = function() {\n  this._popupMenu.registerProvider('bpmn-append', this);\n};\n\n/**\n * Gets the append options for the given element as menu entries\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\nAppendMenuProvider.prototype.getPopupMenuEntries = function(element) {\n  const rules = this._rules;\n  const translate = this._translate;\n\n  const entries = {};\n\n  if (!rules.allowed('shape.append', { element: element })) {\n    return [];\n  }\n\n  // filter out elements with no incoming connections\n  const appendOptions = this._filterEntries(CREATE_OPTIONS);\n\n  // map options to menu entries\n  appendOptions.forEach(option => {\n    const {\n      actionName,\n      className,\n      label,\n      target,\n      description,\n      group,\n      search,\n      rank\n    } = option;\n\n    entries[`append-${actionName}`] = {\n      label: label && translate(label),\n      className,\n      description,\n      group: group && {\n        ...group,\n        name: translate(group.name)\n      },\n      search,\n      rank,\n      action: this._createEntryAction(element, target)\n    };\n  });\n\n  return entries;\n};\n\n/**\n * Filter out entries from the options.\n *\n * @param {Array<Object>} entries\n *\n * @return {Array<Object>} filtered entries\n */\nAppendMenuProvider.prototype._filterEntries = function(entries) {\n  return entries.filter(option => {\n\n    const target = option.target;\n    const {\n      type,\n      eventDefinitionType\n    } = target;\n\n    if ([\n      'bpmn:StartEvent',\n      'bpmn:Participant'\n    ].includes(type)) {\n      return false;\n    }\n\n    if (type === 'bpmn:BoundaryEvent' && isUndefined(eventDefinitionType)) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\n/**\n * Create an action for a given target.\n *\n * @param {djs.model.Base} element\n * @param {Object} target\n *\n * @return {Object}\n */\nAppendMenuProvider.prototype._createEntryAction = function(element, target) {\n  const elementFactory = this._elementFactory;\n  const autoPlace = this._autoPlace;\n  const create = this._create;\n  const mouse = this._mouse;\n\n\n  const autoPlaceElement = () => {\n    const newElement = elementFactory.create('shape', target);\n    autoPlace.append(element, newElement);\n  };\n\n  const manualPlaceElement = (event) => {\n    const newElement = elementFactory.create('shape', target);\n\n    if (event instanceof KeyboardEvent) {\n      event = mouse.getLastMoveEvent();\n    }\n\n    return create.start(event, newElement, {\n      source: element\n    });\n  };\n\n  return {\n    click: this._canAutoPlaceElement(target) ? autoPlaceElement : manualPlaceElement,\n    dragstart: manualPlaceElement\n  };\n};\n\n/**\n * Check if the element should be auto placed.\n *\n * @param {Object} target\n *\n * @return {Boolean}\n */\nAppendMenuProvider.prototype._canAutoPlaceElement = (target) => {\n  const { type } = target;\n\n  if (type === 'bpmn:BoundaryEvent') {\n    return false;\n  }\n\n  if (type === 'bpmn:SubProcess' && target.triggeredByEvent) {\n    return false;\n  }\n\n  if (type === 'bpmn:IntermediateCatchEvent' && target.eventDefinitionType === 'bpmn:LinkEventDefinition') {\n    return false;\n  }\n\n  return true;\n};\n\nconst appendIcon = `<svg width=\"22\" height=\"22\" viewBox=\"0 0 5.82 5.82\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\">\n  <path d=\"M1.3 3.4c.3 0 .5-.2.5-.5s-.2-.4-.5-.4c-.2 0-.4.1-.4.4 0 .3.2.5.4.5zM3 3.4c.2 0 .4-.2.4-.5s-.2-.4-.4-.4c-.3 0-.5.1-.5.4 0 .3.2.5.5.5zM4.6 3.4c.2 0 .4-.2.4-.5s-.2-.4-.4-.4c-.3 0-.5.1-.5.4 0 .3.2.5.5.5z\"/>\n</svg>`;\nconst createIcon = `<svg width=\"46\" height=\"46\" viewBox=\"-2 -2 9.82 9.82\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\">\n  <path d=\"M1.3 3.4c.3 0 .5-.2.5-.5s-.2-.4-.5-.4c-.2 0-.4.1-.4.4 0 .3.2.5.4.5zM3 3.4c.2 0 .4-.2.4-.5s-.2-.4-.4-.4c-.3 0-.5.1-.5.4 0 .3.2.5.5.5zM4.6 3.4c.2 0 .4-.2.4-.5s-.2-.4-.4-.4c-.3 0-.5.1-.5.4 0 .3.2.5.5.5z\"/>\n</svg>`;\n\n/**\n * A provider for append context pad button\n */\nfunction AppendContextPadProvider(contextPad, popupMenu, translate, canvas) {\n\n  this._contextPad = contextPad;\n  this._popupMenu = popupMenu;\n  this._translate = translate;\n  this._canvas = canvas;\n\n  this.register();\n}\n\nAppendContextPadProvider.$inject = [\n  'contextPad',\n  'popupMenu',\n  'translate',\n  'canvas'\n];\n\n/**\n * Register append button provider in the context pad\n */\nAppendContextPadProvider.prototype.register = function() {\n  this._contextPad.registerProvider(this);\n};\n\n/**\n * Gets the append context pad entry\n *\n * @param {djs.model.Base} element\n * @returns {Object} entries\n */\nAppendContextPadProvider.prototype.getContextPadEntries = function(element) {\n  const popupMenu = this._popupMenu;\n  const translate = this._translate;\n  const getAppendMenuPosition = this._getAppendMenuPosition.bind(this);\n\n  if (!popupMenu.isEmpty(element, 'bpmn-append')) {\n\n    // append menu entry\n    return {\n      'append': {\n        group: 'model',\n        html: `<div class=\"entry\">${appendIcon}</div>`,\n        title: translate('Append element'),\n        action: {\n          click: function(event, element) {\n\n            const position = assign(getAppendMenuPosition(element), {\n              cursor: { x: event.x, y: event.y }\n            });\n\n            popupMenu.open(element, 'bpmn-append', position, {\n              title: translate('Append element'),\n              width: 300,\n              search: true\n            });\n          }\n        }\n      }\n    };\n  }\n};\n\n/**\n * Calculates the position for the append menu relatively to the element\n *\n * @param {djs.model.Base} element\n * @returns {Object}\n */\nAppendContextPadProvider.prototype._getAppendMenuPosition = function(element) {\n  const contextPad = this._contextPad;\n\n  const X_OFFSET = 5;\n\n  const pad = contextPad.getPad(element).html;\n\n  const padRect = pad.getBoundingClientRect();\n\n  const pos = {\n    x: padRect.right + X_OFFSET,\n    y: padRect.top\n  };\n\n  return pos;\n};\n\nfunction e(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}));}\n\n/**\n * @typedef { import('../model/Types').Element } Element\n * @typedef { import('../model/Types').ModdleElement } ModdleElement\n */\n\n/**\n * Is an element of the given BPMN type?\n *\n * @param  {Element|ModdleElement} element\n * @param  {string} type\n *\n * @return {boolean}\n */\nfunction is(element, type) {\n  var bo = getBusinessObject(element);\n\n  return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);\n}\n\n\n/**\n * Return true if element has any of the given types.\n *\n * @param {Element|ModdleElement} element\n * @param {string[]} types\n *\n * @return {boolean}\n */\nfunction isAny(element, types) {\n  return some(types, function(t) {\n    return is(element, t);\n  });\n}\n\n/**\n * Return the business object for a given element.\n *\n * @param {Element|ModdleElement} element\n *\n * @return {ModdleElement}\n */\nfunction getBusinessObject(element) {\n  return (element && element.businessObject) || element;\n}\n\n/**\n * Return the di object for a given element.\n *\n * @param {Element} element\n *\n * @return {ModdleElement}\n */\nfunction getDi(element) {\n  return element && element.di;\n}\n\n/**\n * Checks whether a value is an instance of Label.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nfunction isLabel(value) {\n  return isObject(value) && has(value, 'labelTarget');\n}\n\n/**\n * @typedef {import('../core/Types').ElementLike} ElementLike\n * @typedef {import('../core/EventBus').default} EventBus\n * @typedef {import('./CommandStack').CommandContext} CommandContext\n *\n * @typedef {string|string[]} Events\n * @typedef { (context: CommandContext) => ElementLike[] | void } HandlerFunction\n * @typedef { (context: CommandContext) => void } ComposeHandlerFunction\n */\n\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A utility that can be used to plug into the command execution for\n * extension and/or validation.\n *\n * @class\n * @constructor\n *\n * @example\n *\n * ```javascript\n * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n *\n * class CommandLogger extends CommandInterceptor {\n *   constructor(eventBus) {\n *     super(eventBus);\n *\n *   this.preExecute('shape.create', (event) => {\n *     console.log('commandStack.shape-create.preExecute', event);\n *   });\n * }\n * ```\n *\n * @param {EventBus} eventBus\n */\nfunction CommandInterceptor(eventBus) {\n\n  /**\n   * @type {EventBus}\n   */\n  this._eventBus = eventBus;\n}\n\nCommandInterceptor.$inject = [ 'eventBus' ];\n\nfunction unwrapEvent(fn, that) {\n  return function(event) {\n    return fn.call(that || null, event.context, event.command, event);\n  };\n}\n\n\n/**\n * Intercept a command during one of the phases.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {string} [hook] phase to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.on = function(events, hook, priority, handlerFn, unwrap, that) {\n\n  if (isFunction(hook) || isNumber(hook)) {\n    that = unwrap;\n    unwrap = handlerFn;\n    handlerFn = priority;\n    priority = hook;\n    hook = null;\n  }\n\n  if (isFunction(priority)) {\n    that = unwrap;\n    unwrap = handlerFn;\n    handlerFn = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  if (isObject(unwrap)) {\n    that = unwrap;\n    unwrap = false;\n  }\n\n  if (!isFunction(handlerFn)) {\n    throw new Error('handlerFn must be a function');\n  }\n\n  if (!isArray(events)) {\n    events = [ events ];\n  }\n\n  var eventBus = this._eventBus;\n\n  forEach(events, function(event) {\n\n    // concat commandStack(.event)?(.hook)?\n    var fullEvent = [ 'commandStack', event, hook ].filter(function(e) { return e; }).join('.');\n\n    eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);\n  });\n};\n\n/**\n * Add a <canExecute> phase of command interceptor.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.canExecute = createHook('canExecute');\n\n/**\n * Add a <preExecute> phase of command interceptor.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.preExecute = createHook('preExecute');\n\n/**\n * Add a <preExecuted> phase of command interceptor.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.preExecuted = createHook('preExecuted');\n\n/**\n * Add a <execute> phase of command interceptor.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.execute = createHook('execute');\n\n/**\n * Add a <executed> phase of command interceptor.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.executed = createHook('executed');\n\n/**\n * Add a <postExecute> phase of command interceptor.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.postExecute = createHook('postExecute');\n\n/**\n * Add a <postExecuted> phase of command interceptor.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.postExecuted = createHook('postExecuted');\n\n/**\n * Add a <revert> phase of command interceptor.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.revert = createHook('revert');\n\n/**\n * Add a <reverted> phase of command interceptor.\n *\n * @param {Events} [events] command(s) to intercept\n * @param {number} [priority]\n * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n * @param {boolean} [unwrap] whether the event should be unwrapped\n * @param {any} [that]\n */\nCommandInterceptor.prototype.reverted = createHook('reverted');\n\n/*\n * Add prototype methods for each phase of command execution (e.g. execute,\n * revert).\n *\n * @param {string} hook\n *\n * @return { (\n *   events?: Events,\n *   priority?: number,\n *   handlerFn: ComposeHandlerFunction|HandlerFunction,\n *   unwrap?: boolean\n * ) => any }\n */\nfunction createHook(hook) {\n\n  /**\n   * @this {CommandInterceptor}\n   *\n   * @param {Events} [events]\n   * @param {number} [priority]\n   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn\n   * @param {boolean} [unwrap]\n   * @param {any} [that]\n   */\n  const hookFn = function(events, priority, handlerFn, unwrap, that) {\n\n    if (isFunction(events) || isNumber(events)) {\n      that = unwrap;\n      unwrap = handlerFn;\n      handlerFn = priority;\n      priority = events;\n      events = null;\n    }\n\n    this.on(events, hook, priority, handlerFn, unwrap, that);\n  };\n\n  return hookFn;\n}\n\n/**\n * @typedef {import('../../core/EventBus').default} EventBus\n */\n\n/**\n * A basic provider that may be extended to implement modeling rules.\n *\n * Extensions should implement the init method to actually add their custom\n * modeling checks. Checks may be added via the #addRule(action, fn) method.\n *\n * @class\n *\n * @param {EventBus} eventBus\n */\nfunction RuleProvider(eventBus) {\n  CommandInterceptor.call(this, eventBus);\n\n  this.init();\n}\n\nRuleProvider.$inject = [ 'eventBus' ];\n\ne(RuleProvider, CommandInterceptor);\n\n\n/**\n * Adds a modeling rule for the given action, implemented through\n * a callback function.\n *\n * The callback receives a modeling specific action context\n * to perform its check. It must return `false` to disallow the\n * action from happening or `true` to allow the action. Usually returing\n * `null` denotes that a particular interaction shall be ignored.\n * By returning nothing or `undefined` you pass evaluation to lower\n * priority rules.\n *\n * @example\n *\n * ```javascript\n * ResizableRules.prototype.init = function() {\n *\n *   \\/**\n *    * Return `true`, `false` or nothing to denote\n *    * _allowed_, _not allowed_ and _continue evaluating_.\n *    *\\/\n *   this.addRule('shape.resize', function(context) {\n *\n *     var shape = context.shape;\n *\n *     if (!context.newBounds) {\n *       // check general resizability\n *       if (!shape.resizable) {\n *         return false;\n *       }\n *\n *       // not returning anything (read: undefined)\n *       // will continue the evaluation of other rules\n *       // (with lower priority)\n *       return;\n *     } else {\n *       // element must have minimum size of 10*10 points\n *       return context.newBounds.width > 10 && context.newBounds.height > 10;\n *     }\n *   });\n * };\n * ```\n *\n * @param {string|string[]} actions the identifier for the modeling action to check\n * @param {number} [priority] the priority at which this rule is being applied\n * @param {(any) => any} fn the callback function that performs the actual check\n */\nRuleProvider.prototype.addRule = function(actions, priority, fn) {\n\n  var self = this;\n\n  if (typeof actions === 'string') {\n    actions = [ actions ];\n  }\n\n  actions.forEach(function(action) {\n\n    self.canExecute(action, priority, function(context, action, event) {\n      return fn(context);\n    }, true);\n  });\n};\n\n/**\n * Implement this method to add new rules during provider initialization.\n */\nRuleProvider.prototype.init = function() {};\n\n/**\n * Append anything modeling rules\n */\nfunction AppendRules(eventBus) {\n  RuleProvider.call(this, eventBus);\n}\n\ne(AppendRules, RuleProvider);\n\nAppendRules.$inject = [\n  'eventBus'\n];\n\nAppendRules.prototype.init = function() {\n  this.addRule('shape.append', function(context) {\n\n    const source = context.element;\n\n    const businessObject = getBusinessObject(source);\n\n    if (isLabel(source)) {\n      return false;\n    }\n\n    if (isAny(source, [\n      'bpmn:EndEvent',\n      'bpmn:Group',\n      'bpmn:TextAnnotation',\n      'bpmn:Lane',\n      'bpmn:Participant',\n      'bpmn:DataStoreReference',\n      'bpmn:DataObjectReference'\n    ])) {\n      return false;\n    }\n\n    if (isConnection(source)) {\n      return false;\n    }\n\n    if (is(source, 'bpmn:IntermediateThrowEvent') && hasEventDefinition(source, 'bpmn:LinkEventDefinition')) {\n      return false;\n    }\n\n    if (is(source, 'bpmn:SubProcess') && businessObject.triggeredByEvent) {\n      return false;\n    }\n  });\n\n};\n\n\n// helpers //////////////\nfunction hasEventDefinition(element, eventDefinition) {\n  const bo = getBusinessObject(element);\n\n  return !!find(bo.eventDefinitions || [], function(definition) {\n    return is(definition, eventDefinition);\n  });\n}\n\nfunction isConnection(element) {\n  return element.waypoints;\n}\n\nvar AppendMenuModule = {\n  __init__: [\n    'appendMenuProvider',\n    'appendContextPadProvider',\n    'appendRules'\n  ],\n  appendMenuProvider: [ 'type', AppendMenuProvider ],\n  appendContextPadProvider: [ 'type', AppendContextPadProvider ],\n  appendRules: [ 'type', AppendRules ]\n};\n\n/**\n * This module is a create menu provider for the popup menu.\n */\nfunction CreateMenuProvider(\n    elementFactory, popupMenu, create,\n    autoPlace, mouse, translate\n) {\n  this._elementFactory = elementFactory;\n  this._popupMenu = popupMenu;\n  this._create = create;\n  this._autoPlace = autoPlace;\n  this._mouse = mouse;\n  this._translate = translate;\n\n  this.register();\n}\n\nCreateMenuProvider.$inject = [\n  'elementFactory',\n  'popupMenu',\n  'create',\n  'autoPlace',\n  'mouse',\n  'translate'\n];\n\n/**\n * Register create menu provider in the popup menu\n */\nCreateMenuProvider.prototype.register = function() {\n  this._popupMenu.registerProvider('bpmn-create', this);\n};\n\n/**\n * Returns the create options as menu entries\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\nCreateMenuProvider.prototype.getPopupMenuEntries = function() {\n\n  const entries = {};\n\n  // map options to menu entries\n  CREATE_OPTIONS.forEach(option => {\n    const {\n      actionName,\n      className,\n      label,\n      target,\n      description,\n      group,\n      search,\n      rank\n    } = option;\n\n    const targetAction = this._createEntryAction(target);\n\n    entries[`create-${actionName}`] = {\n      label: label && this._translate(label),\n      className,\n      description,\n      group: group && {\n        ...group,\n        name: this._translate(group.name)\n      },\n      search,\n      rank,\n      action: {\n        click: targetAction,\n        dragstart: targetAction\n      }\n    };\n  });\n\n  return entries;\n};\n\n/**\n * Create an action for a given target\n *\n * @param {Object} target\n * @returns {Object}\n */\nCreateMenuProvider.prototype._createEntryAction = function(target) {\n\n  const create = this._create;\n  const mouse = this._mouse;\n  const popupMenu = this._popupMenu;\n  const elementFactory = this._elementFactory;\n\n  let newElement;\n\n  return (event) => {\n    popupMenu.close();\n\n    // create the new element\n    if (target.type === 'bpmn:Participant') {\n      newElement = elementFactory.createParticipantShape(target);\n    } else {\n      newElement = elementFactory.create('shape', target);\n    }\n\n    // use last mouse event if triggered via keyboard\n    if (event instanceof KeyboardEvent) {\n      event = mouse.getLastMoveEvent();\n    }\n\n    return create.start(event, newElement);\n  };\n};\n\nvar bugTestDiv;\nif (typeof document !== 'undefined') {\n  bugTestDiv = document.createElement('div');\n  // Setup\n  bugTestDiv.innerHTML = '  <link/><table></table><a href=\"/a\">a</a><input type=\"checkbox\"/>';\n  // Make sure that link elements get serialized correctly by innerHTML\n  // This requires a wrapper element in IE\n  !bugTestDiv.getElementsByTagName('link').length;\n  bugTestDiv = undefined;\n}\n\nfunction query(selector, el) {\n  el = el || document;\n\n  return el.querySelector(selector);\n}\n\nconst LOWER_PRIORITY = 900;\n\n/**\n * A palette provider for the create elements menu.\n */\nfunction CreatePaletteProvider(palette, translate, popupMenu, canvas, mouse) {\n\n  this._palette = palette;\n  this._translate = translate;\n  this._popupMenu = popupMenu;\n  this._canvas = canvas;\n  this._mouse = mouse;\n\n  this.register();\n}\n\nCreatePaletteProvider.$inject = [\n  'palette',\n  'translate',\n  'popupMenu',\n  'canvas',\n  'mouse'\n];\n\n/**\n * Register create button provider in the palette\n */\nCreatePaletteProvider.prototype.register = function() {\n  this._palette.registerProvider(LOWER_PRIORITY, this);\n};\n\n/**\n * Gets the palette create entry\n *\n * @param {djs.model.Base} element\n * @returns {Object}\n */\nCreatePaletteProvider.prototype.getPaletteEntries = function(element) {\n  const translate = this._translate,\n        popupMenu = this._popupMenu,\n        canvas = this._canvas,\n        mouse = this._mouse;\n\n  const getPosition = (event) => {\n    const X_OFFSET = 35;\n    const Y_OFFSET = 10;\n\n    if (event instanceof KeyboardEvent) {\n      event = mouse.getLastMoveEvent();\n      return { x: event.x, y: event.y };\n    }\n\n    const target = event && event.target || query('.djs-palette [data-action=\"create\"]');\n    const targetPosition = target.getBoundingClientRect();\n\n    return target && {\n      x: targetPosition.left + targetPosition.width / 2 + X_OFFSET,\n      y: targetPosition.top + targetPosition.height / 2 + Y_OFFSET\n    };\n  };\n\n  return {\n    'create': {\n      group: 'create',\n      html: `<div class=\"entry\"> ${createIcon}</div>`,\n      title: translate('Create element'),\n      action: {\n        click: function(event) {\n          const position = getPosition(event);\n\n          const element = canvas.getRootElement();\n\n          popupMenu.open(element, 'bpmn-create', position, {\n            title: translate('Create element'),\n            width: 300,\n            search: true\n          });\n        }\n      }\n    }\n  };\n};\n\nvar CreateMenuModule = {\n  __init__: [\n    'createMenuProvider',\n    'createPaletteProvider'\n  ],\n  createMenuProvider: [ 'type', CreateMenuProvider ],\n  createPaletteProvider: [ 'type', CreatePaletteProvider ]\n};\n\n/**\n * Registers and executes BPMN specific editor actions.\n *\n * @param {Injector} injector\n */\nfunction CreateAppendEditorActions(injector) {\n  this._injector = injector;\n\n  this.registerActions();\n}\n\nCreateAppendEditorActions.$inject = [\n  'injector'\n];\n\n/**\n * Register actions.\n *\n * @param {Injector} injector\n */\nCreateAppendEditorActions.prototype.registerActions = function() {\n  const editorActions = this._injector.get('editorActions', false);\n  const selection = this._injector.get('selection', false);\n  const contextPad = this._injector.get('contextPad', false);\n  const palette = this._injector.get('palette', false);\n  const popupMenu = this._injector.get('popupMenu', false);\n\n  const actions = {};\n\n  // append\n  if (selection && contextPad && palette && popupMenu && palette) {\n    assign(actions, {\n      'appendElement': function(event) {\n        const selected = selection && selection.get();\n\n        if (selected.length == 1 && !popupMenu.isEmpty(selected[0], 'bpmn-append')) {\n          contextPad.triggerEntry('append', 'click', event);\n        } else {\n          palette.triggerEntry('create', 'click', event);\n        }\n      }\n    });\n  }\n\n  // create\n  if (palette) {\n    assign(actions, {\n      'createElement': function(event) {\n        palette.triggerEntry('create', 'click', event);\n      } }\n    );\n  }\n\n  editorActions && editorActions.register(actions);\n\n};\n\nvar EditorActionsModule = {\n  __depends__: [\n    AppendMenuModule,\n    CreateMenuModule\n  ],\n  __init__: [\n    'createAppendEditorActions'\n  ],\n  createAppendEditorActions: [ 'type', CreateAppendEditorActions ]\n};\n\nvar KEYS_COPY = [ 'c', 'C' ];\r\nvar KEYS_PASTE = [ 'v', 'V' ];\r\nvar KEYS_REDO = [ 'y', 'Y' ];\r\nvar KEYS_UNDO = [ 'z', 'Z' ];\r\n\r\n/**\r\n * @param {KeyboardEvent} event\r\n * @return {boolean}\r\n */\r\nfunction isCmd(event) {\r\n\r\n  // ensure we don't react to AltGr\r\n  // (mapped to CTRL + ALT)\r\n  if (event.altKey) {\r\n    return false;\r\n  }\r\n\r\n  return event.ctrlKey || event.metaKey;\r\n}\r\n\r\n/**\r\n * Checks if key pressed is one of provided keys.\r\n *\r\n * @param {string|string[]} keys\r\n * @param {KeyboardEvent} event\r\n * @return {boolean}\r\n */\r\nfunction isKey(keys, event) {\r\n  keys = isArray(keys) ? keys : [ keys ];\r\n\r\n  return keys.indexOf(event.key) !== -1 || keys.indexOf(event.code) !== -1;\r\n}\r\n\r\n/**\r\n * @param {KeyboardEvent} event\r\n */\r\nfunction isShift(event) {\r\n  return event.shiftKey;\r\n}\r\n\r\n/**\r\n * @param {KeyboardEvent} event\r\n */\r\nfunction isCopy(event) {\r\n  return isCmd(event) && isKey(KEYS_COPY, event);\r\n}\r\n\r\n/**\r\n * @param {KeyboardEvent} event\r\n */\r\nfunction isPaste(event) {\r\n  return isCmd(event) && isKey(KEYS_PASTE, event);\r\n}\r\n\r\n/**\r\n * @param {KeyboardEvent} event\r\n */\r\nfunction isUndo(event) {\r\n  return isCmd(event) && !isShift(event) && isKey(KEYS_UNDO, event);\r\n}\r\n\r\n/**\r\n * @param {KeyboardEvent} event\r\n */\r\nfunction isRedo(event) {\r\n  return isCmd(event) && (\r\n    isKey(KEYS_REDO, event) || (\r\n      isKey(KEYS_UNDO, event) && isShift(event)\r\n    )\r\n  );\r\n}\n\nvar LOW_PRIORITY = 500;\n\n\n/**\n * Adds default keyboard bindings.\n *\n * This does not pull in any features will bind only actions that\n * have previously been registered against the editorActions component.\n *\n * @param {EventBus} eventBus\n * @param {Keyboard} keyboard\n */\nfunction KeyboardBindings(eventBus, keyboard) {\n\n  var self = this;\n\n  eventBus.on('editorActions.init', LOW_PRIORITY, function(event) {\n\n    var editorActions = event.editorActions;\n\n    self.registerBindings(keyboard, editorActions);\n  });\n}\n\nKeyboardBindings.$inject = [\n  'eventBus',\n  'keyboard'\n];\n\n\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nKeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {\n\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {string} action name\n   * @param {Function} fn that implements the key binding\n   */\n  function addListener(action, fn) {\n\n    if (editorActions.isRegistered(action)) {\n      keyboard.addListener(fn);\n    }\n  }\n\n\n  // undo\n  // (CTRL|CMD) + Z\n  addListener('undo', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isUndo(event)) {\n      editorActions.trigger('undo');\n\n      return true;\n    }\n  });\n\n  // redo\n  // CTRL + Y\n  // CMD + SHIFT + Z\n  addListener('redo', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isRedo(event)) {\n      editorActions.trigger('redo');\n\n      return true;\n    }\n  });\n\n  // copy\n  // CTRL/CMD + C\n  addListener('copy', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isCopy(event)) {\n      editorActions.trigger('copy');\n\n      return true;\n    }\n  });\n\n  // paste\n  // CTRL/CMD + V\n  addListener('paste', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isPaste(event)) {\n      editorActions.trigger('paste');\n\n      return true;\n    }\n  });\n\n  // zoom in one step\n  // CTRL/CMD + +\n  addListener('stepZoom', function(context) {\n\n    var event = context.keyEvent;\n\n    // quirk: it has to be triggered by `=` as well to work on international keyboard layout\n    // cf: https://github.com/bpmn-io/bpmn-js/issues/1362#issuecomment-722989754\n    if (isKey([ '+', 'Add', '=' ], event) && isCmd(event)) {\n      editorActions.trigger('stepZoom', { value: 1 });\n\n      return true;\n    }\n  });\n\n  // zoom out one step\n  // CTRL + -\n  addListener('stepZoom', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isKey([ '-', 'Subtract' ], event) && isCmd(event)) {\n      editorActions.trigger('stepZoom', { value: -1 });\n\n      return true;\n    }\n  });\n\n  // zoom to the default level\n  // CTRL + 0\n  addListener('zoom', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isKey('0', event) && isCmd(event)) {\n      editorActions.trigger('zoom', { value: 1 });\n\n      return true;\n    }\n  });\n\n  // delete selected element\n  // DEL\n  addListener('removeSelection', function(context) {\n\n    var event = context.keyEvent;\n\n    if (isKey([ 'Backspace', 'Delete', 'Del' ], event)) {\n      editorActions.trigger('removeSelection');\n\n      return true;\n    }\n  });\n};\n\n/**\n * BPMN 2.0 specific keyboard bindings.\n *\n * @param {Injector} injector\n */\nfunction CreateAppendKeyboardBindings(injector) {\n\n  this._injector = injector;\n  this._keyboard = this._injector.get('keyboard', false);\n  this._editorActions = this._injector.get('editorActions', false);\n\n  if (this._keyboard) {\n    this._injector.invoke(KeyboardBindings, this);\n  }\n}\n\ne(CreateAppendKeyboardBindings, KeyboardBindings);\n\nCreateAppendKeyboardBindings.$inject = [\n  'injector'\n];\n\n\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nCreateAppendKeyboardBindings.prototype.registerBindings = function() {\n\n  const keyboard = this._keyboard;\n  const editorActions = this._editorActions;\n\n  // inherit default bindings\n  KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);\n\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {string} action name\n   * @param {Function} fn that implements the key binding\n   */\n  function addListener(action, fn) {\n\n    if (editorActions && editorActions.isRegistered(action)) {\n      keyboard && keyboard.addListener(fn);\n    }\n  }\n\n  // activate append/create element\n  // A\n  addListener('appendElement', function(context) {\n\n    const event = context.keyEvent;\n\n    if (keyboard && keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard && keyboard.isKey([ 'a', 'A' ], event)) {\n\n      editorActions && editorActions.trigger('appendElement', event);\n      return true;\n    }\n  });\n\n  // N\n  addListener('createElement', function(context) {\n\n    const event = context.keyEvent;\n\n    if (keyboard && keyboard.hasModifier(event)) {\n      return;\n    }\n\n    if (keyboard && keyboard.isKey([ 'n', 'N' ], event)) {\n      editorActions && editorActions.trigger('createElement', event);\n\n      return true;\n    }\n  });\n\n};\n\nvar KeyboardBindingsModule = {\n  __depends__: [\n    AppendMenuModule,\n    CreateMenuModule\n  ],\n  __init__: [\n    'createAppendKeyboardBindings'\n  ],\n  createAppendKeyboardBindings: [ 'type', CreateAppendKeyboardBindings ]\n};\n\nvar index$1 = {\n  __depends__: [\n    AppendMenuModule,\n    CreateMenuModule,\n    EditorActionsModule,\n    KeyboardBindingsModule\n  ],\n};\n\n/**\n * A popup menu provider that allows to append elements with\n * element templates.\n */\nfunction ElementTemplatesAppendProvider(\n    popupMenu, translate, elementTemplates,\n    autoPlace, create, mouse, rules) {\n\n  this._popupMenu = popupMenu;\n  this._translate = translate;\n  this._elementTemplates = elementTemplates;\n  this._autoPlace = autoPlace;\n  this._create = create;\n  this._mouse = mouse;\n  this._rules = rules;\n\n  this.register();\n}\n\nElementTemplatesAppendProvider.$inject = [\n  'popupMenu',\n  'translate',\n  'elementTemplates',\n  'autoPlace',\n  'create',\n  'move',\n  'rules'\n];\n\n/**\n * Register append menu provider in the popup menu\n */\nElementTemplatesAppendProvider.prototype.register = function() {\n  this._popupMenu.registerProvider('bpmn-append', this);\n};\n\n/**\n * Adds the element templates to the append menu.\n * @param {djs.model.Base} element\n *\n * @returns {Object}\n */\nElementTemplatesAppendProvider.prototype.getPopupMenuEntries = function(element) {\n  return (entries) => {\n\n    if (!this._rules.allowed('shape.append', { element: element })) {\n      return [];\n    }\n\n    const filteredTemplates = this._filterTemplates(this._elementTemplates.getLatest());\n\n    // add template entries\n    assign(entries, this.getTemplateEntries(element, filteredTemplates));\n\n    return entries;\n  };\n};\n\n/**\n * Get all element templates.\n *\n * @param {djs.model.Base} element\n *\n * @return {Object} element templates as menu entries\n */\nElementTemplatesAppendProvider.prototype.getTemplateEntries = function(element, templates) {\n\n  const templateEntries = {};\n\n  templates.map(template => {\n\n    const {\n      icon = {},\n      category,\n    } = template;\n\n    const entryId = `append.template-${template.id}`;\n\n    const defaultGroup = {\n      id: 'templates',\n      name: this._translate('Templates')\n    };\n\n    templateEntries[entryId] = {\n      label: template.name,\n      description: template.description,\n      documentationRef: template.documentationRef,\n      imageUrl: icon.contents,\n      group: category || defaultGroup,\n      action: this._getEntryAction(element, template)\n    };\n  });\n\n  return templateEntries;\n};\n\n/**\n * Filter out templates from the options.\n *\n * @param {Array<Object>} templates\n *\n * @returns {Array<Object>}\n */\nElementTemplatesAppendProvider.prototype._filterTemplates = function(templates) {\n  return templates.filter(template => {\n    const {\n      appliesTo,\n      elementType\n    } = template;\n\n    const type = (elementType && elementType.value) || appliesTo[0];\n\n    // elements that can not be appended\n    if ([\n      'bpmn:StartEvent',\n      'bpmn:Participant'\n    ].includes(type)) {\n      return false;\n    }\n\n    // sequence flow templates are supported\n    // but connections are not appendable\n    if ('bpmn:SequenceFlow' === type) {\n      return false;\n    }\n\n    return true;\n  });\n};\n\n/**\n * Create an action for a given template.\n *\n * @param {djs.model.Base} element\n * @param {Object} template\n *\n * @returns {Object}\n */\nElementTemplatesAppendProvider.prototype._getEntryAction = function(element, template) {\n  return {\n\n    click: () => {\n      const newElement = this._elementTemplates.createElement(template);\n      this._autoPlace.append(element, newElement);\n    },\n\n    dragstart: (event) => {\n      const newElement = this._elementTemplates.createElement(template);\n\n      if (event instanceof KeyboardEvent) {\n        event = this._mouse.getLastMoveEvent();\n      }\n\n      this._create.start(event, newElement, {\n        source: element\n      });\n    }\n  };\n};\n\nvar AppendElementTemplatesModule = {\n  __init__: [ 'elementTemplatesAppendProvider' ],\n  elementTemplatesAppendProvider: [ 'type', ElementTemplatesAppendProvider ]\n};\n\n/**\n * A popup menu provider that allows to create elements with\n * element templates.\n */\nfunction ElementTemplatesCreateProvider(\n    popupMenu, translate,\n    elementTemplates, mouse, create) {\n\n  this._popupMenu = popupMenu;\n  this._translate = translate;\n  this._elementTemplates = elementTemplates;\n  this._mouse = mouse;\n  this._create = create;\n\n  this.register();\n}\n\nElementTemplatesCreateProvider.$inject = [\n  'popupMenu',\n  'translate',\n  'elementTemplates',\n  'mouse',\n  'create'\n];\n\n/**\n * Register create menu provider in the popup menu\n */\nElementTemplatesCreateProvider.prototype.register = function() {\n  this._popupMenu.registerProvider('bpmn-create', this);\n};\n\n/**\n * Adds the element templates to the create menu.\n * @param {djs.model.Base} element\n *\n * @returns {Object}\n */\nElementTemplatesCreateProvider.prototype.getPopupMenuEntries = function(element) {\n  return (entries) => {\n\n    // add template entries\n    assign(entries, this.getTemplateEntries(element));\n\n    return entries;\n  };\n};\n\n/**\n * Get all element templates.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of element templates as menu entries\n */\nElementTemplatesCreateProvider.prototype.getTemplateEntries = function() {\n\n  const templates = this._elementTemplates.getLatest();\n  const templateEntries = {};\n\n  templates.map(template => {\n\n    const {\n      icon = {},\n      category,\n    } = template;\n\n    const entryId = `create.template-${template.id}`;\n\n    const defaultGroup = {\n      id: 'templates',\n      name: this._translate('Templates')\n    };\n\n    templateEntries[entryId] = {\n      label: template.name,\n      description: template.description,\n      documentationRef: template.documentationRef,\n      imageUrl: icon.contents,\n      group: category || defaultGroup,\n      action: {\n        click: this._getEntryAction(template),\n        dragstart: this._getEntryAction(template)\n      }\n    };\n  });\n\n  return templateEntries;\n};\n\n\nElementTemplatesCreateProvider.prototype._getEntryAction = function(template) {\n  const create = this._create;\n  const popupMenu = this._popupMenu;\n  const elementTemplates = this._elementTemplates;\n  const mouse = this._mouse;\n\n  return (event) => {\n\n    popupMenu.close();\n\n    // create the new element\n    let newElement = elementTemplates.createElement(template);\n\n    // use last mouse event if triggered via keyboard\n    if (event instanceof KeyboardEvent) {\n      event = mouse.getLastMoveEvent();\n    }\n\n    return create.start(event, newElement);\n  };\n};\n\nvar CreateElementTemplatesModule = {\n  __init__: [ 'elementTemplatesCreateProvider' ],\n  elementTemplatesCreateProvider: [ 'type', ElementTemplatesCreateProvider ]\n};\n\n/**\n * A replace menu provider that allows to replace elements with\n * element templates.\n */\nfunction ElementTemplatesReplaceProvider(popupMenu, translate, elementTemplates) {\n\n  this._popupMenu = popupMenu;\n  this._translate = translate;\n  this._elementTemplates = elementTemplates;\n\n  this.register();\n}\n\nElementTemplatesReplaceProvider.$inject = [\n  'popupMenu',\n  'translate',\n  'elementTemplates'\n];\n\n/**\n * Register replace menu provider in the popup menu\n */\nElementTemplatesReplaceProvider.prototype.register = function() {\n  this._popupMenu.registerProvider('bpmn-replace', this);\n};\n\n/**\n * Adds the element templates to the replace menu.\n * @param {djs.model.Base} element\n *\n * @returns {Object}\n */\nElementTemplatesReplaceProvider.prototype.getPopupMenuEntries = function(element) {\n\n  return (entries) => {\n\n    // convert our entries into something sortable\n    let entrySet = Object.entries(entries);\n\n    // add template entries\n    entrySet = [ ...entrySet, ...this.getTemplateEntries(element) ];\n\n    // convert back to object\n    return entrySet.reduce((entries, [ key, value ]) => {\n      entries[key] = value;\n\n      return entries;\n    }, {});\n  };\n};\n\n/**\n * Get all element templates that can be used to replace the given element.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of element templates as menu entries\n */\nElementTemplatesReplaceProvider.prototype.getTemplateEntries = function(element) {\n\n  const templates = this._getMatchingTemplates(element);\n  return templates.map(template => {\n\n    const {\n      icon = {},\n      category,\n    } = template;\n\n    const entryId = `replace.template-${template.id}`;\n\n    const defaultGroup = {\n      id: 'templates',\n      name: this._translate('Templates')\n    };\n\n    return [ entryId, {\n      label: template.name,\n      description: template.description,\n      documentationRef: template.documentationRef,\n      imageUrl: icon.contents,\n      group: category || defaultGroup,\n      action: () => {\n        this._elementTemplates.applyTemplate(element, template);\n      }\n    } ];\n  });\n};\n\n/**\n * Returns the templates that can the element can be replaced with.\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array<ElementTemplate>}\n */\nElementTemplatesReplaceProvider.prototype._getMatchingTemplates = function(element) {\n  return this._elementTemplates.getLatest().filter(template => {\n    return isAny(element, template.appliesTo) && !isTemplateApplied(element, template);\n  });\n};\n\n\n// helpers ////////////\nfunction isTemplateApplied(element, template) {\n  const businessObject = getBusinessObject(element);\n\n  if (businessObject) {\n    return businessObject.get('zeebe:modelerTemplate') === template.id;\n  }\n\n  return false;\n}\n\nvar ReplaceElementTemplatesModule = {\n  __init__: [\n    'elementTemplatesReplaceProvider'\n  ],\n  elementTemplatesReplaceProvider: [ 'type', ElementTemplatesReplaceProvider ]\n};\n\n/**\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').ModdleElement} ModdleElement\n */\n\n/**\n * @param {Element} element\n * @param {ModdleElement} [di]\n *\n * @return {boolean}\n */\nfunction isExpanded(element, di) {\n\n  if (is(element, 'bpmn:CallActivity')) {\n    return false;\n  }\n\n  if (is(element, 'bpmn:SubProcess')) {\n    di = di || getDi(element);\n\n    if (di && is(di, 'bpmndi:BPMNPlane')) {\n      return true;\n    }\n\n    return di && !!di.isExpanded;\n  }\n\n  if (is(element, 'bpmn:Participant')) {\n    return !!getBusinessObject(element).processRef;\n  }\n\n  return true;\n}\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').PopupMenuTarget} PopupMenuTarget\n *\n * @typedef {(entry: PopupMenuTarget) => boolean} DifferentTypeValidator\n */\n\n/**\n * Returns true, if an element is from a different type\n * than a target definition. Takes into account the type,\n * event definition type and triggeredByEvent property.\n *\n * @param {Element} element\n *\n * @return {DifferentTypeValidator}\n */\nfunction isDifferentType(element) {\n\n  return function(entry) {\n    var target = entry.target;\n\n    var businessObject = getBusinessObject(element),\n        eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];\n\n    var isTypeEqual = businessObject.$type === target.type;\n\n    var isEventDefinitionEqual = (\n      (eventDefinition && eventDefinition.$type) === target.eventDefinitionType\n    );\n\n    var isTriggeredByEventEqual = (\n\n      // coherse to <false>\n      !!target.triggeredByEvent === !!businessObject.triggeredByEvent\n    );\n\n    var isExpandedEqual = (\n      target.isExpanded === undefined ||\n      target.isExpanded === isExpanded(element)\n    );\n\n    return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;\n  };\n}\n\n/**\n * @typedef { () => string } LabelGetter\n *\n * @typedef { {\n *   label: string | LabelGetter;\n *   actionName: string;\n *   className: string;\n *   target?: {\n *     type: string;\n *     isExpanded?: boolean;\n *     isInterrupting?: boolean;\n *     triggeredByEvent?: boolean;\n *     cancelActivity?: boolean;\n *     eventDefinitionType?: string;\n *     eventDefinitionAttrs?: Record<string, any>\n *   };\n * } } ReplaceOption\n */\n\n/**\n * @type {ReplaceOption[]}\n */\nvar START_EVENT = [\n  {\n    label: 'Start Event',\n    actionName: 'replace-with-none-start',\n    className: 'bpmn-icon-start-event-none',\n    target: {\n      type: 'bpmn:StartEvent'\n    }\n  },\n  {\n    label: 'Intermediate Throw Event',\n    actionName: 'replace-with-none-intermediate-throwing',\n    className: 'bpmn-icon-intermediate-event-none',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent'\n    }\n  },\n  {\n    label: 'End Event',\n    actionName: 'replace-with-none-end',\n    className: 'bpmn-icon-end-event-none',\n    target: {\n      type: 'bpmn:EndEvent'\n    }\n  },\n  {\n    label: 'Message Start Event',\n    actionName: 'replace-with-message-start',\n    className: 'bpmn-icon-start-event-message',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Timer Start Event',\n    actionName: 'replace-with-timer-start',\n    className: 'bpmn-icon-start-event-timer',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition'\n    }\n  },\n  {\n    label: 'Conditional Start Event',\n    actionName: 'replace-with-conditional-start',\n    className: 'bpmn-icon-start-event-condition',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n    }\n  },\n  {\n    label: 'Signal Start Event',\n    actionName: 'replace-with-signal-start',\n    className: 'bpmn-icon-start-event-signal',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar START_EVENT_SUB_PROCESS = [\n  {\n    label: 'Start Event',\n    actionName: 'replace-with-none-start',\n    className: 'bpmn-icon-start-event-none',\n    target: {\n      type: 'bpmn:StartEvent'\n    }\n  },\n  {\n    label: 'Intermediate Throw Event',\n    actionName: 'replace-with-none-intermediate-throwing',\n    className: 'bpmn-icon-intermediate-event-none',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent'\n    }\n  },\n  {\n    label: 'End Event',\n    actionName: 'replace-with-none-end',\n    className: 'bpmn-icon-end-event-none',\n    target: {\n      type: 'bpmn:EndEvent'\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar INTERMEDIATE_EVENT = [\n  {\n    label: 'Start Event',\n    actionName: 'replace-with-none-start',\n    className: 'bpmn-icon-start-event-none',\n    target: {\n      type: 'bpmn:StartEvent'\n    }\n  },\n  {\n    label: 'Intermediate Throw Event',\n    actionName: 'replace-with-none-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-none',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent'\n    }\n  },\n  {\n    label: 'End Event',\n    actionName: 'replace-with-none-end',\n    className: 'bpmn-icon-end-event-none',\n    target: {\n      type: 'bpmn:EndEvent'\n    }\n  },\n  {\n    label: 'Message Intermediate Catch Event',\n    actionName: 'replace-with-message-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-message',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Message Intermediate Throw Event',\n    actionName: 'replace-with-message-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-message',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Timer Intermediate Catch Event',\n    actionName: 'replace-with-timer-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-timer',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition'\n    }\n  },\n  {\n    label: 'Escalation Intermediate Throw Event',\n    actionName: 'replace-with-escalation-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-escalation',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n    }\n  },\n  {\n    label: 'Conditional Intermediate Catch Event',\n    actionName: 'replace-with-conditional-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-condition',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n    }\n  },\n  {\n    label: 'Link Intermediate Catch Event',\n    actionName: 'replace-with-link-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-link',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:LinkEventDefinition',\n      eventDefinitionAttrs: {\n        name: ''\n      }\n    }\n  },\n  {\n    label: 'Link Intermediate Throw Event',\n    actionName: 'replace-with-link-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-link',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:LinkEventDefinition',\n      eventDefinitionAttrs: {\n        name: ''\n      }\n    }\n  },\n  {\n    label: 'Compensation Intermediate Throw Event',\n    actionName: 'replace-with-compensation-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-compensation',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n    }\n  },\n  {\n    label: 'Signal Intermediate Catch Event',\n    actionName: 'replace-with-signal-intermediate-catch',\n    className: 'bpmn-icon-intermediate-event-catch-signal',\n    target: {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  },\n  {\n    label: 'Signal Intermediate Throw Event',\n    actionName: 'replace-with-signal-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-throw-signal',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar END_EVENT = [\n  {\n    label: 'Start Event',\n    actionName: 'replace-with-none-start',\n    className: 'bpmn-icon-start-event-none',\n    target: {\n      type: 'bpmn:StartEvent'\n    }\n  },\n  {\n    label: 'Intermediate Throw Event',\n    actionName: 'replace-with-none-intermediate-throw',\n    className: 'bpmn-icon-intermediate-event-none',\n    target: {\n      type: 'bpmn:IntermediateThrowEvent'\n    }\n  },\n  {\n    label: 'End Event',\n    actionName: 'replace-with-none-end',\n    className: 'bpmn-icon-end-event-none',\n    target: {\n      type: 'bpmn:EndEvent'\n    }\n  },\n  {\n    label: 'Message End Event',\n    actionName: 'replace-with-message-end',\n    className: 'bpmn-icon-end-event-message',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Escalation End Event',\n    actionName: 'replace-with-escalation-end',\n    className: 'bpmn-icon-end-event-escalation',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n    }\n  },\n  {\n    label: 'Error End Event',\n    actionName: 'replace-with-error-end',\n    className: 'bpmn-icon-end-event-error',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:ErrorEventDefinition'\n    }\n  },\n  {\n    label: 'Cancel End Event',\n    actionName: 'replace-with-cancel-end',\n    className: 'bpmn-icon-end-event-cancel',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:CancelEventDefinition'\n    }\n  },\n  {\n    label: 'Compensation End Event',\n    actionName: 'replace-with-compensation-end',\n    className: 'bpmn-icon-end-event-compensation',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n    }\n  },\n  {\n    label: 'Signal End Event',\n    actionName: 'replace-with-signal-end',\n    className: 'bpmn-icon-end-event-signal',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  },\n  {\n    label: 'Terminate End Event',\n    actionName: 'replace-with-terminate-end',\n    className: 'bpmn-icon-end-event-terminate',\n    target: {\n      type: 'bpmn:EndEvent',\n      eventDefinitionType: 'bpmn:TerminateEventDefinition'\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar GATEWAY = [\n  {\n    label: 'Exclusive Gateway',\n    actionName: 'replace-with-exclusive-gateway',\n    className: 'bpmn-icon-gateway-xor',\n    target: {\n      type: 'bpmn:ExclusiveGateway'\n    }\n  },\n  {\n    label: 'Parallel Gateway',\n    actionName: 'replace-with-parallel-gateway',\n    className: 'bpmn-icon-gateway-parallel',\n    target: {\n      type: 'bpmn:ParallelGateway'\n    }\n  },\n  {\n    label: 'Inclusive Gateway',\n    actionName: 'replace-with-inclusive-gateway',\n    className: 'bpmn-icon-gateway-or',\n    target: {\n      type: 'bpmn:InclusiveGateway'\n    }\n  },\n  {\n    label: 'Complex Gateway',\n    actionName: 'replace-with-complex-gateway',\n    className: 'bpmn-icon-gateway-complex',\n    target: {\n      type: 'bpmn:ComplexGateway'\n    }\n  },\n  {\n    label: 'Event based Gateway',\n    actionName: 'replace-with-event-based-gateway',\n    className: 'bpmn-icon-gateway-eventbased',\n    target: {\n      type: 'bpmn:EventBasedGateway',\n      instantiate: false,\n      eventGatewayType: 'Exclusive'\n    }\n  }\n\n  // Gateways deactivated until https://github.com/bpmn-io/bpmn-js/issues/194\n  // {\n  //   label: 'Event based instantiating Gateway',\n  //   actionName: 'replace-with-exclusive-event-based-gateway',\n  //   className: 'bpmn-icon-exclusive-event-based',\n  //   target: {\n  //     type: 'bpmn:EventBasedGateway'\n  //   },\n  //   options: {\n  //     businessObject: { instantiate: true, eventGatewayType: 'Exclusive' }\n  //   }\n  // },\n  // {\n  //   label: 'Parallel Event based instantiating Gateway',\n  //   actionName: 'replace-with-parallel-event-based-instantiate-gateway',\n  //   className: 'bpmn-icon-parallel-event-based-instantiate-gateway',\n  //   target: {\n  //     type: 'bpmn:EventBasedGateway'\n  //   },\n  //   options: {\n  //     businessObject: { instantiate: true, eventGatewayType: 'Parallel' }\n  //   }\n  // }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar SUBPROCESS_EXPANDED = [\n  {\n    label: 'Transaction',\n    actionName: 'replace-with-transaction',\n    className: 'bpmn-icon-transaction',\n    target: {\n      type: 'bpmn:Transaction',\n      isExpanded: true\n    }\n  },\n  {\n    label: 'Event Sub Process',\n    actionName: 'replace-with-event-subprocess',\n    className: 'bpmn-icon-event-subprocess-expanded',\n    target: {\n      type: 'bpmn:SubProcess',\n      triggeredByEvent: true,\n      isExpanded: true\n    }\n  },\n  {\n    label: 'Sub Process (collapsed)',\n    actionName: 'replace-with-collapsed-subprocess',\n    className: 'bpmn-icon-subprocess-collapsed',\n    target: {\n      type: 'bpmn:SubProcess',\n      isExpanded: false\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar TRANSACTION = [\n  {\n    label: 'Transaction',\n    actionName: 'replace-with-transaction',\n    className: 'bpmn-icon-transaction',\n    target: {\n      type: 'bpmn:Transaction',\n      isExpanded: true\n    }\n  },\n  {\n    label: 'Sub Process',\n    actionName: 'replace-with-subprocess',\n    className: 'bpmn-icon-subprocess-expanded',\n    target: {\n      type: 'bpmn:SubProcess',\n      isExpanded: true\n    }\n  },\n  {\n    label: 'Event Sub Process',\n    actionName: 'replace-with-event-subprocess',\n    className: 'bpmn-icon-event-subprocess-expanded',\n    target: {\n      type: 'bpmn:SubProcess',\n      triggeredByEvent: true,\n      isExpanded: true\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar EVENT_SUB_PROCESS = TRANSACTION;\n\n/**\n * @type {ReplaceOption[]}\n */\nvar TASK = [\n  {\n    label: 'Task',\n    actionName: 'replace-with-task',\n    className: 'bpmn-icon-task',\n    target: {\n      type: 'bpmn:Task'\n    }\n  },\n  {\n    label: 'User Task',\n    actionName: 'replace-with-user-task',\n    className: 'bpmn-icon-user',\n    target: {\n      type: 'bpmn:UserTask'\n    }\n  },\n  {\n    label: 'Service Task',\n    actionName: 'replace-with-service-task',\n    className: 'bpmn-icon-service',\n    target: {\n      type: 'bpmn:ServiceTask'\n    }\n  },\n  {\n    label: 'Send Task',\n    actionName: 'replace-with-send-task',\n    className: 'bpmn-icon-send',\n    target: {\n      type: 'bpmn:SendTask'\n    }\n  },\n  {\n    label: 'Receive Task',\n    actionName: 'replace-with-receive-task',\n    className: 'bpmn-icon-receive',\n    target: {\n      type: 'bpmn:ReceiveTask'\n    }\n  },\n  {\n    label: 'Manual Task',\n    actionName: 'replace-with-manual-task',\n    className: 'bpmn-icon-manual',\n    target: {\n      type: 'bpmn:ManualTask'\n    }\n  },\n  {\n    label: 'Business Rule Task',\n    actionName: 'replace-with-rule-task',\n    className: 'bpmn-icon-business-rule',\n    target: {\n      type: 'bpmn:BusinessRuleTask'\n    }\n  },\n  {\n    label: 'Script Task',\n    actionName: 'replace-with-script-task',\n    className: 'bpmn-icon-script',\n    target: {\n      type: 'bpmn:ScriptTask'\n    }\n  },\n  {\n    label: 'Call Activity',\n    actionName: 'replace-with-call-activity',\n    className: 'bpmn-icon-call-activity',\n    target: {\n      type: 'bpmn:CallActivity'\n    }\n  },\n  {\n    label: 'Sub Process (collapsed)',\n    actionName: 'replace-with-collapsed-subprocess',\n    className: 'bpmn-icon-subprocess-collapsed',\n    target: {\n      type: 'bpmn:SubProcess',\n      isExpanded: false\n    }\n  },\n  {\n    label: 'Sub Process (expanded)',\n    actionName: 'replace-with-expanded-subprocess',\n    className: 'bpmn-icon-subprocess-expanded',\n    target: {\n      type: 'bpmn:SubProcess',\n      isExpanded: true\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar DATA_OBJECT_REFERENCE = [\n  {\n    label: 'Data Store Reference',\n    actionName: 'replace-with-data-store-reference',\n    className: 'bpmn-icon-data-store',\n    target: {\n      type: 'bpmn:DataStoreReference'\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar DATA_STORE_REFERENCE = [\n  {\n    label: 'Data Object Reference',\n    actionName: 'replace-with-data-object-reference',\n    className: 'bpmn-icon-data-object',\n    target: {\n      type: 'bpmn:DataObjectReference'\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar BOUNDARY_EVENT = [\n  {\n    label: 'Message Boundary Event',\n    actionName: 'replace-with-message-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-message',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Timer Boundary Event',\n    actionName: 'replace-with-timer-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-timer',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition'\n    }\n  },\n  {\n    label: 'Escalation Boundary Event',\n    actionName: 'replace-with-escalation-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-escalation',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n    }\n  },\n  {\n    label: 'Conditional Boundary Event',\n    actionName: 'replace-with-conditional-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-condition',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n    }\n  },\n  {\n    label: 'Error Boundary Event',\n    actionName: 'replace-with-error-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-error',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:ErrorEventDefinition'\n    }\n  },\n  {\n    label: 'Cancel Boundary Event',\n    actionName: 'replace-with-cancel-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-cancel',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:CancelEventDefinition'\n    }\n  },\n  {\n    label: 'Signal Boundary Event',\n    actionName: 'replace-with-signal-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-signal',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  },\n  {\n    label: 'Compensation Boundary Event',\n    actionName: 'replace-with-compensation-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-compensation',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n    }\n  },\n  {\n    label: 'Message Boundary Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-message-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-message',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition',\n      cancelActivity: false\n    }\n  },\n  {\n    label: 'Timer Boundary Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-timer-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-timer',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition',\n      cancelActivity: false\n    }\n  },\n  {\n    label: 'Escalation Boundary Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-escalation-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-escalation',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition',\n      cancelActivity: false\n    }\n  },\n  {\n    label: 'Conditional Boundary Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-conditional-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-condition',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition',\n      cancelActivity: false\n    }\n  },\n  {\n    label: 'Signal Boundary Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-signal-boundary',\n    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-signal',\n    target: {\n      type: 'bpmn:BoundaryEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition',\n      cancelActivity: false\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar EVENT_SUB_PROCESS_START_EVENT = [\n  {\n    label: 'Message Start Event',\n    actionName: 'replace-with-message-start',\n    className: 'bpmn-icon-start-event-message',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition'\n    }\n  },\n  {\n    label: 'Timer Start Event',\n    actionName: 'replace-with-timer-start',\n    className: 'bpmn-icon-start-event-timer',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition'\n    }\n  },\n  {\n    label: 'Conditional Start Event',\n    actionName: 'replace-with-conditional-start',\n    className: 'bpmn-icon-start-event-condition',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n    }\n  },\n  {\n    label: 'Signal Start Event',\n    actionName: 'replace-with-signal-start',\n    className: 'bpmn-icon-start-event-signal',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition'\n    }\n  },\n  {\n    label: 'Error Start Event',\n    actionName: 'replace-with-error-start',\n    className: 'bpmn-icon-start-event-error',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:ErrorEventDefinition'\n    }\n  },\n  {\n    label: 'Escalation Start Event',\n    actionName: 'replace-with-escalation-start',\n    className: 'bpmn-icon-start-event-escalation',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition'\n    }\n  },\n  {\n    label: 'Compensation Start Event',\n    actionName: 'replace-with-compensation-start',\n    className: 'bpmn-icon-start-event-compensation',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:CompensateEventDefinition'\n    }\n  },\n  {\n    label: 'Message Start Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-message-start',\n    className: 'bpmn-icon-start-event-non-interrupting-message',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:MessageEventDefinition',\n      isInterrupting: false\n    }\n  },\n  {\n    label: 'Timer Start Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-timer-start',\n    className: 'bpmn-icon-start-event-non-interrupting-timer',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:TimerEventDefinition',\n      isInterrupting: false\n    }\n  },\n  {\n    label: 'Conditional Start Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-conditional-start',\n    className: 'bpmn-icon-start-event-non-interrupting-condition',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:ConditionalEventDefinition',\n      isInterrupting: false\n    }\n  },\n  {\n    label: 'Signal Start Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-signal-start',\n    className: 'bpmn-icon-start-event-non-interrupting-signal',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:SignalEventDefinition',\n      isInterrupting: false\n    }\n  },\n  {\n    label: 'Escalation Start Event (non-interrupting)',\n    actionName: 'replace-with-non-interrupting-escalation-start',\n    className: 'bpmn-icon-start-event-non-interrupting-escalation',\n    target: {\n      type: 'bpmn:StartEvent',\n      eventDefinitionType: 'bpmn:EscalationEventDefinition',\n      isInterrupting: false\n    }\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar SEQUENCE_FLOW = [\n  {\n    label: 'Sequence Flow',\n    actionName: 'replace-with-sequence-flow',\n    className: 'bpmn-icon-connection'\n  },\n  {\n    label: 'Default Flow',\n    actionName: 'replace-with-default-flow',\n    className: 'bpmn-icon-default-flow'\n  },\n  {\n    label: 'Conditional Flow',\n    actionName: 'replace-with-conditional-flow',\n    className: 'bpmn-icon-conditional-flow'\n  }\n];\n\n/**\n * @type {ReplaceOption[]}\n */\nvar PARTICIPANT = [\n  {\n    label: 'Expanded Pool',\n    actionName: 'replace-with-expanded-pool',\n    className: 'bpmn-icon-participant',\n    target: {\n      type: 'bpmn:Participant',\n      isExpanded: true\n    }\n  },\n  {\n    label: function(element) {\n      var label = 'Empty Pool';\n\n      if (element.children && element.children.length) {\n        label += ' (removes content)';\n      }\n\n      return label;\n    },\n    actionName: 'replace-with-collapsed-pool',\n\n    // TODO(@janstuemmel): maybe design new icon\n    className: 'bpmn-icon-lane',\n    target: {\n      type: 'bpmn:Participant',\n      isExpanded: false\n    }\n  }\n];\n\nvar replaceOptions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BOUNDARY_EVENT: BOUNDARY_EVENT,\n  DATA_OBJECT_REFERENCE: DATA_OBJECT_REFERENCE,\n  DATA_STORE_REFERENCE: DATA_STORE_REFERENCE,\n  END_EVENT: END_EVENT,\n  EVENT_SUB_PROCESS: EVENT_SUB_PROCESS,\n  EVENT_SUB_PROCESS_START_EVENT: EVENT_SUB_PROCESS_START_EVENT,\n  GATEWAY: GATEWAY,\n  INTERMEDIATE_EVENT: INTERMEDIATE_EVENT,\n  PARTICIPANT: PARTICIPANT,\n  SEQUENCE_FLOW: SEQUENCE_FLOW,\n  START_EVENT: START_EVENT,\n  START_EVENT_SUB_PROCESS: START_EVENT_SUB_PROCESS,\n  SUBPROCESS_EXPANDED: SUBPROCESS_EXPANDED,\n  TASK: TASK,\n  TRANSACTION: TRANSACTION\n});\n\nconst ALL_OPTIONS = Object.values(replaceOptions);\n\nfunction getReplaceOptionGroups() {\n  return ALL_OPTIONS;\n}\n\n/**\n * A replace menu provider that allows to replace elements with\n * templates applied with the correspondent plain element.\n */\nfunction RemoveTemplateReplaceProvider(popupMenu, translate, elementTemplates) {\n\n  this._popupMenu = popupMenu;\n  this._translate = translate;\n  this._elementTemplates = elementTemplates;\n\n  this.register();\n}\n\nRemoveTemplateReplaceProvider.$inject = [\n  'popupMenu',\n  'translate',\n  'elementTemplates'\n];\n\n/**\n * Register replace menu provider in the popup menu\n */\nRemoveTemplateReplaceProvider.prototype.register = function() {\n  this._popupMenu.registerProvider('bpmn-replace', this);\n};\n\n/**\n * Adds the element templates to the replace menu.\n * @param {djs.model.Base} element\n *\n * @returns {Object}\n */\nRemoveTemplateReplaceProvider.prototype.getPopupMenuEntries = function(element) {\n\n  return (entries) => {\n\n    // convert our entries into something sortable\n    let entrySet = Object.entries(entries);\n\n    if (this._elementTemplates && this._elementTemplates.get(element)) {\n\n      // add remove template option\n      this.addPlainElementEntry(element, entrySet, this._translate, this._elementTemplates);\n    }\n\n    // convert back to object\n    return entrySet.reduce((entries, [ key, value ]) => {\n      entries[key] = value;\n\n      return entries;\n    }, {});\n  };\n};\n\n\n/**\n * Adds the option to replace with plain element (remove template).\n *\n * @param {djs.model.Base} element\n * @param {Array<Object>} entries\n */\nRemoveTemplateReplaceProvider.prototype.addPlainElementEntry = function(element, entries, translate, elementTemplates) {\n\n  const replaceOption = this.getPlainEntry(element, entries, translate, elementTemplates);\n\n  if (!replaceOption) {\n    return;\n  }\n\n  const [\n    insertIndex,\n    entry\n  ] = replaceOption;\n\n  // insert remove entry\n  entries.splice(insertIndex, 0, [ entry.id, entry ]);\n};\n\n/**\n * Returns the option to replace with plain element and the index where it should be inserted.\n *\n * @param {djs.model.Base} element\n * @param {Array<Object>} entries\n *\n * @returns {Array<Object, number>}\n */\nRemoveTemplateReplaceProvider.prototype.getPlainEntry = function(element, entries, translate, elementTemplates) {\n\n  const {\n    options,\n    option,\n    optionIndex\n  } = findReplaceOptions(element) || { };\n\n  if (!options) {\n    return null;\n  }\n\n  const entry = {\n    id: 'replace-remove-element-template',\n    action: () => {\n      elementTemplates.removeTemplate(element);\n    },\n    label: translate(option.label),\n    className: option.className\n  };\n\n  // insert after previous option, if it exists\n  const previousIndex = getOptionIndex(options, optionIndex - 1, entries);\n\n  if (previousIndex) {\n    return [\n      previousIndex + 1,\n      entry\n    ];\n  }\n\n  // insert before next option, if it exists\n  const nextIndex = getOptionIndex(options, optionIndex + 1, entries);\n\n  if (nextIndex) {\n    return [\n      nextIndex,\n      entry\n    ];\n  }\n\n  // fallback to insert at start\n  return [\n    0,\n    entry\n  ];\n};\n\n\n/**\n * @param {ModdleElement} element\n *\n * @return { { options: Array<any>, option: any, optionIndex: number } | null }\n */\nfunction findReplaceOptions(element) {\n\n  const isSameType = (element, option) => option.target && !isDifferentType(element)(option);\n\n  return getReplaceOptionGroups().reduce((result, options) => {\n\n    if (result) {\n      return result;\n    }\n\n    const optionIndex = options.findIndex(option => isSameType(element, option));\n\n    if (optionIndex === -1) {\n      return;\n    }\n\n    return {\n      options,\n      option: options[optionIndex],\n      optionIndex\n    };\n  }, null);\n}\n\nfunction getOptionIndex(options, index, entries) {\n  const option = options[index];\n\n  if (!option) {\n    return false;\n  }\n\n  return entries.findIndex(\n    ([ key ]) => key === option.actionName\n  );\n}\n\nvar RemoveTemplatesModule = {\n  __init__: [ 'removeTemplateReplaceProvider' ],\n  removeTemplateReplaceProvider: [ 'type', RemoveTemplateReplaceProvider ]\n};\n\nvar index = {\n  __depends__: [\n    AppendElementTemplatesModule,\n    CreateElementTemplatesModule,\n    ReplaceElementTemplatesModule,\n    RemoveTemplatesModule\n  ]\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bpmn-js-create-append-anything/dist/index.es.js\n");

/***/ }),

/***/ "./node_modules/diagram-js-grid/dist/index.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/diagram-js-grid/dist/index.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ index)\n/* harmony export */ });\n/* harmony import */ var tiny_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tiny-svg */ \"./node_modules/tiny-svg/dist/index.esm.js\");\n/* harmony import */ var min_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dom */ \"./node_modules/min-dom/dist/index.esm.js\");\n/* harmony import */ var diagram_js_lib_features_grid_snapping_GridUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! diagram-js/lib/features/grid-snapping/GridUtil */ \"./node_modules/diagram-js/lib/features/grid-snapping/GridUtil.js\");\n/* harmony import */ var diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! diagram-js/lib/layout/LayoutUtil */ \"./node_modules/diagram-js/lib/layout/LayoutUtil.js\");\n\n\n\n\n\n/**\r\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\r\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\r\n */\r\n\r\nvar GRID_COLOR = '#ccc',\r\n    LAYER_NAME = 'djs-grid';\r\n\r\nvar GRID_DIMENSIONS = {\r\n  width: 100000,\r\n  height: 100000\r\n};\r\n\r\n/**\r\n * @param {Canvas} canvas\r\n * @param {EventBus} eventBus\r\n */\r\nfunction Grid(canvas, eventBus) {\r\n  this._canvas = canvas;\r\n\r\n  this._visible = false;\r\n\r\n  var self = this;\r\n\r\n  eventBus.on('diagram.init', function() {\r\n    self._init();\r\n  });\r\n\r\n  eventBus.on('gridSnapping.toggle', function(event) {\r\n    var active = event.active;\r\n\r\n    self.toggle(active);\r\n\r\n    self._centerGridAroundViewbox();\r\n  });\r\n\r\n  eventBus.on('canvas.viewbox.changed', function(context) {\r\n    var viewbox = context.viewbox;\r\n\r\n    self._centerGridAroundViewbox(viewbox);\r\n  });\r\n}\r\n\r\nGrid.prototype._init = function() {\r\n  var defs = (0,min_dom__WEBPACK_IMPORTED_MODULE_0__.query)('defs', this._canvas._svg);\r\n\r\n  if (!defs) {\r\n    defs = (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.create)('defs');\r\n\r\n    (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.append)(this._canvas._svg, defs);\r\n  }\r\n\r\n  var pattern = this._pattern = (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.create)('pattern');\r\n\r\n  var patternId = 'djs-grid-pattern-' + randomNumber();\r\n\r\n  (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.attr)(pattern, {\r\n    id: patternId,\r\n    width: diagram_js_lib_features_grid_snapping_GridUtil__WEBPACK_IMPORTED_MODULE_2__.SPACING,\r\n    height: diagram_js_lib_features_grid_snapping_GridUtil__WEBPACK_IMPORTED_MODULE_2__.SPACING,\r\n    patternUnits: 'userSpaceOnUse'\r\n  });\r\n\r\n  var circle = this._circle = (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.create)('circle');\r\n\r\n  (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.attr)(circle, {\r\n    cx: 0.5,\r\n    cy: 0.5,\r\n    r: 0.5,\r\n    fill: GRID_COLOR\r\n  });\r\n\r\n  (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.append)(pattern, circle);\r\n\r\n  (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.append)(defs, pattern);\r\n\r\n  var grid = this._gfx = (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.create)('rect');\r\n\r\n  (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.attr)(grid, {\r\n    x: -(GRID_DIMENSIONS.width / 2),\r\n    y: -(GRID_DIMENSIONS.height / 2),\r\n    width: GRID_DIMENSIONS.width,\r\n    height: GRID_DIMENSIONS.height,\r\n    fill: `url(#${ patternId })`\r\n  });\r\n};\r\n\r\nGrid.prototype._centerGridAroundViewbox = function(viewbox) {\r\n  if (!viewbox) {\r\n    viewbox = this._canvas.viewbox();\r\n  }\r\n\r\n  var mid = (0,diagram_js_lib_layout_LayoutUtil__WEBPACK_IMPORTED_MODULE_3__.getMid)(viewbox);\r\n\r\n  (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.attr)(this._gfx, {\r\n    x: -(GRID_DIMENSIONS.width / 2) + (0,diagram_js_lib_features_grid_snapping_GridUtil__WEBPACK_IMPORTED_MODULE_2__.quantize)(mid.x, diagram_js_lib_features_grid_snapping_GridUtil__WEBPACK_IMPORTED_MODULE_2__.SPACING),\r\n    y: -(GRID_DIMENSIONS.height / 2) + (0,diagram_js_lib_features_grid_snapping_GridUtil__WEBPACK_IMPORTED_MODULE_2__.quantize)(mid.y, diagram_js_lib_features_grid_snapping_GridUtil__WEBPACK_IMPORTED_MODULE_2__.SPACING)\r\n  });\r\n};\r\n\r\n/**\r\n * Return the current grid visibility.\r\n *\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isVisible = function() {\r\n  return this._visible;\r\n};\r\n\r\n/**\r\n * Toggle grid visibility.\r\n *\r\n * @param {boolean} [visible] new visible state\r\n */\r\nGrid.prototype.toggle = function(visible) {\r\n\r\n  if (typeof visible === 'undefined') {\r\n    visible = !this._visible;\r\n  }\r\n\r\n  if (visible === this._visible) {\r\n    return;\r\n  }\r\n\r\n  var parent = this._getParent();\r\n\r\n  if (visible) {\r\n    (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.append)(parent, this._gfx);\r\n  } else {\r\n    (0,tiny_svg__WEBPACK_IMPORTED_MODULE_1__.clear)(parent);\r\n  }\r\n\r\n  this._visible = visible;\r\n};\r\n\r\nGrid.prototype._getParent = function() {\r\n  return this._canvas.getLayer(LAYER_NAME, -2);\r\n};\r\n\r\nGrid.$inject = [\r\n  'canvas',\r\n  'eventBus'\r\n];\r\n\r\n\r\n// helpers ///////////////\r\n\r\nfunction randomNumber() {\r\n  return Math.trunc(Math.random() * 1000000);\r\n}\n\nvar index = {\n  __init__: [ 'grid' ],\n  grid: [ 'type', Grid ]\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ3JhbS1qcy1ncmlkL2Rpc3QvaW5kZXguZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVEO0FBQ3ZCO0FBQ21EO0FBQ3pCOztBQUUxRDtBQUNBLGFBQWEsOENBQThDO0FBQzNELGFBQWEsZ0RBQWdEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsYUFBYSw4Q0FBSztBQUNsQjtBQUNBO0FBQ0EsV0FBVyxnREFBTTtBQUNqQjtBQUNBLElBQUksZ0RBQU07QUFDVjtBQUNBO0FBQ0EsZ0NBQWdDLGdEQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLEVBQUUsOENBQUk7QUFDTjtBQUNBLFdBQVcsbUZBQU87QUFDbEIsWUFBWSxtRkFBTztBQUNuQjtBQUNBLEdBQUc7QUFDSDtBQUNBLDhCQUE4QixnREFBTTtBQUNwQztBQUNBLEVBQUUsOENBQUk7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEVBQUUsZ0RBQU07QUFDUjtBQUNBLEVBQUUsZ0RBQU07QUFDUjtBQUNBLHlCQUF5QixnREFBTTtBQUMvQjtBQUNBLEVBQUUsOENBQUk7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixXQUFXO0FBQzlCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0VBQU07QUFDbEI7QUFDQSxFQUFFLDhDQUFJO0FBQ04sc0NBQXNDLHdGQUFRLFFBQVEsbUZBQU87QUFDN0QsdUNBQXVDLHdGQUFRLFFBQVEsbUZBQU87QUFDOUQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnREFBTTtBQUNWLElBQUk7QUFDSixJQUFJLCtDQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrZGF5cy0yMDIzLy4vbm9kZV9tb2R1bGVzL2RpYWdyYW0tanMtZ3JpZC9kaXN0L2luZGV4LmVzbS5qcz8wZmMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZSwgYXBwZW5kLCBhdHRyLCBjbGVhciB9IGZyb20gJ3Rpbnktc3ZnJztcbmltcG9ydCB7IHF1ZXJ5IH0gZnJvbSAnbWluLWRvbSc7XG5pbXBvcnQgeyBTUEFDSU5HLCBxdWFudGl6ZSB9IGZyb20gJ2RpYWdyYW0tanMvbGliL2ZlYXR1cmVzL2dyaWQtc25hcHBpbmcvR3JpZFV0aWwnO1xuaW1wb3J0IHsgZ2V0TWlkIH0gZnJvbSAnZGlhZ3JhbS1qcy9saWIvbGF5b3V0L0xheW91dFV0aWwnO1xuXG4vKipcclxuICogQHR5cGVkZWYge2ltcG9ydCgnZGlhZ3JhbS1qcy9saWIvY29yZS9DYW52YXMnKS5kZWZhdWx0fSBDYW52YXNcclxuICogQHR5cGVkZWYge2ltcG9ydCgnZGlhZ3JhbS1qcy9saWIvY29yZS9FdmVudEJ1cycpLmRlZmF1bHR9IEV2ZW50QnVzXHJcbiAqL1xyXG5cclxudmFyIEdSSURfQ09MT1IgPSAnI2NjYycsXHJcbiAgICBMQVlFUl9OQU1FID0gJ2Rqcy1ncmlkJztcclxuXHJcbnZhciBHUklEX0RJTUVOU0lPTlMgPSB7XHJcbiAgd2lkdGg6IDEwMDAwMCxcclxuICBoZWlnaHQ6IDEwMDAwMFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7Q2FudmFzfSBjYW52YXNcclxuICogQHBhcmFtIHtFdmVudEJ1c30gZXZlbnRCdXNcclxuICovXHJcbmZ1bmN0aW9uIEdyaWQoY2FudmFzLCBldmVudEJ1cykge1xyXG4gIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcclxuXHJcbiAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gIGV2ZW50QnVzLm9uKCdkaWFncmFtLmluaXQnLCBmdW5jdGlvbigpIHtcclxuICAgIHNlbGYuX2luaXQoKTtcclxuICB9KTtcclxuXHJcbiAgZXZlbnRCdXMub24oJ2dyaWRTbmFwcGluZy50b2dnbGUnLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgdmFyIGFjdGl2ZSA9IGV2ZW50LmFjdGl2ZTtcclxuXHJcbiAgICBzZWxmLnRvZ2dsZShhY3RpdmUpO1xyXG5cclxuICAgIHNlbGYuX2NlbnRlckdyaWRBcm91bmRWaWV3Ym94KCk7XHJcbiAgfSk7XHJcblxyXG4gIGV2ZW50QnVzLm9uKCdjYW52YXMudmlld2JveC5jaGFuZ2VkJywgZnVuY3Rpb24oY29udGV4dCkge1xyXG4gICAgdmFyIHZpZXdib3ggPSBjb250ZXh0LnZpZXdib3g7XHJcblxyXG4gICAgc2VsZi5fY2VudGVyR3JpZEFyb3VuZFZpZXdib3godmlld2JveCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbkdyaWQucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGRlZnMgPSBxdWVyeSgnZGVmcycsIHRoaXMuX2NhbnZhcy5fc3ZnKTtcclxuXHJcbiAgaWYgKCFkZWZzKSB7XHJcbiAgICBkZWZzID0gY3JlYXRlKCdkZWZzJyk7XHJcblxyXG4gICAgYXBwZW5kKHRoaXMuX2NhbnZhcy5fc3ZnLCBkZWZzKTtcclxuICB9XHJcblxyXG4gIHZhciBwYXR0ZXJuID0gdGhpcy5fcGF0dGVybiA9IGNyZWF0ZSgncGF0dGVybicpO1xyXG5cclxuICB2YXIgcGF0dGVybklkID0gJ2Rqcy1ncmlkLXBhdHRlcm4tJyArIHJhbmRvbU51bWJlcigpO1xyXG5cclxuICBhdHRyKHBhdHRlcm4sIHtcclxuICAgIGlkOiBwYXR0ZXJuSWQsXHJcbiAgICB3aWR0aDogU1BBQ0lORyxcclxuICAgIGhlaWdodDogU1BBQ0lORyxcclxuICAgIHBhdHRlcm5Vbml0czogJ3VzZXJTcGFjZU9uVXNlJ1xyXG4gIH0pO1xyXG5cclxuICB2YXIgY2lyY2xlID0gdGhpcy5fY2lyY2xlID0gY3JlYXRlKCdjaXJjbGUnKTtcclxuXHJcbiAgYXR0cihjaXJjbGUsIHtcclxuICAgIGN4OiAwLjUsXHJcbiAgICBjeTogMC41LFxyXG4gICAgcjogMC41LFxyXG4gICAgZmlsbDogR1JJRF9DT0xPUlxyXG4gIH0pO1xyXG5cclxuICBhcHBlbmQocGF0dGVybiwgY2lyY2xlKTtcclxuXHJcbiAgYXBwZW5kKGRlZnMsIHBhdHRlcm4pO1xyXG5cclxuICB2YXIgZ3JpZCA9IHRoaXMuX2dmeCA9IGNyZWF0ZSgncmVjdCcpO1xyXG5cclxuICBhdHRyKGdyaWQsIHtcclxuICAgIHg6IC0oR1JJRF9ESU1FTlNJT05TLndpZHRoIC8gMiksXHJcbiAgICB5OiAtKEdSSURfRElNRU5TSU9OUy5oZWlnaHQgLyAyKSxcclxuICAgIHdpZHRoOiBHUklEX0RJTUVOU0lPTlMud2lkdGgsXHJcbiAgICBoZWlnaHQ6IEdSSURfRElNRU5TSU9OUy5oZWlnaHQsXHJcbiAgICBmaWxsOiBgdXJsKCMkeyBwYXR0ZXJuSWQgfSlgXHJcbiAgfSk7XHJcbn07XHJcblxyXG5HcmlkLnByb3RvdHlwZS5fY2VudGVyR3JpZEFyb3VuZFZpZXdib3ggPSBmdW5jdGlvbih2aWV3Ym94KSB7XHJcbiAgaWYgKCF2aWV3Ym94KSB7XHJcbiAgICB2aWV3Ym94ID0gdGhpcy5fY2FudmFzLnZpZXdib3goKTtcclxuICB9XHJcblxyXG4gIHZhciBtaWQgPSBnZXRNaWQodmlld2JveCk7XHJcblxyXG4gIGF0dHIodGhpcy5fZ2Z4LCB7XHJcbiAgICB4OiAtKEdSSURfRElNRU5TSU9OUy53aWR0aCAvIDIpICsgcXVhbnRpemUobWlkLngsIFNQQUNJTkcpLFxyXG4gICAgeTogLShHUklEX0RJTUVOU0lPTlMuaGVpZ2h0IC8gMikgKyBxdWFudGl6ZShtaWQueSwgU1BBQ0lORylcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIGN1cnJlbnQgZ3JpZCB2aXNpYmlsaXR5LlxyXG4gKlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxuR3JpZC5wcm90b3R5cGUuaXNWaXNpYmxlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XHJcbn07XHJcblxyXG4vKipcclxuICogVG9nZ2xlIGdyaWQgdmlzaWJpbGl0eS5cclxuICpcclxuICogQHBhcmFtIHtib29sZWFufSBbdmlzaWJsZV0gbmV3IHZpc2libGUgc3RhdGVcclxuICovXHJcbkdyaWQucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uKHZpc2libGUpIHtcclxuXHJcbiAgaWYgKHR5cGVvZiB2aXNpYmxlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgdmlzaWJsZSA9ICF0aGlzLl92aXNpYmxlO1xyXG4gIH1cclxuXHJcbiAgaWYgKHZpc2libGUgPT09IHRoaXMuX3Zpc2libGUpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHZhciBwYXJlbnQgPSB0aGlzLl9nZXRQYXJlbnQoKTtcclxuXHJcbiAgaWYgKHZpc2libGUpIHtcclxuICAgIGFwcGVuZChwYXJlbnQsIHRoaXMuX2dmeCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNsZWFyKHBhcmVudCk7XHJcbiAgfVxyXG5cclxuICB0aGlzLl92aXNpYmxlID0gdmlzaWJsZTtcclxufTtcclxuXHJcbkdyaWQucHJvdG90eXBlLl9nZXRQYXJlbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5fY2FudmFzLmdldExheWVyKExBWUVSX05BTUUsIC0yKTtcclxufTtcclxuXHJcbkdyaWQuJGluamVjdCA9IFtcclxuICAnY2FudmFzJyxcclxuICAnZXZlbnRCdXMnXHJcbl07XHJcblxyXG5cclxuLy8gaGVscGVycyAvLy8vLy8vLy8vLy8vLy9cclxuXHJcbmZ1bmN0aW9uIHJhbmRvbU51bWJlcigpIHtcclxuICByZXR1cm4gTWF0aC50cnVuYyhNYXRoLnJhbmRvbSgpICogMTAwMDAwMCk7XHJcbn1cblxudmFyIGluZGV4ID0ge1xuICBfX2luaXRfXzogWyAnZ3JpZCcgXSxcbiAgZ3JpZDogWyAndHlwZScsIEdyaWQgXVxufTtcblxuZXhwb3J0IHsgaW5kZXggYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/diagram-js-grid/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/diagram-js/lib/features/grid-snapping/GridUtil.js":
/*!************************************************************************!*\
  !*** ./node_modules/diagram-js/lib/features/grid-snapping/GridUtil.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPACING: () => (/* binding */ SPACING),\n/* harmony export */   quantize: () => (/* binding */ quantize)\n/* harmony export */ });\nvar SPACING = 10;\n\nfunction quantize(value, quantum, fn) {\n  if (!fn) {\n    fn = 'round';\n  }\n\n  return Math[ fn ](value / quantum) * quantum;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ3JhbS1qcy9saWIvZmVhdHVyZXMvZ3JpZC1zbmFwcGluZy9HcmlkVXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPOztBQUVBO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrZGF5cy0yMDIzLy4vbm9kZV9tb2R1bGVzL2RpYWdyYW0tanMvbGliL2ZlYXR1cmVzL2dyaWQtc25hcHBpbmcvR3JpZFV0aWwuanM/ZDIwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIFNQQUNJTkcgPSAxMDtcblxuZXhwb3J0IGZ1bmN0aW9uIHF1YW50aXplKHZhbHVlLCBxdWFudHVtLCBmbikge1xuICBpZiAoIWZuKSB7XG4gICAgZm4gPSAncm91bmQnO1xuICB9XG5cbiAgcmV0dXJuIE1hdGhbIGZuIF0odmFsdWUgLyBxdWFudHVtKSAqIHF1YW50dW07XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/diagram-js/lib/features/grid-snapping/GridUtil.js\n");

/***/ }),

/***/ "./node_modules/diagram-js/lib/layout/LayoutUtil.js":
/*!**********************************************************!*\
  !*** ./node_modules/diagram-js/lib/layout/LayoutUtil.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asBounds: () => (/* binding */ asBounds),\n/* harmony export */   asTRBL: () => (/* binding */ asTRBL),\n/* harmony export */   filterRedundantWaypoints: () => (/* binding */ filterRedundantWaypoints),\n/* harmony export */   getBoundsMid: () => (/* binding */ getBoundsMid),\n/* harmony export */   getConnectionMid: () => (/* binding */ getConnectionMid),\n/* harmony export */   getElementLineIntersection: () => (/* binding */ getElementLineIntersection),\n/* harmony export */   getIntersections: () => (/* binding */ getIntersections),\n/* harmony export */   getMid: () => (/* binding */ getMid),\n/* harmony export */   getOrientation: () => (/* binding */ getOrientation),\n/* harmony export */   roundBounds: () => (/* binding */ roundBounds),\n/* harmony export */   roundPoint: () => (/* binding */ roundPoint)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n/* harmony import */ var _util_Geometry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/Geometry */ \"./node_modules/diagram-js/lib/util/Geometry.js\");\n/* harmony import */ var path_intersection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path-intersection */ \"./node_modules/path-intersection/intersect.js\");\n/* harmony import */ var path_intersection__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path_intersection__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ModelUtil */ \"./node_modules/diagram-js/lib/util/ModelUtil.js\");\n\n\n\n\n\n\n\n\n/**\n * @typedef {import('../core/Types').ElementLike} Element\n * @typedef {import('../core/Types').ConnectionLike} Connection\n *\n * @typedef {import('../util/Types').DirectionTRBL} DirectionTRBL\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n * @typedef {import('../util/Types').RectTRBL} RectTRBL\n */\n\n/**\n * @param {Rect} bounds\n *\n * @returns {Rect}\n */\nfunction roundBounds(bounds) {\n  return {\n    x: Math.round(bounds.x),\n    y: Math.round(bounds.y),\n    width: Math.round(bounds.width),\n    height: Math.round(bounds.height)\n  };\n}\n\n/**\n * @param {Point} point\n *\n * @returns {Point}\n */\nfunction roundPoint(point) {\n\n  return {\n    x: Math.round(point.x),\n    y: Math.round(point.y)\n  };\n}\n\n\n/**\n * Convert the given bounds to a { top, left, bottom, right } descriptor.\n *\n * @param {Point|Rect} bounds\n *\n * @return {RectTRBL}\n */\nfunction asTRBL(bounds) {\n  return {\n    top: bounds.y,\n    right: bounds.x + (bounds.width || 0),\n    bottom: bounds.y + (bounds.height || 0),\n    left: bounds.x\n  };\n}\n\n\n/**\n * Convert a { top, left, bottom, right } to an objects bounds.\n *\n * @param {RectTRBL} trbl\n *\n * @return {Rect}\n */\nfunction asBounds(trbl) {\n  return {\n    x: trbl.left,\n    y: trbl.top,\n    width: trbl.right - trbl.left,\n    height: trbl.bottom - trbl.top\n  };\n}\n\n\n/**\n * Get the mid of the given bounds or point.\n *\n * @param {Point|Rect} bounds\n *\n * @return {Point}\n */\nfunction getBoundsMid(bounds) {\n  return roundPoint({\n    x: bounds.x + (bounds.width || 0) / 2,\n    y: bounds.y + (bounds.height || 0) / 2\n  });\n}\n\n\n/**\n * Get the mid of the given Connection.\n *\n * @param {Connection} connection\n *\n * @return {Point}\n */\nfunction getConnectionMid(connection) {\n  var waypoints = connection.waypoints;\n\n  // calculate total length and length of each segment\n  var parts = waypoints.reduce(function(parts, point, index) {\n\n    var lastPoint = waypoints[index - 1];\n\n    if (lastPoint) {\n      var lastPart = parts[parts.length - 1];\n\n      var startLength = lastPart && lastPart.endLength || 0;\n      var length = distance(lastPoint, point);\n\n      parts.push({\n        start: lastPoint,\n        end: point,\n        startLength: startLength,\n        endLength: startLength + length,\n        length: length\n      });\n    }\n\n    return parts;\n  }, []);\n\n  var totalLength = parts.reduce(function(length, part) {\n    return length + part.length;\n  }, 0);\n\n  // find which segement contains middle point\n  var midLength = totalLength / 2;\n\n  var i = 0;\n  var midSegment = parts[i];\n\n  while (midSegment.endLength < midLength) {\n    midSegment = parts[++i];\n  }\n\n  // calculate relative position on mid segment\n  var segmentProgress = (midLength - midSegment.startLength) / midSegment.length;\n\n  var midPoint = {\n    x: midSegment.start.x + (midSegment.end.x - midSegment.start.x) * segmentProgress,\n    y: midSegment.start.y + (midSegment.end.y - midSegment.start.y) * segmentProgress\n  };\n\n  return midPoint;\n}\n\n\n/**\n * Get the mid of the given Element.\n *\n * @param {Element} element\n *\n * @return {Point}\n */\nfunction getMid(element) {\n  if ((0,_util_ModelUtil__WEBPACK_IMPORTED_MODULE_1__.isConnection)(element)) {\n    return getConnectionMid(element);\n  }\n\n  return getBoundsMid(element);\n}\n\n// orientation utils //////////////////////\n\n/**\n * Get orientation of the given rectangle with respect to\n * the reference rectangle.\n *\n * A padding (positive or negative) may be passed to influence\n * horizontal / vertical orientation and intersection.\n *\n * @param {Rect} rect\n * @param {Rect} reference\n * @param {Point|number} padding\n *\n * @return {DirectionTRBL} the orientation; one of top, top-left, left, ..., bottom, right or intersect.\n */\nfunction getOrientation(rect, reference, padding) {\n\n  padding = padding || 0;\n\n  // make sure we can use an object, too\n  // for individual { x, y } padding\n  if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_2__.isObject)(padding)) {\n    padding = { x: padding, y: padding };\n  }\n\n\n  var rectOrientation = asTRBL(rect),\n      referenceOrientation = asTRBL(reference);\n\n  var top = rectOrientation.bottom + padding.y <= referenceOrientation.top,\n      right = rectOrientation.left - padding.x >= referenceOrientation.right,\n      bottom = rectOrientation.top - padding.y >= referenceOrientation.bottom,\n      left = rectOrientation.right + padding.x <= referenceOrientation.left;\n\n  var vertical = top ? 'top' : (bottom ? 'bottom' : null),\n      horizontal = left ? 'left' : (right ? 'right' : null);\n\n  if (horizontal && vertical) {\n    return vertical + '-' + horizontal;\n  } else {\n    return horizontal || vertical || 'intersect';\n  }\n}\n\n\n// intersection utils //////////////////////\n\n/**\n * Get intersection between an element and a line path.\n *\n * @param {string} elementPath\n * @param {string} linePath\n * @param {boolean} cropStart Whether to crop start or end.\n *\n * @return {Point}\n */\nfunction getElementLineIntersection(elementPath, linePath, cropStart) {\n\n  var intersections = getIntersections(elementPath, linePath);\n\n  // recognize intersections\n  // only one -> choose\n  // two close together -> choose first\n  // two or more distinct -> pull out appropriate one\n  // none -> ok (fallback to point itself)\n  if (intersections.length === 1) {\n    return roundPoint(intersections[0]);\n  } else if (intersections.length === 2 && (0,_util_Geometry__WEBPACK_IMPORTED_MODULE_3__.pointDistance)(intersections[0], intersections[1]) < 1) {\n    return roundPoint(intersections[0]);\n  } else if (intersections.length > 1) {\n\n    // sort by intersections based on connection segment +\n    // distance from start\n    intersections = (0,min_dash__WEBPACK_IMPORTED_MODULE_2__.sortBy)(intersections, function(i) {\n      var distance = Math.floor(i.t2 * 100) || 1;\n\n      distance = 100 - distance;\n\n      distance = (distance < 10 ? '0' : '') + distance;\n\n      // create a sort string that makes sure we sort\n      // line segment ASC + line segment position DESC (for cropStart)\n      // line segment ASC + line segment position ASC (for cropEnd)\n      return i.segment2 + '#' + distance;\n    });\n\n    return roundPoint(intersections[cropStart ? 0 : intersections.length - 1]);\n  }\n\n  return null;\n}\n\n\nfunction getIntersections(a, b) {\n  return path_intersection__WEBPACK_IMPORTED_MODULE_0___default()(a, b);\n}\n\n\nfunction filterRedundantWaypoints(waypoints) {\n\n  // alter copy of waypoints, not original\n  waypoints = waypoints.slice();\n\n  var idx = 0,\n      point,\n      previousPoint,\n      nextPoint;\n\n  while (waypoints[idx]) {\n    point = waypoints[idx];\n    previousPoint = waypoints[idx - 1];\n    nextPoint = waypoints[idx + 1];\n\n    if ((0,_util_Geometry__WEBPACK_IMPORTED_MODULE_3__.pointDistance)(point, nextPoint) === 0 ||\n        (0,_util_Geometry__WEBPACK_IMPORTED_MODULE_3__.pointsOnLine)(previousPoint, nextPoint, point)) {\n\n      // remove point, if overlapping with {nextPoint}\n      // or on line with {previousPoint} -> {point} -> {nextPoint}\n      waypoints.splice(idx, 1);\n    } else {\n      idx++;\n    }\n  }\n\n  return waypoints;\n}\n\n// helpers //////////////////////\n\nfunction distance(a, b) {\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/diagram-js/lib/layout/LayoutUtil.js\n");

/***/ }),

/***/ "./node_modules/diagram-js/lib/util/Elements.js":
/*!******************************************************!*\
  !*** ./node_modules/diagram-js/lib/util/Elements.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   eachElement: () => (/* binding */ eachElement),\n/* harmony export */   getBBox: () => (/* binding */ getBBox),\n/* harmony export */   getClosure: () => (/* binding */ getClosure),\n/* harmony export */   getEnclosedElements: () => (/* binding */ getEnclosedElements),\n/* harmony export */   getParents: () => (/* binding */ getParents),\n/* harmony export */   getType: () => (/* binding */ getType),\n/* harmony export */   isFrameElement: () => (/* binding */ isFrameElement),\n/* harmony export */   selfAndAllChildren: () => (/* binding */ selfAndAllChildren),\n/* harmony export */   selfAndChildren: () => (/* binding */ selfAndChildren),\n/* harmony export */   selfAndDirectChildren: () => (/* binding */ selfAndDirectChildren)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n\n\n/**\n * @typedef {import('../model/Types').Connection} Connection\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').Shape} Shape\n *\n * @typedef {import('../../type/Types').Rect} Rect\n *\n * @typedef { {\n *   allShapes: Record<string, Shape>,\n *   allConnections: Record<string, Connection>,\n *   topLevel: Record<string, Element>,\n *   enclosedConnections: Record<string, Connection>,\n *   enclosedElements: Record<string, Element>\n * } } Closure\n */\n\n/**\n * Get parent elements.\n *\n * @param {Element[]} elements\n *\n * @return {Element[]}\n */\nfunction getParents(elements) {\n\n  // find elements that are not children of any other elements\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.filter)(elements, function(element) {\n    return !(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.find)(elements, function(e) {\n      return e !== element && getParent(element, e);\n    });\n  });\n}\n\n\nfunction getParent(element, parent) {\n  if (!parent) {\n    return;\n  }\n\n  if (element === parent) {\n    return parent;\n  }\n\n  if (!element.parent) {\n    return;\n  }\n\n  return getParent(element.parent, parent);\n}\n\n\n/**\n * Adds an element to a collection and returns true if the\n * element was added.\n *\n * @param {Object[]} elements\n * @param {Object} element\n * @param {boolean} [unique]\n */\nfunction add(elements, element, unique) {\n  var canAdd = !unique || elements.indexOf(element) === -1;\n\n  if (canAdd) {\n    elements.push(element);\n  }\n\n  return canAdd;\n}\n\n\n/**\n * Iterate over each element in a collection, calling the iterator function `fn`\n * with (element, index, recursionDepth).\n *\n * Recurse into all elements that are returned by `fn`.\n *\n * @param {Element|Element[]} elements\n * @param {(element: Element, index: number, depth: number) => Element[] | boolean | undefined} fn\n * @param {number} [depth] maximum recursion depth\n */\nfunction eachElement(elements, fn, depth) {\n\n  depth = depth || 0;\n\n  if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(elements)) {\n    elements = [ elements ];\n  }\n\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(elements, function(s, i) {\n    var filter = fn(s, i, depth);\n\n    if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(filter) && filter.length) {\n      eachElement(filter, fn, depth + 1);\n    }\n  });\n}\n\n\n/**\n * Collects self + child elements up to a given depth from a list of elements.\n *\n * @param {Element|Element[]} elements the elements to select the children from\n * @param {boolean} unique whether to return a unique result set (no duplicates)\n * @param {number} maxDepth the depth to search through or -1 for infinite\n *\n * @return {Element[]} found elements\n */\nfunction selfAndChildren(elements, unique, maxDepth) {\n  var result = [],\n      processedChildren = [];\n\n  eachElement(elements, function(element, i, depth) {\n    add(result, element, unique);\n\n    var children = element.children;\n\n    // max traversal depth not reached yet\n    if (maxDepth === -1 || depth < maxDepth) {\n\n      // children exist && children not yet processed\n      if (children && add(processedChildren, children, unique)) {\n        return children;\n      }\n    }\n  });\n\n  return result;\n}\n\n/**\n * Return self + direct children for a number of elements\n *\n * @param {Element[]} elements to query\n * @param {boolean} [allowDuplicates] to allow duplicates in the result set\n *\n * @return {Element[]} the collected elements\n */\nfunction selfAndDirectChildren(elements, allowDuplicates) {\n  return selfAndChildren(elements, !allowDuplicates, 1);\n}\n\n\n/**\n * Return self + ALL children for a number of elements\n *\n * @param {Element[]} elements to query\n * @param {boolean} [allowDuplicates] to allow duplicates in the result set\n *\n * @return {Element[]} the collected elements\n */\nfunction selfAndAllChildren(elements, allowDuplicates) {\n  return selfAndChildren(elements, !allowDuplicates, -1);\n}\n\n\n/**\n * Gets the the closure for all selected elements,\n * their enclosed children and connections.\n *\n * @param {Element[]} elements\n * @param {boolean} [isTopLevel=true]\n * @param {Closure} [closure]\n *\n * @return {Closure} newClosure\n */\nfunction getClosure(elements, isTopLevel, closure) {\n\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(isTopLevel)) {\n    isTopLevel = true;\n  }\n\n  if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(isTopLevel)) {\n    closure = isTopLevel;\n    isTopLevel = true;\n  }\n\n\n  closure = closure || {};\n\n  var allShapes = copyObject(closure.allShapes),\n      allConnections = copyObject(closure.allConnections),\n      enclosedElements = copyObject(closure.enclosedElements),\n      enclosedConnections = copyObject(closure.enclosedConnections);\n\n  var topLevel = copyObject(\n    closure.topLevel,\n    isTopLevel && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.groupBy)(elements, function(e) { return e.id; })\n  );\n\n\n  function handleConnection(c) {\n    if (topLevel[c.source.id] && topLevel[c.target.id]) {\n      topLevel[c.id] = [ c ];\n    }\n\n    // not enclosed as a child, but maybe logically\n    // (connecting two moved elements?)\n    if (allShapes[c.source.id] && allShapes[c.target.id]) {\n      enclosedConnections[c.id] = enclosedElements[c.id] = c;\n    }\n\n    allConnections[c.id] = c;\n  }\n\n  function handleElement(element) {\n\n    enclosedElements[element.id] = element;\n\n    if (element.waypoints) {\n\n      // remember connection\n      enclosedConnections[element.id] = allConnections[element.id] = element;\n    } else {\n\n      // remember shape\n      allShapes[element.id] = element;\n\n      // remember all connections\n      (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(element.incoming, handleConnection);\n\n      (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(element.outgoing, handleConnection);\n\n      // recurse into children\n      return element.children;\n    }\n  }\n\n  eachElement(elements, handleElement);\n\n  return {\n    allShapes: allShapes,\n    allConnections: allConnections,\n    topLevel: topLevel,\n    enclosedConnections: enclosedConnections,\n    enclosedElements: enclosedElements\n  };\n}\n\n/**\n * Returns the surrounding bbox for all elements in\n * the array or the element primitive.\n *\n * @param {Element|Element[]} elements\n * @param {boolean} [stopRecursion=false]\n *\n * @return {Rect}\n */\nfunction getBBox(elements, stopRecursion) {\n\n  stopRecursion = !!stopRecursion;\n  if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isArray)(elements)) {\n    elements = [ elements ];\n  }\n\n  var minX,\n      minY,\n      maxX,\n      maxY;\n\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(elements, function(element) {\n\n    // If element is a connection the bbox must be computed first\n    var bbox = element;\n    if (element.waypoints && !stopRecursion) {\n      bbox = getBBox(element.waypoints, true);\n    }\n\n    var x = bbox.x,\n        y = bbox.y,\n        height = bbox.height || 0,\n        width = bbox.width || 0;\n\n    if (x < minX || minX === undefined) {\n      minX = x;\n    }\n    if (y < minY || minY === undefined) {\n      minY = y;\n    }\n\n    if ((x + width) > maxX || maxX === undefined) {\n      maxX = x + width;\n    }\n    if ((y + height) > maxY || maxY === undefined) {\n      maxY = y + height;\n    }\n  });\n\n  return {\n    x: minX,\n    y: minY,\n    height: maxY - minY,\n    width: maxX - minX\n  };\n}\n\n\n/**\n * Returns all elements that are enclosed from the bounding box.\n *\n *   * If bbox.(width|height) is not specified the method returns\n *     all elements with element.x/y > bbox.x/y\n *   * If only bbox.x or bbox.y is specified, method return all elements with\n *     e.x > bbox.x or e.y > bbox.y\n *\n * @param {Element[]} elements List of Elements to search through\n * @param {Rect} bbox the enclosing bbox.\n *\n * @return {Element[]} enclosed elements\n */\nfunction getEnclosedElements(elements, bbox) {\n\n  var filteredElements = {};\n\n  (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.forEach)(elements, function(element) {\n\n    var e = element;\n\n    if (e.waypoints) {\n      e = getBBox(e);\n    }\n\n    if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.y) && (e.x > bbox.x)) {\n      filteredElements[element.id] = element;\n    }\n    if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.x) && (e.y > bbox.y)) {\n      filteredElements[element.id] = element;\n    }\n    if (e.x > bbox.x && e.y > bbox.y) {\n      if ((0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.width) && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.height) &&\n          e.width + e.x < bbox.width + bbox.x &&\n          e.height + e.y < bbox.height + bbox.y) {\n\n        filteredElements[element.id] = element;\n      } else if (!(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.width) || !(0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNumber)(bbox.height)) {\n        filteredElements[element.id] = element;\n      }\n    }\n  });\n\n  return filteredElements;\n}\n\n/**\n * Get the element's type\n *\n * @param {Element} element\n *\n * @return {'connection' | 'shape' | 'root'}\n */\nfunction getType(element) {\n\n  if ('waypoints' in element) {\n    return 'connection';\n  }\n\n  if ('x' in element) {\n    return 'shape';\n  }\n\n  return 'root';\n}\n\n/**\n * @param {Element} element\n *\n * @return {boolean}\n */\nfunction isFrameElement(element) {\n  return !!(element && element.isFrame);\n}\n\n// helpers ///////////////////////////////\n\nfunction copyObject(src1, src2) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.assign)({}, src1 || {}, src2 || {});\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/diagram-js/lib/util/Elements.js\n");

/***/ }),

/***/ "./node_modules/diagram-js/lib/util/EscapeUtil.js":
/*!********************************************************!*\
  !*** ./node_modules/diagram-js/lib/util/EscapeUtil.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   escapeCSS: () => (/* binding */ escapeCSS),\n/* harmony export */   escapeHTML: () => (/* binding */ escapeHTML)\n/* harmony export */ });\n/**\n * @param {string} str\n *\n * @return {string}\n */\nfunction escapeCSS(str) {\n  return CSS.escape(str);\n}\n\nvar HTML_ESCAPE_MAP = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  '\\'': '&#39;'\n};\n\n/**\n * @param {string} str\n *\n * @return {string}\n */\nfunction escapeHTML(str) {\n  str = '' + str;\n\n  return str && str.replace(/[&<>\"']/g, function(match) {\n    return HTML_ESCAPE_MAP[match];\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ3JhbS1qcy9saWIvdXRpbC9Fc2NhcGVVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxhQUFhO0FBQ2IsWUFBWTtBQUNaLFlBQVk7QUFDWixjQUFjO0FBQ2QsY0FBYztBQUNkOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsWUFBWTtBQUNaO0FBQ087QUFDUDs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2RheXMtMjAyMy8uL25vZGVfbW9kdWxlcy9kaWFncmFtLWpzL2xpYi91dGlsL0VzY2FwZVV0aWwuanM/NjczMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVDU1Moc3RyKSB7XG4gIHJldHVybiBDU1MuZXNjYXBlKHN0cik7XG59XG5cbnZhciBIVE1MX0VTQ0FQRV9NQVAgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgJ1xcJyc6ICcmIzM5Oydcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUhUTUwoc3RyKSB7XG4gIHN0ciA9ICcnICsgc3RyO1xuXG4gIHJldHVybiBzdHIgJiYgc3RyLnJlcGxhY2UoL1smPD5cIiddL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIEhUTUxfRVNDQVBFX01BUFttYXRjaF07XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/diagram-js/lib/util/EscapeUtil.js\n");

/***/ }),

/***/ "./node_modules/diagram-js/lib/util/Event.js":
/*!***************************************************!*\
  !*** ./node_modules/diagram-js/lib/util/Event.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOriginal: () => (/* binding */ getOriginal),\n/* harmony export */   stopPropagation: () => (/* binding */ stopPropagation),\n/* harmony export */   toPoint: () => (/* binding */ toPoint)\n/* harmony export */ });\n/**\n * @typedef {import('../util/Types').Point} Point\n */\n\nfunction __stopPropagation(event) {\n  if (!event || typeof event.stopPropagation !== 'function') {\n    return;\n  }\n\n  event.stopPropagation();\n}\n\n/**\n * @param {import('../core/EventBus').Event} event\n *\n * @return {Event}\n */\nfunction getOriginal(event) {\n  return event.originalEvent || event.srcEvent;\n}\n\n/**\n * @param {Event|import('../core/EventBus').Event} event\n */\nfunction stopPropagation(event) {\n  __stopPropagation(event);\n  __stopPropagation(getOriginal(event));\n}\n\n/**\n * @param {Event} event\n *\n * @return {Point|null}\n */\nfunction toPoint(event) {\n\n  if (event.pointers && event.pointers.length) {\n    event = event.pointers[0];\n  }\n\n  if (event.touches && event.touches.length) {\n    event = event.touches[0];\n  }\n\n  return event ? {\n    x: event.clientX,\n    y: event.clientY\n  } : null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ3JhbS1qcy9saWIvdXRpbC9FdmVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBLGFBQWEsK0JBQStCO0FBQzVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGtDQUFrQztBQUM3QztBQUNBLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLFdBQVcsd0NBQXdDO0FBQ25EO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSxZQUFZO0FBQ1o7QUFDTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2tkYXlzLTIwMjMvLi9ub2RlX21vZHVsZXMvZGlhZ3JhbS1qcy9saWIvdXRpbC9FdmVudC5qcz8xMDI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdXRpbC9UeXBlcycpLlBvaW50fSBQb2ludFxuICovXG5cbmZ1bmN0aW9uIF9fc3RvcFByb3BhZ2F0aW9uKGV2ZW50KSB7XG4gIGlmICghZXZlbnQgfHwgdHlwZW9mIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9jb3JlL0V2ZW50QnVzJykuRXZlbnR9IGV2ZW50XG4gKlxuICogQHJldHVybiB7RXZlbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcmlnaW5hbChldmVudCkge1xuICByZXR1cm4gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudC5zcmNFdmVudDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50fGltcG9ydCgnLi4vY29yZS9FdmVudEJ1cycpLkV2ZW50fSBldmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKGV2ZW50KSB7XG4gIF9fc3RvcFByb3BhZ2F0aW9uKGV2ZW50KTtcbiAgX19zdG9wUHJvcGFnYXRpb24oZ2V0T3JpZ2luYWwoZXZlbnQpKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICpcbiAqIEByZXR1cm4ge1BvaW50fG51bGx9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1BvaW50KGV2ZW50KSB7XG5cbiAgaWYgKGV2ZW50LnBvaW50ZXJzICYmIGV2ZW50LnBvaW50ZXJzLmxlbmd0aCkge1xuICAgIGV2ZW50ID0gZXZlbnQucG9pbnRlcnNbMF07XG4gIH1cblxuICBpZiAoZXZlbnQudG91Y2hlcyAmJiBldmVudC50b3VjaGVzLmxlbmd0aCkge1xuICAgIGV2ZW50ID0gZXZlbnQudG91Y2hlc1swXTtcbiAgfVxuXG4gIHJldHVybiBldmVudCA/IHtcbiAgICB4OiBldmVudC5jbGllbnRYLFxuICAgIHk6IGV2ZW50LmNsaWVudFlcbiAgfSA6IG51bGw7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/diagram-js/lib/util/Event.js\n");

/***/ }),

/***/ "./node_modules/diagram-js/lib/util/Geometry.js":
/*!******************************************************!*\
  !*** ./node_modules/diagram-js/lib/util/Geometry.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMidPoint: () => (/* binding */ getMidPoint),\n/* harmony export */   pointDistance: () => (/* binding */ pointDistance),\n/* harmony export */   pointInRect: () => (/* binding */ pointInRect),\n/* harmony export */   pointsAligned: () => (/* binding */ pointsAligned),\n/* harmony export */   pointsAlignedOnAxis: () => (/* binding */ pointsAlignedOnAxis),\n/* harmony export */   pointsOnLine: () => (/* binding */ pointsOnLine)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n\n\n/**\n * @typedef {import('../util/Types').Axis} Axis\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n */\n\n/**\n * Computes the distance between two points.\n *\n * @param {Point} a\n * @param {Point} b\n *\n * @return {number} The distance between the two points.\n */\nfunction pointDistance(a, b) {\n  if (!a || !b) {\n    return -1;\n  }\n\n  return Math.sqrt(\n    Math.pow(a.x - b.x, 2) +\n    Math.pow(a.y - b.y, 2)\n  );\n}\n\n\n/**\n * Returns true if the point r is on the line between p and q.\n *\n * @param {Point} p\n * @param {Point} q\n * @param {Point} r\n * @param {number} [accuracy=5] The accuracy with which to check (lower is better).\n *\n * @return {boolean}\n */\nfunction pointsOnLine(p, q, r, accuracy) {\n\n  if (typeof accuracy === 'undefined') {\n    accuracy = 5;\n  }\n\n  if (!p || !q || !r) {\n    return false;\n  }\n\n  var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),\n      dist = pointDistance(p, q);\n\n  // @see http://stackoverflow.com/a/907491/412190\n  return Math.abs(val / dist) <= accuracy;\n}\n\n\nvar ALIGNED_THRESHOLD = 2;\n\n/**\n * Check whether two points are horizontally or vertically aligned.\n *\n * @param {Point[]|Point} a\n * @param {Point} [b]\n *\n * @return {string|boolean} If and how the two points are aligned ('h', 'v' or `false`).\n */\nfunction pointsAligned(a, b) {\n  var points = Array.from(arguments).flat();\n\n  const axisMap = {\n    'x': 'v',\n    'y': 'h'\n  };\n\n  for (const [ axis, orientation ] of Object.entries(axisMap)) {\n    if (pointsAlignedOnAxis(axis, points)) {\n      return orientation;\n    }\n  }\n\n  return false;\n}\n\n/**\n * @param {Axis} axis\n * @param {Point[]} points\n *\n * @return {boolean}\n */\nfunction pointsAlignedOnAxis(axis, points) {\n  const referencePoint = points[0];\n\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.every)(points, function(point) {\n    return Math.abs(referencePoint[axis] - point[axis]) <= ALIGNED_THRESHOLD;\n  });\n}\n\n/**\n * Returns true if the point p is inside the rectangle rect\n *\n * @param {Point} p\n * @param {Rect} rect\n * @param {number} tolerance\n *\n * @return {boolean}\n */\nfunction pointInRect(p, rect, tolerance) {\n  tolerance = tolerance || 0;\n\n  return p.x > rect.x - tolerance &&\n         p.y > rect.y - tolerance &&\n         p.x < rect.x + rect.width + tolerance &&\n         p.y < rect.y + rect.height + tolerance;\n}\n\n/**\n * Returns a point in the middle of points p and q\n *\n * @param {Point} p\n * @param {Point} q\n *\n * @return {Point} The mid point between the two points.\n */\nfunction getMidPoint(p, q) {\n  return {\n    x: Math.round(p.x + ((q.x - p.x) / 2.0)),\n    y: Math.round(p.y + ((q.y - p.y) / 2.0))\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ3JhbS1qcy9saWIvdXRpbC9HZW9tZXRyeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRWtCOztBQUVsQjtBQUNBLGFBQWEsOEJBQThCO0FBQzNDLGFBQWEsK0JBQStCO0FBQzVDLGFBQWEsOEJBQThCO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxZQUFZO0FBQ1o7QUFDTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxZQUFZO0FBQ1o7QUFDTztBQUNQOztBQUVBLFNBQVMsK0NBQUs7QUFDZDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFlBQVk7QUFDWjtBQUNPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2RheXMtMjAyMy8uL25vZGVfbW9kdWxlcy9kaWFncmFtLWpzL2xpYi91dGlsL0dlb21ldHJ5LmpzPzZkZTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZXZlcnlcbn0gZnJvbSAnbWluLWRhc2gnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3V0aWwvVHlwZXMnKS5BeGlzfSBBeGlzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi91dGlsL1R5cGVzJykuUG9pbnR9IFBvaW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi91dGlsL1R5cGVzJykuUmVjdH0gUmVjdFxuICovXG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50cy5cbiAqXG4gKiBAcGFyYW0ge1BvaW50fSBhXG4gKiBAcGFyYW0ge1BvaW50fSBiXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHBvaW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvaW50RGlzdGFuY2UoYSwgYikge1xuICBpZiAoIWEgfHwgIWIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICByZXR1cm4gTWF0aC5zcXJ0KFxuICAgIE1hdGgucG93KGEueCAtIGIueCwgMikgK1xuICAgIE1hdGgucG93KGEueSAtIGIueSwgMilcbiAgKTtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcG9pbnQgciBpcyBvbiB0aGUgbGluZSBiZXR3ZWVuIHAgYW5kIHEuXG4gKlxuICogQHBhcmFtIHtQb2ludH0gcFxuICogQHBhcmFtIHtQb2ludH0gcVxuICogQHBhcmFtIHtQb2ludH0gclxuICogQHBhcmFtIHtudW1iZXJ9IFthY2N1cmFjeT01XSBUaGUgYWNjdXJhY3kgd2l0aCB3aGljaCB0byBjaGVjayAobG93ZXIgaXMgYmV0dGVyKS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRzT25MaW5lKHAsIHEsIHIsIGFjY3VyYWN5KSB7XG5cbiAgaWYgKHR5cGVvZiBhY2N1cmFjeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY2N1cmFjeSA9IDU7XG4gIH1cblxuICBpZiAoIXAgfHwgIXEgfHwgIXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgdmFsID0gKHEueCAtIHAueCkgKiAoci55IC0gcC55KSAtIChxLnkgLSBwLnkpICogKHIueCAtIHAueCksXG4gICAgICBkaXN0ID0gcG9pbnREaXN0YW5jZShwLCBxKTtcblxuICAvLyBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzkwNzQ5MS80MTIxOTBcbiAgcmV0dXJuIE1hdGguYWJzKHZhbCAvIGRpc3QpIDw9IGFjY3VyYWN5O1xufVxuXG5cbnZhciBBTElHTkVEX1RIUkVTSE9MRCA9IDI7XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0d28gcG9pbnRzIGFyZSBob3Jpem9udGFsbHkgb3IgdmVydGljYWxseSBhbGlnbmVkLlxuICpcbiAqIEBwYXJhbSB7UG9pbnRbXXxQb2ludH0gYVxuICogQHBhcmFtIHtQb2ludH0gW2JdXG4gKlxuICogQHJldHVybiB7c3RyaW5nfGJvb2xlYW59IElmIGFuZCBob3cgdGhlIHR3byBwb2ludHMgYXJlIGFsaWduZWQgKCdoJywgJ3YnIG9yIGBmYWxzZWApLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRzQWxpZ25lZChhLCBiKSB7XG4gIHZhciBwb2ludHMgPSBBcnJheS5mcm9tKGFyZ3VtZW50cykuZmxhdCgpO1xuXG4gIGNvbnN0IGF4aXNNYXAgPSB7XG4gICAgJ3gnOiAndicsXG4gICAgJ3knOiAnaCdcbiAgfTtcblxuICBmb3IgKGNvbnN0IFsgYXhpcywgb3JpZW50YXRpb24gXSBvZiBPYmplY3QuZW50cmllcyhheGlzTWFwKSkge1xuICAgIGlmIChwb2ludHNBbGlnbmVkT25BeGlzKGF4aXMsIHBvaW50cykpIHtcbiAgICAgIHJldHVybiBvcmllbnRhdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBeGlzfSBheGlzXG4gKiBAcGFyYW0ge1BvaW50W119IHBvaW50c1xuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwb2ludHNBbGlnbmVkT25BeGlzKGF4aXMsIHBvaW50cykge1xuICBjb25zdCByZWZlcmVuY2VQb2ludCA9IHBvaW50c1swXTtcblxuICByZXR1cm4gZXZlcnkocG9pbnRzLCBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBNYXRoLmFicyhyZWZlcmVuY2VQb2ludFtheGlzXSAtIHBvaW50W2F4aXNdKSA8PSBBTElHTkVEX1RIUkVTSE9MRDtcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwb2ludCBwIGlzIGluc2lkZSB0aGUgcmVjdGFuZ2xlIHJlY3RcbiAqXG4gKiBAcGFyYW0ge1BvaW50fSBwXG4gKiBAcGFyYW0ge1JlY3R9IHJlY3RcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b2xlcmFuY2VcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRJblJlY3QocCwgcmVjdCwgdG9sZXJhbmNlKSB7XG4gIHRvbGVyYW5jZSA9IHRvbGVyYW5jZSB8fCAwO1xuXG4gIHJldHVybiBwLnggPiByZWN0LnggLSB0b2xlcmFuY2UgJiZcbiAgICAgICAgIHAueSA+IHJlY3QueSAtIHRvbGVyYW5jZSAmJlxuICAgICAgICAgcC54IDwgcmVjdC54ICsgcmVjdC53aWR0aCArIHRvbGVyYW5jZSAmJlxuICAgICAgICAgcC55IDwgcmVjdC55ICsgcmVjdC5oZWlnaHQgKyB0b2xlcmFuY2U7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHBvaW50IGluIHRoZSBtaWRkbGUgb2YgcG9pbnRzIHAgYW5kIHFcbiAqXG4gKiBAcGFyYW0ge1BvaW50fSBwXG4gKiBAcGFyYW0ge1BvaW50fSBxXG4gKlxuICogQHJldHVybiB7UG9pbnR9IFRoZSBtaWQgcG9pbnQgYmV0d2VlbiB0aGUgdHdvIHBvaW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1pZFBvaW50KHAsIHEpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBNYXRoLnJvdW5kKHAueCArICgocS54IC0gcC54KSAvIDIuMCkpLFxuICAgIHk6IE1hdGgucm91bmQocC55ICsgKChxLnkgLSBwLnkpIC8gMi4wKSlcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/diagram-js/lib/util/Geometry.js\n");

/***/ }),

/***/ "./node_modules/diagram-js/lib/util/ModelUtil.js":
/*!*******************************************************!*\
  !*** ./node_modules/diagram-js/lib/util/ModelUtil.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isConnection: () => (/* binding */ isConnection),\n/* harmony export */   isLabel: () => (/* binding */ isLabel),\n/* harmony export */   isRoot: () => (/* binding */ isRoot)\n/* harmony export */ });\n/* harmony import */ var min_dash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! min-dash */ \"./node_modules/min-dash/dist/index.esm.js\");\n\n\n/**\n * Checks whether a value is an instance of Connection.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nfunction isConnection(value) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.has)(value, 'waypoints');\n}\n\n/**\n * Checks whether a value is an instance of Label.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nfunction isLabel(value) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.has)(value, 'labelTarget');\n}\n\n/**\n * Checks whether a value is an instance of Root.\n *\n * @param {any} value\n *\n * @return {boolean}\n */\nfunction isRoot(value) {\n  return (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && (0,min_dash__WEBPACK_IMPORTED_MODULE_0__.isNil)(value.parent);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ3JhbS1qcy9saWIvdXRpbC9Nb2RlbFV0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0EsWUFBWTtBQUNaO0FBQ087QUFDUCxTQUFTLGtEQUFRLFdBQVcsNkNBQUc7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0EsWUFBWTtBQUNaO0FBQ087QUFDUCxTQUFTLGtEQUFRLFdBQVcsNkNBQUc7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0EsWUFBWTtBQUNaO0FBQ087QUFDUCxTQUFTLGtEQUFRLFdBQVcsK0NBQUs7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrZGF5cy0yMDIzLy4vbm9kZV9tb2R1bGVzL2RpYWdyYW0tanMvbGliL3V0aWwvTW9kZWxVdGlsLmpzP2ZjMDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgaGFzLFxuICBpc05pbCxcbiAgaXNPYmplY3Rcbn0gZnJvbSAnbWluLWRhc2gnO1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGEgdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgQ29ubmVjdGlvbi5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDb25uZWN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWx1ZSkgJiYgaGFzKHZhbHVlLCAnd2F5cG9pbnRzJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBMYWJlbC5cbiAqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMYWJlbCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIGhhcyh2YWx1ZSwgJ2xhYmVsVGFyZ2V0Jyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBSb290LlxuICpcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Jvb3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiBpc05pbCh2YWx1ZS5wYXJlbnQpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/diagram-js/lib/util/ModelUtil.js\n");

/***/ }),

/***/ "./node_modules/diagram-js/lib/util/Mouse.js":
/*!***************************************************!*\
  !*** ./node_modules/diagram-js/lib/util/Mouse.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasPrimaryModifier: () => (/* binding */ hasPrimaryModifier),\n/* harmony export */   hasSecondaryModifier: () => (/* binding */ hasSecondaryModifier),\n/* harmony export */   isAuxiliaryButton: () => (/* binding */ isAuxiliaryButton),\n/* harmony export */   isButton: () => (/* binding */ isButton),\n/* harmony export */   isMac: () => (/* reexport safe */ _Platform__WEBPACK_IMPORTED_MODULE_0__.isMac),\n/* harmony export */   isPrimaryButton: () => (/* binding */ isPrimaryButton),\n/* harmony export */   isSecondaryButton: () => (/* binding */ isSecondaryButton)\n/* harmony export */ });\n/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ \"./node_modules/diagram-js/lib/util/Event.js\");\n/* harmony import */ var _Platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Platform */ \"./node_modules/diagram-js/lib/util/Platform.js\");\n\n\n\n\n\n\n/**\n * @param {MouseEvent} event\n * @param {string} button\n *\n * @return {boolean}\n */\nfunction isButton(event, button) {\n  return ((0,_Event__WEBPACK_IMPORTED_MODULE_1__.getOriginal)(event) || event).button === button;\n}\n\n/**\n * @param {MouseEvent} event\n *\n * @return {boolean}\n */\nfunction isPrimaryButton(event) {\n\n  // button === 0 -> left áka primary mouse button\n  return isButton(event, 0);\n}\n\n/**\n * @param {MouseEvent} event\n *\n * @return {boolean}\n */\nfunction isAuxiliaryButton(event) {\n\n  // button === 1 -> auxiliary áka wheel button\n  return isButton(event, 1);\n}\n\n/**\n * @param {MouseEvent} event\n *\n * @return {boolean}\n */\nfunction isSecondaryButton(event) {\n\n  // button === 2 -> right áka secondary button\n  return isButton(event, 2);\n}\n\n/**\n * @param {MouseEvent} event\n *\n * @return {boolean}\n */\nfunction hasPrimaryModifier(event) {\n  var originalEvent = (0,_Event__WEBPACK_IMPORTED_MODULE_1__.getOriginal)(event) || event;\n\n  if (!isPrimaryButton(event)) {\n    return false;\n  }\n\n  // Use cmd as primary modifier key for mac OS\n  if ((0,_Platform__WEBPACK_IMPORTED_MODULE_0__.isMac)()) {\n    return originalEvent.metaKey;\n  } else {\n    return originalEvent.ctrlKey;\n  }\n}\n\n/**\n * @param {MouseEvent} event\n *\n * @return {boolean}\n */\nfunction hasSecondaryModifier(event) {\n  var originalEvent = (0,_Event__WEBPACK_IMPORTED_MODULE_1__.getOriginal)(event) || event;\n\n  return isPrimaryButton(event) && originalEvent.shiftKey;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ3JhbS1qcy9saWIvdXRpbC9Nb3VzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFFaUI7O0FBSUc7O0FBSUE7O0FBRXBCO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFlBQVk7QUFDWjtBQUNPO0FBQ1AsVUFBVSxtREFBZ0I7QUFDMUI7O0FBRUE7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQSxZQUFZO0FBQ1o7QUFDTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQSxZQUFZO0FBQ1o7QUFDTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQSxZQUFZO0FBQ1o7QUFDTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQSxZQUFZO0FBQ1o7QUFDTztBQUNQLHNCQUFzQixtREFBZ0I7O0FBRXRDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU0sZ0RBQUs7QUFDWDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQSxZQUFZO0FBQ1o7QUFDTztBQUNQLHNCQUFzQixtREFBZ0I7O0FBRXRDO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrZGF5cy0yMDIzLy4vbm9kZV9tb2R1bGVzL2RpYWdyYW0tanMvbGliL3V0aWwvTW91c2UuanM/NzhmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBnZXRPcmlnaW5hbCBhcyBnZXRPcmlnaW5hbEV2ZW50XG59IGZyb20gJy4vRXZlbnQnO1xuXG5pbXBvcnQge1xuICBpc01hY1xufSBmcm9tICcuL1BsYXRmb3JtJztcblxuZXhwb3J0IHtcbiAgaXNNYWNcbn0gZnJvbSAnLi9QbGF0Zm9ybSc7XG5cbi8qKlxuICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGJ1dHRvblxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0J1dHRvbihldmVudCwgYnV0dG9uKSB7XG4gIHJldHVybiAoZ2V0T3JpZ2luYWxFdmVudChldmVudCkgfHwgZXZlbnQpLmJ1dHRvbiA9PT0gYnV0dG9uO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltYXJ5QnV0dG9uKGV2ZW50KSB7XG5cbiAgLy8gYnV0dG9uID09PSAwIC0+IGxlZnQgw6FrYSBwcmltYXJ5IG1vdXNlIGJ1dHRvblxuICByZXR1cm4gaXNCdXR0b24oZXZlbnQsIDApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBdXhpbGlhcnlCdXR0b24oZXZlbnQpIHtcblxuICAvLyBidXR0b24gPT09IDEgLT4gYXV4aWxpYXJ5IMOha2Egd2hlZWwgYnV0dG9uXG4gIHJldHVybiBpc0J1dHRvbihldmVudCwgMSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudFxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NlY29uZGFyeUJ1dHRvbihldmVudCkge1xuXG4gIC8vIGJ1dHRvbiA9PT0gMiAtPiByaWdodCDDoWthIHNlY29uZGFyeSBidXR0b25cbiAgcmV0dXJuIGlzQnV0dG9uKGV2ZW50LCAyKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50XG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1ByaW1hcnlNb2RpZmllcihldmVudCkge1xuICB2YXIgb3JpZ2luYWxFdmVudCA9IGdldE9yaWdpbmFsRXZlbnQoZXZlbnQpIHx8IGV2ZW50O1xuXG4gIGlmICghaXNQcmltYXJ5QnV0dG9uKGV2ZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFVzZSBjbWQgYXMgcHJpbWFyeSBtb2RpZmllciBrZXkgZm9yIG1hYyBPU1xuICBpZiAoaXNNYWMoKSkge1xuICAgIHJldHVybiBvcmlnaW5hbEV2ZW50Lm1ldGFLZXk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9yaWdpbmFsRXZlbnQuY3RybEtleTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzU2Vjb25kYXJ5TW9kaWZpZXIoZXZlbnQpIHtcbiAgdmFyIG9yaWdpbmFsRXZlbnQgPSBnZXRPcmlnaW5hbEV2ZW50KGV2ZW50KSB8fCBldmVudDtcblxuICByZXR1cm4gaXNQcmltYXJ5QnV0dG9uKGV2ZW50KSAmJiBvcmlnaW5hbEV2ZW50LnNoaWZ0S2V5O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/diagram-js/lib/util/Mouse.js\n");

/***/ }),

/***/ "./node_modules/diagram-js/lib/util/Platform.js":
/*!******************************************************!*\
  !*** ./node_modules/diagram-js/lib/util/Platform.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMac: () => (/* binding */ isMac)\n/* harmony export */ });\nfunction isMac() {\n  return (/mac/i).test(navigator.platform);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGlhZ3JhbS1qcy9saWIvdXRpbC9QbGF0Zm9ybS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2RheXMtMjAyMy8uL25vZGVfbW9kdWxlcy9kaWFncmFtLWpzL2xpYi91dGlsL1BsYXRmb3JtLmpzPzExNjUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzTWFjKCkge1xuICByZXR1cm4gKC9tYWMvaSkudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/diagram-js/lib/util/Platform.js\n");

/***/ }),

/***/ "./node_modules/min-dom/dist/index.esm.js":
/*!************************************************!*\
  !*** ./node_modules/min-dom/dist/index.esm.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignStyle: () => (/* binding */ assign),\n/* harmony export */   attr: () => (/* binding */ attr),\n/* harmony export */   classes: () => (/* binding */ classes),\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   closest: () => (/* binding */ closest),\n/* harmony export */   delegate: () => (/* binding */ delegate),\n/* harmony export */   domify: () => (/* binding */ domify$1),\n/* harmony export */   event: () => (/* binding */ event),\n/* harmony export */   matches: () => (/* binding */ matches),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   queryAll: () => (/* binding */ all),\n/* harmony export */   remove: () => (/* binding */ remove)\n/* harmony export */ });\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function (e) {\n    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {\n      if (k !== 'default' && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n\n/**\n * Flatten array, one level deep.\n *\n * @param {Array<?>} arr\n *\n * @return {Array<?>}\n */\n\nconst nativeToString = Object.prototype.toString;\nconst nativeHasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isUndefined(obj) {\n  return obj === undefined;\n}\n\nfunction isArray(obj) {\n  return nativeToString.call(obj) === '[object Array]';\n}\n\n/**\n * Return true, if target owns a property with the given key.\n *\n * @param {Object} target\n * @param {String} key\n *\n * @return {Boolean}\n */\nfunction has(target, key) {\n  return nativeHasOwnProperty.call(target, key);\n}\n\n\n/**\n * Iterate over collection; returning something\n * (non-undefined) will stop iteration.\n *\n * @param  {Array|Object} collection\n * @param  {Function} iterator\n *\n * @return {Object} return result that stopped the iteration\n */\nfunction forEach(collection, iterator) {\n\n  let val,\n      result;\n\n  if (isUndefined(collection)) {\n    return;\n  }\n\n  const convertKey = isArray(collection) ? toNum : identity;\n\n  for (let key in collection) {\n\n    if (has(collection, key)) {\n      val = collection[key];\n\n      result = iterator(val, convertKey(key));\n\n      if (result === false) {\n        return val;\n      }\n    }\n  }\n}\n\n\nfunction identity(arg) {\n  return arg;\n}\n\nfunction toNum(arg) {\n  return Number(arg);\n}\n\n/**\n * Assigns style attributes in a style-src compliant way.\n *\n * @param {Element} element\n * @param {...Object} styleSources\n *\n * @return {Element} the element\n */\nfunction assign(element, ...styleSources) {\n  const target = element.style;\n\n  forEach(styleSources, function(style) {\n    if (!style) {\n      return;\n    }\n\n    forEach(style, function(value, key) {\n      target[key] = value;\n    });\n  });\n\n  return element;\n}\n\n/**\n * Set attribute `name` to `val`, or get attr `name`.\n *\n * @param {Element} el\n * @param {String} name\n * @param {String} [val]\n * @api public\n */\nfunction attr(el, name, val) {\n\n  // get\n  if (arguments.length == 2) {\n    return el.getAttribute(name);\n  }\n\n  // remove\n  if (val === null) {\n    return el.removeAttribute(name);\n  }\n\n  // set\n  el.setAttribute(name, val);\n\n  return el;\n}\n\n/**\n * Taken from https://github.com/component/classes\n *\n * Without the component bits.\n */\n\n/**\n * toString reference.\n */\n\nconst toString = Object.prototype.toString;\n\n/**\n * Wrap `el` in a `ClassList`.\n *\n * @param {Element} el\n * @return {ClassList}\n * @api public\n */\n\nfunction classes(el) {\n  return new ClassList(el);\n}\n\n/**\n * Initialize a new ClassList for `el`.\n *\n * @param {Element} el\n * @api private\n */\n\nfunction ClassList(el) {\n  if (!el || !el.nodeType) {\n    throw new Error('A DOM element reference is required');\n  }\n  this.el = el;\n  this.list = el.classList;\n}\n\n/**\n * Add class `name` if not already present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.add = function(name) {\n  this.list.add(name);\n  return this;\n};\n\n/**\n * Remove class `name` when present, or\n * pass a regular expression to remove\n * any which match.\n *\n * @param {String|RegExp} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.remove = function(name) {\n  if ('[object RegExp]' == toString.call(name)) {\n    return this.removeMatching(name);\n  }\n\n  this.list.remove(name);\n  return this;\n};\n\n/**\n * Remove all classes matching `re`.\n *\n * @param {RegExp} re\n * @return {ClassList}\n * @api private\n */\n\nClassList.prototype.removeMatching = function(re) {\n  const arr = this.array();\n  for (let i = 0; i < arr.length; i++) {\n    if (re.test(arr[i])) {\n      this.remove(arr[i]);\n    }\n  }\n  return this;\n};\n\n/**\n * Toggle class `name`, can force state via `force`.\n *\n * For browsers that support classList, but do not support `force` yet,\n * the mistake will be detected and corrected.\n *\n * @param {String} name\n * @param {Boolean} force\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.toggle = function(name, force) {\n  if ('undefined' !== typeof force) {\n    if (force !== this.list.toggle(name, force)) {\n      this.list.toggle(name); // toggle again to correct\n    }\n  } else {\n    this.list.toggle(name);\n  }\n  return this;\n};\n\n/**\n * Return an array of classes.\n *\n * @return {Array}\n * @api public\n */\n\nClassList.prototype.array = function() {\n  return Array.from(this.list);\n};\n\n/**\n * Check if class `name` is present.\n *\n * @param {String} name\n * @return {ClassList}\n * @api public\n */\n\nClassList.prototype.has =\nClassList.prototype.contains = function(name) {\n  return this.list.contains(name);\n};\n\n/**\n * Remove all children from the given element.\n */\nfunction clear(el) {\n\n  var c;\n\n  while (el.childNodes.length) {\n    c = el.childNodes[0];\n    el.removeChild(c);\n  }\n\n  return el;\n}\n\n/**\n * @param { HTMLElement } element\n * @param { String } selector\n *\n * @return { boolean }\n */\nfunction matches(element, selector) {\n  return element && typeof element.matches === 'function' && element.matches(selector);\n}\n\n/**\n * Closest\n *\n * @param {Element} el\n * @param {String} selector\n * @param {Boolean} checkYourSelf (optional)\n */\nfunction closest(element, selector, checkYourSelf) {\n  var currentElem = checkYourSelf ? element : element.parentNode;\n\n  while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE &&\n      currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {\n\n    if (matches(currentElem, selector)) {\n      return currentElem;\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return matches(currentElem, selector) ? currentElem : null;\n}\n\nvar componentEvent = {};\n\nvar bind$1, unbind$1, prefix;\n\nfunction detect () {\n  bind$1 = window.addEventListener ? 'addEventListener' : 'attachEvent';\n  unbind$1 = window.removeEventListener ? 'removeEventListener' : 'detachEvent';\n  prefix = bind$1 !== 'addEventListener' ? 'on' : '';\n}\n\n/**\n * Bind `el` event `type` to `fn`.\n *\n * @param {Element} el\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @return {Function}\n * @api public\n */\n\nvar bind_1 = componentEvent.bind = function(el, type, fn, capture){\n  if (!bind$1) detect();\n  el[bind$1](prefix + type, fn, capture || false);\n  return fn;\n};\n\n/**\n * Unbind `el` event `type`'s callback `fn`.\n *\n * @param {Element} el\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @return {Function}\n * @api public\n */\n\nvar unbind_1 = componentEvent.unbind = function(el, type, fn, capture){\n  if (!unbind$1) detect();\n  el[unbind$1](prefix + type, fn, capture || false);\n  return fn;\n};\n\nvar event = /*#__PURE__*/_mergeNamespaces({\n  __proto__: null,\n  bind: bind_1,\n  unbind: unbind_1,\n  'default': componentEvent\n}, [componentEvent]);\n\n/**\n * Module dependencies.\n */\n\n/**\n * Delegate event `type` to `selector`\n * and invoke `fn(e)`. A callback function\n * is returned which may be passed to `.unbind()`.\n *\n * @param {Element} el\n * @param {String} selector\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @return {Function}\n * @api public\n */\n\n// Some events don't bubble, so we want to bind to the capture phase instead\n// when delegating.\nvar forceCaptureEvents = [ 'focus', 'blur' ];\n\nfunction bind(el, selector, type, fn, capture) {\n  if (forceCaptureEvents.indexOf(type) !== -1) {\n    capture = true;\n  }\n\n  return event.bind(el, type, function(e) {\n    var target = e.target || e.srcElement;\n    e.delegateTarget = closest(target, selector, true);\n    if (e.delegateTarget) {\n      fn.call(el, e);\n    }\n  }, capture);\n}\n\n/**\n * Unbind event `type`'s callback `fn`.\n *\n * @param {Element} el\n * @param {String} type\n * @param {Function} fn\n * @param {Boolean} capture\n * @api public\n */\nfunction unbind(el, type, fn, capture) {\n  if (forceCaptureEvents.indexOf(type) !== -1) {\n    capture = true;\n  }\n\n  return event.unbind(el, type, fn, capture);\n}\n\nvar delegate = {\n  bind,\n  unbind\n};\n\n/**\n * Expose `parse`.\n */\n\nvar domify = parse;\n\n/**\n * Tests for browser support.\n */\n\nvar innerHTMLBug = false;\nvar bugTestDiv;\nif (typeof document !== 'undefined') {\n  bugTestDiv = document.createElement('div');\n  // Setup\n  bugTestDiv.innerHTML = '  <link/><table></table><a href=\"/a\">a</a><input type=\"checkbox\"/>';\n  // Make sure that link elements get serialized correctly by innerHTML\n  // This requires a wrapper element in IE\n  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;\n  bugTestDiv = undefined;\n}\n\n/**\n * Wrap map from jquery.\n */\n\nvar map = {\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  // for script/link/style tags to work in IE6-8, you have to wrap\n  // in a div with a non-whitespace character in front, ha!\n  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']\n};\n\nmap.td =\nmap.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nmap.option =\nmap.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nmap.thead =\nmap.tbody =\nmap.colgroup =\nmap.caption =\nmap.tfoot = [1, '<table>', '</table>'];\n\nmap.polyline =\nmap.ellipse =\nmap.polygon =\nmap.circle =\nmap.text =\nmap.line =\nmap.path =\nmap.rect =\nmap.g = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">','</svg>'];\n\n/**\n * Parse `html` and return a DOM Node instance, which could be a TextNode,\n * HTML DOM Node of some kind (<div> for example), or a DocumentFragment\n * instance, depending on the contents of the `html` string.\n *\n * @param {String} html - HTML string to \"domify\"\n * @param {Document} doc - The `document` instance to create the Node for\n * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance\n * @api private\n */\n\nfunction parse(html, doc) {\n  if ('string' != typeof html) throw new TypeError('String expected');\n\n  // default to the global `document` object\n  if (!doc) doc = document;\n\n  // tag name\n  var m = /<([\\w:]+)/.exec(html);\n  if (!m) return doc.createTextNode(html);\n\n  html = html.replace(/^\\s+|\\s+$/g, ''); // Remove leading/trailing whitespace\n\n  var tag = m[1];\n\n  // body support\n  if (tag == 'body') {\n    var el = doc.createElement('html');\n    el.innerHTML = html;\n    return el.removeChild(el.lastChild);\n  }\n\n  // wrap map\n  var wrap = Object.prototype.hasOwnProperty.call(map, tag) ? map[tag] : map._default;\n  var depth = wrap[0];\n  var prefix = wrap[1];\n  var suffix = wrap[2];\n  var el = doc.createElement('div');\n  el.innerHTML = prefix + html + suffix;\n  while (depth--) el = el.lastChild;\n\n  // one element\n  if (el.firstChild == el.lastChild) {\n    return el.removeChild(el.firstChild);\n  }\n\n  // several elements\n  var fragment = doc.createDocumentFragment();\n  while (el.firstChild) {\n    fragment.appendChild(el.removeChild(el.firstChild));\n  }\n\n  return fragment;\n}\n\nvar domify$1 = domify;\n\nfunction query(selector, el) {\n  el = el || document;\n\n  return el.querySelector(selector);\n}\n\nfunction all(selector, el) {\n  el = el || document;\n\n  return el.querySelectorAll(selector);\n}\n\nfunction remove(el) {\n  el.parentNode && el.parentNode.removeChild(el);\n}\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/min-dom/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/path-intersection/intersect.js":
/*!*****************************************************!*\
  !*** ./node_modules/path-intersection/intersect.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\n/**\n * This file contains source code adapted from Snap.svg (licensed Apache-2.0).\n *\n * @see https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js\n */\n\n/* eslint no-fallthrough: \"off\" */\n\nvar p2s = /,?([a-z]),?/gi,\n    toFloat = parseFloat,\n    math = Math,\n    PI = math.PI,\n    mmin = math.min,\n    mmax = math.max,\n    pow = math.pow,\n    abs = math.abs,\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[-+]?\\d+)?)[\\s]*,?[\\s]*/ig;\n\nvar isArray = Array.isArray || function(o) { return o instanceof Array; };\n\nfunction hasProperty(obj, property) {\n  return Object.prototype.hasOwnProperty.call(obj, property);\n}\n\nfunction clone(obj) {\n\n  if (typeof obj == 'function' || Object(obj) !== obj) {\n    return obj;\n  }\n\n  var res = new obj.constructor;\n\n  for (var key in obj) {\n    if (hasProperty(obj, key)) {\n      res[key] = clone(obj[key]);\n    }\n  }\n\n  return res;\n}\n\nfunction repush(array, item) {\n  for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n    return array.push(array.splice(i, 1)[0]);\n  }\n}\n\nfunction cacher(f) {\n\n  function newf() {\n\n    var arg = Array.prototype.slice.call(arguments, 0),\n        args = arg.join('\\u2400'),\n        cache = newf.cache = newf.cache || {},\n        count = newf.count = newf.count || [];\n\n    if (hasProperty(cache, args)) {\n      repush(count, args);\n      return cache[args];\n    }\n\n    count.length >= 1e3 && delete cache[count.shift()];\n    count.push(args);\n    cache[args] = f.apply(0, arg);\n\n    return cache[args];\n  }\n  return newf;\n}\n\nfunction parsePathString(pathString) {\n\n  if (!pathString) {\n    return null;\n  }\n\n  var pth = paths(pathString);\n\n  if (pth.arr) {\n    return clone(pth.arr);\n  }\n\n  var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },\n      data = [];\n\n  if (isArray(pathString) && isArray(pathString[0])) { // rough assumption\n    data = clone(pathString);\n  }\n\n  if (!data.length) {\n\n    String(pathString).replace(pathCommand, function(a, b, c) {\n      var params = [],\n          name = b.toLowerCase();\n\n      c.replace(pathValues, function(a, b) {\n        b && params.push(+b);\n      });\n\n      if (name == 'm' && params.length > 2) {\n        data.push([b].concat(params.splice(0, 2)));\n        name = 'l';\n        b = b == 'm' ? 'l' : 'L';\n      }\n\n      while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    });\n  }\n\n  data.toString = paths.toString;\n  pth.arr = clone(data);\n\n  return data;\n}\n\nfunction paths(ps) {\n  var p = paths.ps = paths.ps || {};\n\n  if (p[ps]) {\n    p[ps].sleep = 100;\n  } else {\n    p[ps] = {\n      sleep: 100\n    };\n  }\n\n  setTimeout(function() {\n    for (var key in p) {\n      if (hasProperty(p, key) && key != ps) {\n        p[key].sleep--;\n        !p[key].sleep && delete p[key];\n      }\n    }\n  });\n\n  return p[ps];\n}\n\nfunction rectBBox(x, y, width, height) {\n\n  if (arguments.length === 1) {\n    y = x.y;\n    width = x.width;\n    height = x.height;\n    x = x.x;\n  }\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    x2: x + width,\n    y2: y + height\n  };\n}\n\nfunction pathToString() {\n  return this.join(',').replace(p2s, '$1');\n}\n\nfunction pathClone(pathArray) {\n  var res = clone(pathArray);\n  res.toString = pathToString;\n  return res;\n}\n\nfunction findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n  var t1 = 1 - t,\n      t13 = pow(t1, 3),\n      t12 = pow(t1, 2),\n      t2 = t * t,\n      t3 = t2 * t,\n      x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n      y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n\n  return {\n    x: fixError(x),\n    y: fixError(y)\n  };\n}\n\nfunction bezierBBox(points) {\n\n  var bbox = curveBBox.apply(null, points);\n\n  return rectBBox(\n    bbox.x0,\n    bbox.y0,\n    bbox.x1 - bbox.x0,\n    bbox.y1 - bbox.y0\n  );\n}\n\nfunction isPointInsideBBox(bbox, x, y) {\n  return x >= bbox.x &&\n    x <= bbox.x + bbox.width &&\n    y >= bbox.y &&\n    y <= bbox.y + bbox.height;\n}\n\nfunction isBBoxIntersect(bbox1, bbox2) {\n  bbox1 = rectBBox(bbox1);\n  bbox2 = rectBBox(bbox2);\n  return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n    || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n    || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n        || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n    && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n        || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n}\n\nfunction base3(t, p1, p2, p3, p4) {\n  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n      t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n  return t * t2 - 3 * p1 + 3 * p2;\n}\n\nfunction bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\n  if (z == null) {\n    z = 1;\n  }\n\n  z = z > 1 ? 1 : z < 0 ? 0 : z;\n\n  var z2 = z / 2,\n      n = 12,\n      Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n      Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n      sum = 0;\n\n  for (var i = 0; i < n; i++) {\n    var ct = z2 * Tvalues[i] + z2,\n        xbase = base3(ct, x1, x2, x3, x4),\n        ybase = base3(ct, y1, y2, y3, y4),\n        comb = xbase * xbase + ybase * ybase;\n\n    sum += Cvalues[i] * math.sqrt(comb);\n  }\n\n  return z2 * sum;\n}\n\n\nfunction intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {\n\n  if (\n    mmax(x1, x2) < mmin(x3, x4) ||\n      mmin(x1, x2) > mmax(x3, x4) ||\n      mmax(y1, y2) < mmin(y3, y4) ||\n      mmin(y1, y2) > mmax(y3, y4)\n  ) {\n    return;\n  }\n\n  var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n  if (!denominator) {\n    return;\n  }\n\n  var px = fixError(nx / denominator),\n      py = fixError(ny / denominator),\n      px2 = +px.toFixed(2),\n      py2 = +py.toFixed(2);\n\n  if (\n    px2 < +mmin(x1, x2).toFixed(2) ||\n      px2 > +mmax(x1, x2).toFixed(2) ||\n      px2 < +mmin(x3, x4).toFixed(2) ||\n      px2 > +mmax(x3, x4).toFixed(2) ||\n      py2 < +mmin(y1, y2).toFixed(2) ||\n      py2 > +mmax(y1, y2).toFixed(2) ||\n      py2 < +mmin(y3, y4).toFixed(2) ||\n      py2 > +mmax(y3, y4).toFixed(2)\n  ) {\n    return;\n  }\n\n  return { x: px, y: py };\n}\n\nfunction fixError(number) {\n  return Math.round(number * 100000000000) / 100000000000;\n}\n\nfunction findBezierIntersections(bez1, bez2, justCount) {\n  var bbox1 = bezierBBox(bez1),\n      bbox2 = bezierBBox(bez2);\n\n  if (!isBBoxIntersect(bbox1, bbox2)) {\n    return justCount ? 0 : [];\n  }\n\n  // As an optimization, lines will have only 1 segment\n\n  var l1 = bezlen.apply(0, bez1),\n      l2 = bezlen.apply(0, bez2),\n      n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1,\n      n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1,\n      dots1 = [],\n      dots2 = [],\n      xy = {},\n      res = justCount ? 0 : [];\n\n  for (var i = 0; i < n1 + 1; i++) {\n    var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n    dots1.push({ x: p.x, y: p.y, t: i / n1 });\n  }\n\n  for (i = 0; i < n2 + 1; i++) {\n    p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n    dots2.push({ x: p.x, y: p.y, t: i / n2 });\n  }\n\n  for (i = 0; i < n1; i++) {\n\n    for (var j = 0; j < n2; j++) {\n      var di = dots1[i],\n          di1 = dots1[i + 1],\n          dj = dots2[j],\n          dj1 = dots2[j + 1],\n          ci = abs(di1.x - di.x) < .01 ? 'y' : 'x',\n          cj = abs(dj1.x - dj.x) < .01 ? 'y' : 'x',\n          is = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y),\n          key;\n\n      if (is) {\n        key = is.x.toFixed(9) + '#' + is.y.toFixed(9);\n\n        if (xy[key]) {\n          continue;\n        }\n\n        xy[key] = true;\n\n        var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n            t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\n        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\n          if (justCount) {\n            res++;\n          } else {\n            res.push({\n              x: is.x,\n              y: is.y,\n              t1: t1,\n              t2: t2\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return res;\n}\n\n\n/**\n * Find or counts the intersections between two SVG paths.\n *\n * Returns a number in counting mode and a list of intersections otherwise.\n *\n * A single intersection entry contains the intersection coordinates (x, y)\n * as well as additional information regarding the intersecting segments\n * on each path (segment1, segment2) and the relative location of the\n * intersection on these segments (t1, t2).\n *\n * The path may be an SVG path string or a list of path components\n * such as `[ [ 'M', 0, 10 ], [ 'L', 20, 0 ] ]`.\n *\n * @example\n *\n * var intersections = findPathIntersections(\n *   'M0,0L100,100',\n *   [ [ 'M', 0, 100 ], [ 'L', 100, 0 ] ]\n * );\n *\n * // intersections = [\n * //   { x: 50, y: 50, segment1: 1, segment2: 1, t1: 0.5, t2: 0.5 }\n * // ]\n *\n * @param {String|Array<PathDef>} path1\n * @param {String|Array<PathDef>} path2\n * @param {Boolean} [justCount=false]\n *\n * @return {Array<Intersection>|Number}\n */\nfunction findPathIntersections(path1, path2, justCount) {\n  path1 = pathToCurve(path1);\n  path2 = pathToCurve(path2);\n\n  var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n      res = justCount ? 0 : [];\n\n  for (var i = 0, ii = path1.length; i < ii; i++) {\n    var pi = path1[i];\n\n    if (pi[0] == 'M') {\n      x1 = x1m = pi[1];\n      y1 = y1m = pi[2];\n    } else {\n\n      if (pi[0] == 'C') {\n        bez1 = [x1, y1].concat(pi.slice(1));\n        x1 = bez1[6];\n        y1 = bez1[7];\n      } else {\n        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n        x1 = x1m;\n        y1 = y1m;\n      }\n\n      for (var j = 0, jj = path2.length; j < jj; j++) {\n        var pj = path2[j];\n\n        if (pj[0] == 'M') {\n          x2 = x2m = pj[1];\n          y2 = y2m = pj[2];\n        } else {\n\n          if (pj[0] == 'C') {\n            bez2 = [x2, y2].concat(pj.slice(1));\n            x2 = bez2[6];\n            y2 = bez2[7];\n          } else {\n            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n            x2 = x2m;\n            y2 = y2m;\n          }\n\n          var intr = findBezierIntersections(bez1, bez2, justCount);\n\n          if (justCount) {\n            res += intr;\n          } else {\n\n            for (var k = 0, kk = intr.length; k < kk; k++) {\n              intr[k].segment1 = i;\n              intr[k].segment2 = j;\n              intr[k].bez1 = bez1;\n              intr[k].bez2 = bez2;\n            }\n\n            res = res.concat(intr);\n          }\n        }\n      }\n    }\n  }\n\n  return res;\n}\n\n\nfunction pathToAbsolute(pathArray) {\n  var pth = paths(pathArray);\n\n  if (pth.abs) {\n    return pathClone(pth.abs);\n  }\n\n  if (!isArray(pathArray) || !isArray(pathArray && pathArray[0])) { // rough assumption\n    pathArray = parsePathString(pathArray);\n  }\n\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n\n  var res = [],\n      x = 0,\n      y = 0,\n      mx = 0,\n      my = 0,\n      start = 0,\n      pa0;\n\n  if (pathArray[0][0] == 'M') {\n    x = +pathArray[0][1];\n    y = +pathArray[0][2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n\n  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n    res.push(r = []);\n    pa = pathArray[i];\n    pa0 = pa[0];\n\n    if (pa0 != pa0.toUpperCase()) {\n      r[0] = pa0.toUpperCase();\n\n      switch (r[0]) {\n      case 'A':\n        r[1] = pa[1];\n        r[2] = pa[2];\n        r[3] = pa[3];\n        r[4] = pa[4];\n        r[5] = pa[5];\n        r[6] = +pa[6] + x;\n        r[7] = +pa[7] + y;\n        break;\n      case 'V':\n        r[1] = +pa[1] + y;\n        break;\n      case 'H':\n        r[1] = +pa[1] + x;\n        break;\n      case 'M':\n        mx = +pa[1] + x;\n        my = +pa[2] + y;\n      default:\n        for (var j = 1, jj = pa.length; j < jj; j++) {\n          r[j] = +pa[j] + ((j % 2) ? x : y);\n        }\n      }\n    } else {\n      for (var k = 0, kk = pa.length; k < kk; k++) {\n        r[k] = pa[k];\n      }\n    }\n    pa0 = pa0.toUpperCase();\n\n    switch (r[0]) {\n    case 'Z':\n      x = +mx;\n      y = +my;\n      break;\n    case 'H':\n      x = r[1];\n      break;\n    case 'V':\n      y = r[1];\n      break;\n    case 'M':\n      mx = r[r.length - 2];\n      my = r[r.length - 1];\n    default:\n      x = r[r.length - 2];\n      y = r[r.length - 1];\n    }\n  }\n\n  res.toString = pathToString;\n  pth.abs = pathClone(res);\n\n  return res;\n}\n\nfunction isLine(bez) {\n  return (\n    bez[0] === bez[2] &&\n    bez[1] === bez[3] &&\n    bez[4] === bez[6] &&\n    bez[5] === bez[7]\n  );\n}\n\nfunction lineToCurve(x1, y1, x2, y2) {\n  return [\n    x1, y1, x2,\n    y2, x2, y2\n  ];\n}\n\nfunction qubicToCurve(x1, y1, ax, ay, x2, y2) {\n  var _13 = 1 / 3,\n      _23 = 2 / 3;\n\n  return [\n    _13 * x1 + _23 * ax,\n    _13 * y1 + _23 * ay,\n    _13 * x2 + _23 * ax,\n    _13 * y2 + _23 * ay,\n    x2,\n    y2\n  ];\n}\n\nfunction arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  var _120 = PI * 120 / 180,\n      rad = PI / 180 * (+angle || 0),\n      res = [],\n      xy,\n      rotate = cacher(function(x, y, rad) {\n        var X = x * math.cos(rad) - y * math.sin(rad),\n            Y = x * math.sin(rad) + y * math.cos(rad);\n\n        return { x: X, y: Y };\n      });\n\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n\n    var x = (x1 - x2) / 2,\n        y = (y1 - y2) / 2;\n\n    var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\n    if (h > 1) {\n      h = math.sqrt(h);\n      rx = h * rx;\n      ry = h * ry;\n    }\n\n    var rx2 = rx * rx,\n        ry2 = ry * ry,\n        k = (large_arc_flag == sweep_flag ? -1 : 1) *\n            math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n        cx = k * rx * y / ry + (x1 + x2) / 2,\n        cy = k * -ry * x / rx + (y1 + y2) / 2,\n        f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n        f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n    f1 = x1 < cx ? PI - f1 : f1;\n    f2 = x2 < cx ? PI - f2 : f2;\n    f1 < 0 && (f1 = PI * 2 + f1);\n    f2 < 0 && (f2 = PI * 2 + f2);\n\n    if (sweep_flag && f1 > f2) {\n      f1 = f1 - PI * 2;\n    }\n    if (!sweep_flag && f2 > f1) {\n      f2 = f2 - PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n\n  var df = f2 - f1;\n\n  if (abs(df) > _120) {\n    var f2old = f2,\n        x2old = x2,\n        y2old = y2;\n\n    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * math.cos(f2);\n    y2 = cy + ry * math.sin(f2);\n    res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n\n  df = f2 - f1;\n\n  var c1 = math.cos(f1),\n      s1 = math.sin(f1),\n      c2 = math.cos(f2),\n      s2 = math.sin(f2),\n      t = math.tan(df / 4),\n      hx = 4 / 3 * rx * t,\n      hy = 4 / 3 * ry * t,\n      m1 = [x1, y1],\n      m2 = [x1 + hx * s1, y1 - hy * c1],\n      m3 = [x2 + hx * s2, y2 - hy * c2],\n      m4 = [x2, y2];\n\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  } else {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    var newres = [];\n\n    for (var i = 0, ii = res.length; i < ii; i++) {\n      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n    }\n\n    return newres;\n  }\n}\n\n// Returns bounding box of cubic bezier curve.\n// Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n// Original version: NISHIO Hirokazu\n// Modifications: https://github.com/timo22345\nfunction curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var tvalues = [],\n      bounds = [[], []],\n      a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n  for (var i = 0; i < 2; ++i) {\n\n    if (i == 0) {\n      b = 6 * x0 - 12 * x1 + 6 * x2;\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n      c = 3 * x1 - 3 * x0;\n    } else {\n      b = 6 * y0 - 12 * y1 + 6 * y2;\n      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n      c = 3 * y1 - 3 * y0;\n    }\n\n    if (abs(a) < 1e-12) {\n\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n\n      t = -c / b;\n\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n\n      continue;\n    }\n\n    b2ac = b * b - 4 * c * a;\n    sqrtb2ac = math.sqrt(b2ac);\n\n    if (b2ac < 0) {\n      continue;\n    }\n\n    t1 = (-b + sqrtb2ac) / (2 * a);\n\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n\n    t2 = (-b - sqrtb2ac) / (2 * a);\n\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  var j = tvalues.length,\n      jlen = j,\n      mt;\n\n  while (j--) {\n    t = tvalues[j];\n    mt = 1 - t;\n    bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n    bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n  }\n\n  bounds[0][jlen] = x0;\n  bounds[1][jlen] = y0;\n  bounds[0][jlen + 1] = x3;\n  bounds[1][jlen + 1] = y3;\n  bounds[0].length = bounds[1].length = jlen + 2;\n\n  return {\n    x0: mmin.apply(0, bounds[0]),\n    y0: mmin.apply(0, bounds[1]),\n    x1: mmax.apply(0, bounds[0]),\n    y1: mmax.apply(0, bounds[1])\n  };\n}\n\nfunction pathToCurve(path) {\n\n  var pth = paths(path);\n\n  // return cached curve, if existing\n  if (pth.curve) {\n    return pathClone(pth.curve);\n  }\n\n  var curvedPath = pathToAbsolute(path),\n      attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },\n      processPath = function(path, d, pathCommand) {\n        var nx, ny;\n\n        if (!path) {\n          return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n        }\n\n        !(path[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);\n\n        switch (path[0]) {\n        case 'M':\n          d.X = path[1];\n          d.Y = path[2];\n          break;\n        case 'A':\n          path = ['C'].concat(arcToCurve.apply(0, [d.x, d.y].concat(path.slice(1))));\n          break;\n        case 'S':\n          if (pathCommand == 'C' || pathCommand == 'S') {\n\n            // In 'S' case we have to take into account, if the previous command is C/S.\n            nx = d.x * 2 - d.bx;\n\n            // And reflect the previous\n            ny = d.y * 2 - d.by;\n\n            // command's control point relative to the current point.\n          }\n          else {\n\n            // or some else or nothing\n            nx = d.x;\n            ny = d.y;\n          }\n          path = ['C', nx, ny].concat(path.slice(1));\n          break;\n        case 'T':\n          if (pathCommand == 'Q' || pathCommand == 'T') {\n\n            // In 'T' case we have to take into account, if the previous command is Q/T.\n            d.qx = d.x * 2 - d.qx;\n\n            // And make a reflection similar\n            d.qy = d.y * 2 - d.qy;\n\n            // to case 'S'.\n          }\n          else {\n\n            // or something else or nothing\n            d.qx = d.x;\n            d.qy = d.y;\n          }\n          path = ['C'].concat(qubicToCurve(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n          break;\n        case 'Q':\n          d.qx = path[1];\n          d.qy = path[2];\n          path = ['C'].concat(qubicToCurve(d.x, d.y, path[1], path[2], path[3], path[4]));\n          break;\n        case 'L':\n          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], path[2]));\n          break;\n        case 'H':\n          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], d.y));\n          break;\n        case 'V':\n          path = ['C'].concat(lineToCurve(d.x, d.y, d.x, path[1]));\n          break;\n        case 'Z':\n          path = ['C'].concat(lineToCurve(d.x, d.y, d.X, d.Y));\n          break;\n        }\n\n        return path;\n      },\n\n      fixArc = function(pp, i) {\n\n        if (pp[i].length > 7) {\n          pp[i].shift();\n          var pi = pp[i];\n\n          while (pi.length) {\n            pathCommands[i] = 'A'; // if created multiple C:s, their original seg is saved\n            pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n          }\n\n          pp.splice(i, 1);\n          ii = curvedPath.length;\n        }\n      },\n\n      pathCommands = [], // path commands of original path p\n      pfirst = '', // temporary holder for original path command\n      pathCommand = ''; // holder for previous path command of original path\n\n  for (var i = 0, ii = curvedPath.length; i < ii; i++) {\n    curvedPath[i] && (pfirst = curvedPath[i][0]); // save current path command\n\n    if (pfirst != 'C') // C is not saved yet, because it may be result of conversion\n    {\n      pathCommands[i] = pfirst; // Save current path command\n      i && (pathCommand = pathCommands[i - 1]); // Get previous path command pathCommand\n    }\n    curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand); // Previous path command is inputted to processPath\n\n    if (pathCommands[i] != 'A' && pfirst == 'C') pathCommands[i] = 'C'; // A is the only command\n    // which may produce multiple C:s\n    // so we have to make sure that C is also C in original path\n\n    fixArc(curvedPath, i); // fixArc adds also the right amount of A:s to pathCommands\n\n    var seg = curvedPath[i],\n        seglen = seg.length;\n\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n  }\n\n  // cache curve\n  pth.curve = pathClone(curvedPath);\n\n  return curvedPath;\n}\n\nmodule.exports = findPathIntersections;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/path-intersection/intersect.js\n");

/***/ }),

/***/ "./node_modules/tiny-svg/dist/index.esm.js":
/*!*************************************************!*\
  !*** ./node_modules/tiny-svg/dist/index.esm.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   append: () => (/* binding */ append),\n/* harmony export */   appendTo: () => (/* binding */ appendTo),\n/* harmony export */   attr: () => (/* binding */ attr),\n/* harmony export */   classes: () => (/* binding */ classes),\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   createMatrix: () => (/* binding */ createMatrix),\n/* harmony export */   createPoint: () => (/* binding */ createPoint),\n/* harmony export */   createTransform: () => (/* binding */ createTransform),\n/* harmony export */   innerSVG: () => (/* binding */ innerSVG),\n/* harmony export */   off: () => (/* binding */ off),\n/* harmony export */   on: () => (/* binding */ on),\n/* harmony export */   prepend: () => (/* binding */ prepend),\n/* harmony export */   prependTo: () => (/* binding */ prependTo),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   replace: () => (/* binding */ replace),\n/* harmony export */   select: () => (/* binding */ select),\n/* harmony export */   selectAll: () => (/* binding */ selectAll),\n/* harmony export */   transform: () => (/* binding */ transform)\n/* harmony export */ });\nfunction ensureImported(element, target) {\n\n  if (element.ownerDocument !== target.ownerDocument) {\n    try {\n\n      // may fail on webkit\n      return target.ownerDocument.importNode(element, true);\n    } catch (e) {\n\n      // ignore\n    }\n  }\n\n  return element;\n}\n\n/**\n * appendTo utility\n */\n\n/**\n * Append a node to a target element and return the appended node.\n *\n * @param  {SVGElement} element\n * @param  {SVGElement} target\n *\n * @return {SVGElement} the appended node\n */\nfunction appendTo(element, target) {\n  return target.appendChild(ensureImported(element, target));\n}\n\n/**\n * append utility\n */\n\n/**\n * Append a node to an element\n *\n * @param  {SVGElement} element\n * @param  {SVGElement} node\n *\n * @return {SVGElement} the element\n */\nfunction append(target, node) {\n  appendTo(node, target);\n  return target;\n}\n\n/**\n * attribute accessor utility\n */\n\nvar LENGTH_ATTR = 2;\n\nvar CSS_PROPERTIES = {\n  'alignment-baseline': 1,\n  'baseline-shift': 1,\n  'clip': 1,\n  'clip-path': 1,\n  'clip-rule': 1,\n  'color': 1,\n  'color-interpolation': 1,\n  'color-interpolation-filters': 1,\n  'color-profile': 1,\n  'color-rendering': 1,\n  'cursor': 1,\n  'direction': 1,\n  'display': 1,\n  'dominant-baseline': 1,\n  'enable-background': 1,\n  'fill': 1,\n  'fill-opacity': 1,\n  'fill-rule': 1,\n  'filter': 1,\n  'flood-color': 1,\n  'flood-opacity': 1,\n  'font': 1,\n  'font-family': 1,\n  'font-size': LENGTH_ATTR,\n  'font-size-adjust': 1,\n  'font-stretch': 1,\n  'font-style': 1,\n  'font-variant': 1,\n  'font-weight': 1,\n  'glyph-orientation-horizontal': 1,\n  'glyph-orientation-vertical': 1,\n  'image-rendering': 1,\n  'kerning': 1,\n  'letter-spacing': 1,\n  'lighting-color': 1,\n  'marker': 1,\n  'marker-end': 1,\n  'marker-mid': 1,\n  'marker-start': 1,\n  'mask': 1,\n  'opacity': 1,\n  'overflow': 1,\n  'pointer-events': 1,\n  'shape-rendering': 1,\n  'stop-color': 1,\n  'stop-opacity': 1,\n  'stroke': 1,\n  'stroke-dasharray': 1,\n  'stroke-dashoffset': 1,\n  'stroke-linecap': 1,\n  'stroke-linejoin': 1,\n  'stroke-miterlimit': 1,\n  'stroke-opacity': 1,\n  'stroke-width': LENGTH_ATTR,\n  'text-anchor': 1,\n  'text-decoration': 1,\n  'text-rendering': 1,\n  'unicode-bidi': 1,\n  'visibility': 1,\n  'word-spacing': 1,\n  'writing-mode': 1\n};\n\n\nfunction getAttribute(node, name) {\n  if (CSS_PROPERTIES[name]) {\n    return node.style[name];\n  } else {\n    return node.getAttributeNS(null, name);\n  }\n}\n\nfunction setAttribute(node, name, value) {\n  var hyphenated = name.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n  var type = CSS_PROPERTIES[hyphenated];\n\n  if (type) {\n\n    // append pixel unit, unless present\n    if (type === LENGTH_ATTR && typeof value === 'number') {\n      value = String(value) + 'px';\n    }\n\n    node.style[hyphenated] = value;\n  } else {\n    node.setAttributeNS(null, name, value);\n  }\n}\n\nfunction setAttributes(node, attrs) {\n\n  var names = Object.keys(attrs), i, name;\n\n  for (i = 0, name; (name = names[i]); i++) {\n    setAttribute(node, name, attrs[name]);\n  }\n}\n\n/**\n * Gets or sets raw attributes on a node.\n *\n * @param  {SVGElement} node\n * @param  {Object} [attrs]\n * @param  {String} [name]\n * @param  {String} [value]\n *\n * @return {String}\n */\nfunction attr(node, name, value) {\n  if (typeof name === 'string') {\n    if (value !== undefined) {\n      setAttribute(node, name, value);\n    } else {\n      return getAttribute(node, name);\n    }\n  } else {\n    setAttributes(node, name);\n  }\n\n  return node;\n}\n\n/**\r\n * Taken from https://github.com/component/classes\r\n *\r\n * Without the component bits.\r\n */\r\n\r\n/**\r\n * toString reference.\r\n */\r\n\r\nconst toString = Object.prototype.toString;\r\n\r\n/**\r\n  * Wrap `el` in a `ClassList`.\r\n  *\r\n  * @param {Element} el\r\n  * @return {ClassList}\r\n  * @api public\r\n  */\r\n\r\nfunction classes(el) {\r\n  return new ClassList(el);\r\n}\r\n\r\nfunction ClassList(el) {\r\n  if (!el || !el.nodeType) {\r\n    throw new Error('A DOM element reference is required');\r\n  }\r\n  this.el = el;\r\n  this.list = el.classList;\r\n}\r\n\r\n/**\r\n  * Add class `name` if not already present.\r\n  *\r\n  * @param {String} name\r\n  * @return {ClassList}\r\n  * @api public\r\n  */\r\n\r\nClassList.prototype.add = function(name) {\r\n  this.list.add(name);\r\n  return this;\r\n};\r\n\r\n/**\r\n  * Remove class `name` when present, or\r\n  * pass a regular expression to remove\r\n  * any which match.\r\n  *\r\n  * @param {String|RegExp} name\r\n  * @return {ClassList}\r\n  * @api public\r\n  */\r\n\r\nClassList.prototype.remove = function(name) {\r\n  if ('[object RegExp]' == toString.call(name)) {\r\n    return this.removeMatching(name);\r\n  }\r\n\r\n  this.list.remove(name);\r\n  return this;\r\n};\r\n\r\n/**\r\n  * Remove all classes matching `re`.\r\n  *\r\n  * @param {RegExp} re\r\n  * @return {ClassList}\r\n  * @api private\r\n  */\r\n\r\nClassList.prototype.removeMatching = function(re) {\r\n  const arr = this.array();\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (re.test(arr[i])) {\r\n      this.remove(arr[i]);\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n  * Toggle class `name`, can force state via `force`.\r\n  *\r\n  * For browsers that support classList, but do not support `force` yet,\r\n  * the mistake will be detected and corrected.\r\n  *\r\n  * @param {String} name\r\n  * @param {Boolean} force\r\n  * @return {ClassList}\r\n  * @api public\r\n  */\r\n\r\nClassList.prototype.toggle = function(name, force) {\r\n  if ('undefined' !== typeof force) {\r\n    if (force !== this.list.toggle(name, force)) {\r\n      this.list.toggle(name); // toggle again to correct\r\n    }\r\n  } else {\r\n    this.list.toggle(name);\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n  * Return an array of classes.\r\n  *\r\n  * @return {Array}\r\n  * @api public\r\n  */\r\n\r\nClassList.prototype.array = function() {\r\n  return Array.from(this.list);\r\n};\r\n\r\n/**\r\n  * Check if class `name` is present.\r\n  *\r\n  * @param {String} name\r\n  * @return {ClassList}\r\n  * @api public\r\n  */\r\n\r\nClassList.prototype.has =\r\n ClassList.prototype.contains = function(name) {\r\n   return this.list.contains(name);\r\n };\n\nfunction remove(element) {\n  var parent = element.parentNode;\n\n  if (parent) {\n    parent.removeChild(element);\n  }\n\n  return element;\n}\n\n/**\n * Clear utility\n */\n\n/**\n * Removes all children from the given element\n *\n * @param  {DOMElement} element\n * @return {DOMElement} the element (for chaining)\n */\nfunction clear(element) {\n  var child;\n\n  while ((child = element.firstChild)) {\n    remove(child);\n  }\n\n  return element;\n}\n\nfunction clone(element) {\n  return element.cloneNode(true);\n}\n\nvar ns = {\n  svg: 'http://www.w3.org/2000/svg'\n};\n\n/**\n * DOM parsing utility\n */\n\nvar SVG_START = '<svg xmlns=\"' + ns.svg + '\"';\n\nfunction parse(svg) {\n\n  var unwrap = false;\n\n  // ensure we import a valid svg document\n  if (svg.substring(0, 4) === '<svg') {\n    if (svg.indexOf(ns.svg) === -1) {\n      svg = SVG_START + svg.substring(4);\n    }\n  } else {\n\n    // namespace svg\n    svg = SVG_START + '>' + svg + '</svg>';\n    unwrap = true;\n  }\n\n  var parsed = parseDocument(svg);\n\n  if (!unwrap) {\n    return parsed;\n  }\n\n  var fragment = document.createDocumentFragment();\n\n  var parent = parsed.firstChild;\n\n  while (parent.firstChild) {\n    fragment.appendChild(parent.firstChild);\n  }\n\n  return fragment;\n}\n\nfunction parseDocument(svg) {\n\n  var parser;\n\n  // parse\n  parser = new DOMParser();\n  parser.async = false;\n\n  return parser.parseFromString(svg, 'text/xml');\n}\n\n/**\n * Create utility for SVG elements\n */\n\n\n/**\n * Create a specific type from name or SVG markup.\n *\n * @param {String} name the name or markup of the element\n * @param {Object} [attrs] attributes to set on the element\n *\n * @returns {SVGElement}\n */\nfunction create(name, attrs) {\n  var element;\n\n  if (name.charAt(0) === '<') {\n    element = parse(name).firstChild;\n    element = document.importNode(element, true);\n  } else {\n    element = document.createElementNS(ns.svg, name);\n  }\n\n  if (attrs) {\n    attr(element, attrs);\n  }\n\n  return element;\n}\n\n/**\n * Events handling utility\n */\n\nfunction on(node, event, listener, useCapture) {\n  node.addEventListener(event, listener, useCapture);\n}\n\nfunction off(node, event, listener, useCapture) {\n  node.removeEventListener(event, listener, useCapture);\n}\n\n/**\n * Geometry helpers\n */\n\n// fake node used to instantiate svg geometry elements\nvar node = null;\n\nfunction getNode() {\n  if (node === null) {\n    node = create('svg');\n  }\n\n  return node;\n}\n\nfunction extend(object, props) {\n  var i, k, keys = Object.keys(props);\n\n  for (i = 0; (k = keys[i]); i++) {\n    object[k] = props[k];\n  }\n\n  return object;\n}\n\n\nfunction createPoint(x, y) {\n  var point = getNode().createSVGPoint();\n\n  switch (arguments.length) {\n  case 0:\n    return point;\n  case 2:\n    x = {\n      x: x,\n      y: y\n    };\n    break;\n  }\n\n  return extend(point, x);\n}\n\n/**\n * Create matrix via args.\n *\n * @example\n *\n * createMatrix({ a: 1, b: 1 });\n * createMatrix();\n * createMatrix(1, 2, 0, 0, 30, 20);\n *\n * @return {SVGMatrix}\n */\nfunction createMatrix(a, b, c, d, e, f) {\n  var matrix = getNode().createSVGMatrix();\n\n  switch (arguments.length) {\n  case 0:\n    return matrix;\n  case 1:\n    return extend(matrix, a);\n  case 6:\n    return extend(matrix, {\n      a: a,\n      b: b,\n      c: c,\n      d: d,\n      e: e,\n      f: f\n    });\n  }\n}\n\nfunction createTransform(matrix) {\n  if (matrix) {\n    return getNode().createSVGTransformFromMatrix(matrix);\n  } else {\n    return getNode().createSVGTransform();\n  }\n}\n\n/**\n * Serialization util\n */\n\nvar TEXT_ENTITIES = /([&<>]{1})/g;\nvar ATTR_ENTITIES = /([\\n\\r\"]{1})/g;\n\nvar ENTITY_REPLACEMENT = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '\\''\n};\n\nfunction escape(str, pattern) {\n\n  function replaceFn(match, entity) {\n    return ENTITY_REPLACEMENT[entity] || entity;\n  }\n\n  return str.replace(pattern, replaceFn);\n}\n\nfunction serialize(node, output) {\n\n  var i, len, attrMap, attrNode, childNodes;\n\n  switch (node.nodeType) {\n\n  // TEXT\n  case 3:\n\n    // replace special XML characters\n    output.push(escape(node.textContent, TEXT_ENTITIES));\n    break;\n\n  // ELEMENT\n  case 1:\n    output.push('<', node.tagName);\n\n    if (node.hasAttributes()) {\n      attrMap = node.attributes;\n      for (i = 0, len = attrMap.length; i < len; ++i) {\n        attrNode = attrMap.item(i);\n        output.push(' ', attrNode.name, '=\"', escape(attrNode.value, ATTR_ENTITIES), '\"');\n      }\n    }\n\n    if (node.hasChildNodes()) {\n      output.push('>');\n      childNodes = node.childNodes;\n      for (i = 0, len = childNodes.length; i < len; ++i) {\n        serialize(childNodes.item(i), output);\n      }\n      output.push('</', node.tagName, '>');\n    } else {\n      output.push('/>');\n    }\n    break;\n\n  // COMMENT\n  case 8:\n    output.push('<!--', escape(node.nodeValue, TEXT_ENTITIES), '-->');\n    break;\n\n  // CDATA\n  case 4:\n    output.push('<![CDATA[', node.nodeValue, ']]>');\n    break;\n\n  default:\n    throw new Error('unable to handle node ' + node.nodeType);\n  }\n\n  return output;\n}\n\n/**\n * innerHTML like functionality for SVG elements.\n * based on innerSVG (https://code.google.com/p/innersvg)\n */\n\n\nfunction set(element, svg) {\n\n  var parsed = parse(svg);\n\n  // clear element contents\n  clear(element);\n\n  if (!svg) {\n    return;\n  }\n\n  if (!isFragment(parsed)) {\n\n    // extract <svg> from parsed document\n    parsed = parsed.documentElement;\n  }\n\n  var nodes = slice(parsed.childNodes);\n\n  // import + append each node\n  for (var i = 0; i < nodes.length; i++) {\n    appendTo(nodes[i], element);\n  }\n\n}\n\nfunction get(element) {\n  var child = element.firstChild,\n      output = [];\n\n  while (child) {\n    serialize(child, output);\n    child = child.nextSibling;\n  }\n\n  return output.join('');\n}\n\nfunction isFragment(node) {\n  return node.nodeName === '#document-fragment';\n}\n\nfunction innerSVG(element, svg) {\n\n  if (svg !== undefined) {\n\n    try {\n      set(element, svg);\n    } catch (e) {\n      throw new Error('error parsing SVG: ' + e.message);\n    }\n\n    return element;\n  } else {\n    return get(element);\n  }\n}\n\n\nfunction slice(arr) {\n  return Array.prototype.slice.call(arr);\n}\n\n/**\n * Selection utilities\n */\n\nfunction select(node, selector) {\n  return node.querySelector(selector);\n}\n\nfunction selectAll(node, selector) {\n  var nodes = node.querySelectorAll(selector);\n\n  return [].map.call(nodes, function(element) {\n    return element;\n  });\n}\n\n/**\n * prependTo utility\n */\n\n/**\n * Prepend a node to a target element and return the prepended node.\n *\n * @param  {SVGElement} node\n * @param  {SVGElement} target\n *\n * @return {SVGElement} the prepended node\n */\nfunction prependTo(node, target) {\n  return target.insertBefore(ensureImported(node, target), target.firstChild || null);\n}\n\n/**\n * prepend utility\n */\n\n/**\n * Prepend a node to a target element\n *\n * @param  {SVGElement} target\n * @param  {SVGElement} node\n *\n * @return {SVGElement} the target element\n */\nfunction prepend(target, node) {\n  prependTo(node, target);\n  return target;\n}\n\n/**\n * Replace utility\n */\n\nfunction replace(element, replacement) {\n  element.parentNode.replaceChild(ensureImported(replacement, element), element);\n  return replacement;\n}\n\n/**\n * transform accessor utility\n */\n\nfunction wrapMatrix(transformList, transform) {\n  if (transform instanceof SVGMatrix) {\n    return transformList.createSVGTransformFromMatrix(transform);\n  }\n\n  return transform;\n}\n\n\nfunction setTransforms(transformList, transforms) {\n  var i, t;\n\n  transformList.clear();\n\n  for (i = 0; (t = transforms[i]); i++) {\n    transformList.appendItem(wrapMatrix(transformList, t));\n  }\n}\n\n/**\n * Get or set the transforms on the given node.\n *\n * @param {SVGElement} node\n * @param  {SVGTransform|SVGMatrix|Array<SVGTransform|SVGMatrix>} [transforms]\n *\n * @return {SVGTransform} the consolidated transform\n */\nfunction transform(node, transforms) {\n  var transformList = node.transform.baseVal;\n\n  if (transforms) {\n\n    if (!Array.isArray(transforms)) {\n      transforms = [ transforms ];\n    }\n\n    setTransforms(transformList, transforms);\n  }\n\n  return transformList.consolidate();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tiny-svg/dist/index.esm.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js-color-picker/node_modules/min-dash/dist/index.esm.js":
/*!*******************************************************************************!*\
  !*** ../bpmn-io/bpmn-js-color-picker/node_modules/min-dash/dist/index.esm.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   ensureArray: () => (/* binding */ ensureArray),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   find: () => (/* binding */ find),\n/* harmony export */   findIndex: () => (/* binding */ findIndex),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isNil: () => (/* binding */ isNil),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   keys: () => (/* binding */ keys),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   matchPattern: () => (/* binding */ matchPattern),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   sortBy: () => (/* binding */ sortBy),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   unionBy: () => (/* binding */ unionBy),\n/* harmony export */   uniqueBy: () => (/* binding */ uniqueBy),\n/* harmony export */   values: () => (/* binding */ values),\n/* harmony export */   without: () => (/* binding */ without)\n/* harmony export */ });\n/**\n * Flatten array, one level deep.\n *\n * @param {Array<?>} arr\n *\n * @return {Array<?>}\n */\nfunction flatten(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\nconst nativeToString = Object.prototype.toString;\nconst nativeHasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isUndefined(obj) {\n  return obj === undefined;\n}\n\nfunction isDefined(obj) {\n  return obj !== undefined;\n}\n\nfunction isNil(obj) {\n  return obj == null;\n}\n\nfunction isArray(obj) {\n  return nativeToString.call(obj) === '[object Array]';\n}\n\nfunction isObject(obj) {\n  return nativeToString.call(obj) === '[object Object]';\n}\n\nfunction isNumber(obj) {\n  return nativeToString.call(obj) === '[object Number]';\n}\n\nfunction isFunction(obj) {\n  const tag = nativeToString.call(obj);\n\n  return (\n    tag === '[object Function]' ||\n    tag === '[object AsyncFunction]' ||\n    tag === '[object GeneratorFunction]' ||\n    tag === '[object AsyncGeneratorFunction]' ||\n    tag === '[object Proxy]'\n  );\n}\n\nfunction isString(obj) {\n  return nativeToString.call(obj) === '[object String]';\n}\n\n\n/**\n * Ensure collection is an array.\n *\n * @param {Object} obj\n */\nfunction ensureArray(obj) {\n\n  if (isArray(obj)) {\n    return;\n  }\n\n  throw new Error('must supply array');\n}\n\n/**\n * Return true, if target owns a property with the given key.\n *\n * @param {Object} target\n * @param {String} key\n *\n * @return {Boolean}\n */\nfunction has(target, key) {\n  return nativeHasOwnProperty.call(target, key);\n}\n\n/**\n * Find element in collection.\n *\n * @param  {Array|Object} collection\n * @param  {Function|Object} matcher\n *\n * @return {Object}\n */\nfunction find(collection, matcher) {\n\n  matcher = toMatcher(matcher);\n\n  let match;\n\n  forEach(collection, function(val, key) {\n    if (matcher(val, key)) {\n      match = val;\n\n      return false;\n    }\n  });\n\n  return match;\n\n}\n\n\n/**\n * Find element index in collection.\n *\n * @param  {Array|Object} collection\n * @param  {Function} matcher\n *\n * @return {Object}\n */\nfunction findIndex(collection, matcher) {\n\n  matcher = toMatcher(matcher);\n\n  let idx = isArray(collection) ? -1 : undefined;\n\n  forEach(collection, function(val, key) {\n    if (matcher(val, key)) {\n      idx = key;\n\n      return false;\n    }\n  });\n\n  return idx;\n}\n\n\n/**\n * Find element in collection.\n *\n * @param  {Array|Object} collection\n * @param  {Function} matcher\n *\n * @return {Array} result\n */\nfunction filter(collection, matcher) {\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    if (matcher(val, key)) {\n      result.push(val);\n    }\n  });\n\n  return result;\n}\n\n\n/**\n * Iterate over collection; returning something\n * (non-undefined) will stop iteration.\n *\n * @param  {Array|Object} collection\n * @param  {Function} iterator\n *\n * @return {Object} return result that stopped the iteration\n */\nfunction forEach(collection, iterator) {\n\n  let val,\n      result;\n\n  if (isUndefined(collection)) {\n    return;\n  }\n\n  const convertKey = isArray(collection) ? toNum : identity;\n\n  for (let key in collection) {\n\n    if (has(collection, key)) {\n      val = collection[key];\n\n      result = iterator(val, convertKey(key));\n\n      if (result === false) {\n        return val;\n      }\n    }\n  }\n}\n\n/**\n * Return collection without element.\n *\n * @param  {Array} arr\n * @param  {Function} matcher\n *\n * @return {Array}\n */\nfunction without(arr, matcher) {\n\n  if (isUndefined(arr)) {\n    return [];\n  }\n\n  ensureArray(arr);\n\n  matcher = toMatcher(matcher);\n\n  return arr.filter(function(el, idx) {\n    return !matcher(el, idx);\n  });\n\n}\n\n\n/**\n * Reduce collection, returning a single result.\n *\n * @param  {Object|Array} collection\n * @param  {Function} iterator\n * @param  {Any} result\n *\n * @return {Any} result returned from last iterator\n */\nfunction reduce(collection, iterator, result) {\n\n  forEach(collection, function(value, idx) {\n    result = iterator(result, value, idx);\n  });\n\n  return result;\n}\n\n\n/**\n * Return true if every element in the collection\n * matches the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction every(collection, matcher) {\n\n  return !!reduce(collection, function(matches, val, key) {\n    return matches && matcher(val, key);\n  }, true);\n}\n\n\n/**\n * Return true if some elements in the collection\n * match the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction some(collection, matcher) {\n\n  return !!find(collection, matcher);\n}\n\n\n/**\n * Transform a collection into another collection\n * by piping each member through the given fn.\n *\n * @param  {Object|Array}   collection\n * @param  {Function} fn\n *\n * @return {Array} transformed collection\n */\nfunction map(collection, fn) {\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    result.push(fn(val, key));\n  });\n\n  return result;\n}\n\n\n/**\n * Get the collections keys.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction keys(collection) {\n  return collection && Object.keys(collection) || [];\n}\n\n\n/**\n * Shorthand for `keys(o).length`.\n *\n * @param  {Object|Array} collection\n *\n * @return {Number}\n */\nfunction size(collection) {\n  return keys(collection).length;\n}\n\n\n/**\n * Get the values in the collection.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction values(collection) {\n  return map(collection, (val) => val);\n}\n\n\n/**\n * Group collection members by attribute.\n *\n * @param  {Object|Array} collection\n * @param  {Function} extractor\n *\n * @return {Object} map with { attrValue => [ a, b, c ] }\n */\nfunction groupBy(collection, extractor, grouped = {}) {\n\n  extractor = toExtractor(extractor);\n\n  forEach(collection, function(val) {\n    let discriminator = extractor(val) || '_';\n\n    let group = grouped[discriminator];\n\n    if (!group) {\n      group = grouped[discriminator] = [];\n    }\n\n    group.push(val);\n  });\n\n  return grouped;\n}\n\n\nfunction uniqueBy(extractor, ...collections) {\n\n  extractor = toExtractor(extractor);\n\n  let grouped = {};\n\n  forEach(collections, (c) => groupBy(c, extractor, grouped));\n\n  let result = map(grouped, function(val, key) {\n    return val[0];\n  });\n\n  return result;\n}\n\n\nconst unionBy = uniqueBy;\n\n\n\n/**\n * Sort collection by criteria.\n *\n * @param  {Object|Array} collection\n * @param  {String|Function} extractor\n *\n * @return {Array}\n */\nfunction sortBy(collection, extractor) {\n\n  extractor = toExtractor(extractor);\n\n  let sorted = [];\n\n  forEach(collection, function(value, key) {\n    let disc = extractor(value, key);\n\n    let entry = {\n      d: disc,\n      v: value\n    };\n\n    for (var idx = 0; idx < sorted.length; idx++) {\n      let { d } = sorted[idx];\n\n      if (disc < d) {\n        sorted.splice(idx, 0, entry);\n        return;\n      }\n    }\n\n    // not inserted, append (!)\n    sorted.push(entry);\n  });\n\n  return map(sorted, (e) => e.v);\n}\n\n\n/**\n * Create an object pattern matcher.\n *\n * @example\n *\n * const matcher = matchPattern({ id: 1 });\n *\n * let element = find(elements, matcher);\n *\n * @param  {Object} pattern\n *\n * @return {Function} matcherFn\n */\nfunction matchPattern(pattern) {\n\n  return function(el) {\n\n    return every(pattern, function(val, key) {\n      return el[key] === val;\n    });\n\n  };\n}\n\n\nfunction toExtractor(extractor) {\n  return isFunction(extractor) ? extractor : (e) => {\n    return e[extractor];\n  };\n}\n\n\nfunction toMatcher(matcher) {\n  return isFunction(matcher) ? matcher : (e) => {\n    return e === matcher;\n  };\n}\n\n\nfunction identity(arg) {\n  return arg;\n}\n\nfunction toNum(arg) {\n  return Number(arg);\n}\n\n/**\n * Debounce fn, calling it only once if the given time\n * elapsed between calls.\n *\n * Lodash-style the function exposes methods to `#clear`\n * and `#flush` to control internal behavior.\n *\n * @param  {Function} fn\n * @param  {Number} timeout\n *\n * @return {Function} debounced function\n */\nfunction debounce(fn, timeout) {\n\n  let timer;\n\n  let lastArgs;\n  let lastThis;\n\n  let lastNow;\n\n  function fire(force) {\n\n    let now = Date.now();\n\n    let scheduledDiff = force ? 0 : (lastNow + timeout) - now;\n\n    if (scheduledDiff > 0) {\n      return schedule(scheduledDiff);\n    }\n\n    fn.apply(lastThis, lastArgs);\n\n    clear();\n  }\n\n  function schedule(timeout) {\n    timer = setTimeout(fire, timeout);\n  }\n\n  function clear() {\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = lastNow = lastArgs = lastThis = undefined;\n  }\n\n  function flush() {\n    if (timer) {\n      fire(true);\n    }\n\n    clear();\n  }\n\n  function callback(...args) {\n    lastNow = Date.now();\n\n    lastArgs = args;\n    lastThis = this;\n\n    // ensure an execution is scheduled\n    if (!timer) {\n      schedule(timeout);\n    }\n  }\n\n  callback.flush = flush;\n  callback.cancel = clear;\n\n  return callback;\n}\n\n/**\n * Throttle fn, calling at most once\n * in the given interval.\n *\n * @param  {Function} fn\n * @param  {Number} interval\n *\n * @return {Function} throttled function\n */\nfunction throttle(fn, interval) {\n  let throttling = false;\n\n  return function(...args) {\n\n    if (throttling) {\n      return;\n    }\n\n    fn(...args);\n    throttling = true;\n\n    setTimeout(() => {\n      throttling = false;\n    }, interval);\n  };\n}\n\n/**\n * Bind function against target <this>.\n *\n * @param  {Function} fn\n * @param  {Object}   target\n *\n * @return {Function} bound function\n */\nfunction bind(fn, target) {\n  return fn.bind(target);\n}\n\n/**\n * Convenience wrapper for `Object.assign`.\n *\n * @param {Object} target\n * @param {...Object} others\n *\n * @return {Object} the target\n */\nfunction assign(target, ...others) {\n  return Object.assign(target, ...others);\n}\n\n/**\n * Sets a nested property of a given object to the specified value.\n *\n * This mutates the object and returns it.\n *\n * @param {Object} target The target of the set operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} value The value to set.\n */\nfunction set(target, path, value) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key, idx) {\n\n    if (typeof key !== 'number' && typeof key !== 'string') {\n      throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');\n    }\n\n    if (key === 'constructor') {\n      throw new Error('illegal key: constructor');\n    }\n\n    if (key === '__proto__') {\n      throw new Error('illegal key: __proto__');\n    }\n\n    let nextKey = path[idx + 1];\n    let nextTarget = currentTarget[key];\n\n    if (isDefined(nextKey) && isNil(nextTarget)) {\n      nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];\n    }\n\n    if (isUndefined(nextKey)) {\n      if (isUndefined(value)) {\n        delete currentTarget[key];\n      } else {\n        currentTarget[key] = value;\n      }\n    } else {\n      currentTarget = nextTarget;\n    }\n  });\n\n  return target;\n}\n\n\n/**\n * Gets a nested property of a given object.\n *\n * @param {Object} target The target of the get operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} [defaultValue] The value to return if no value exists.\n */\nfunction get(target, path, defaultValue) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key) {\n\n    // accessing nil property yields <undefined>\n    if (isNil(currentTarget)) {\n      currentTarget = undefined;\n\n      return false;\n    }\n\n    currentTarget = currentTarget[key];\n  });\n\n  return isUndefined(currentTarget) ? defaultValue : currentTarget;\n}\n\n/**\n * Pick given properties from the target object.\n *\n * @param {Object} target\n * @param {Array} properties\n *\n * @return {Object} target\n */\nfunction pick(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(properties, function(prop) {\n\n    if (prop in obj) {\n      result[prop] = target[prop];\n    }\n  });\n\n  return result;\n}\n\n/**\n * Pick all target properties, excluding the given ones.\n *\n * @param {Object} target\n * @param {Array} properties\n *\n * @return {Object} target\n */\nfunction omit(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(obj, function(prop, key) {\n\n    if (properties.indexOf(key) === -1) {\n      result[key] = prop;\n    }\n  });\n\n  return result;\n}\n\n/**\n * Recursively merge `...sources` into given target.\n *\n * Does support merging objects; does not support merging arrays.\n *\n * @param {Object} target\n * @param {...Object} sources\n *\n * @return {Object} the target\n */\nfunction merge(target, ...sources) {\n\n  if (!sources.length) {\n    return target;\n  }\n\n  forEach(sources, function(source) {\n\n    // skip non-obj sources, i.e. null\n    if (!source || !isObject(source)) {\n      return;\n    }\n\n    forEach(source, function(sourceVal, key) {\n\n      if (key === '__proto__') {\n        return;\n      }\n\n      let targetVal = target[key];\n\n      if (isObject(sourceVal)) {\n\n        if (!isObject(targetVal)) {\n\n          // override target[key] with object\n          targetVal = {};\n        }\n\n        target[key] = merge(targetVal, sourceVal);\n      } else {\n        target[key] = sourceVal;\n      }\n\n    });\n  });\n\n  return target;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js-color-picker/node_modules/min-dash/dist/index.esm.js\n");

/***/ }),

/***/ "../bpmn-io/bpmn-js/node_modules/min-dash/dist/index.esm.js":
/*!******************************************************************!*\
  !*** ../bpmn-io/bpmn-js/node_modules/min-dash/dist/index.esm.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   ensureArray: () => (/* binding */ ensureArray),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   find: () => (/* binding */ find),\n/* harmony export */   findIndex: () => (/* binding */ findIndex),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isNil: () => (/* binding */ isNil),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   keys: () => (/* binding */ keys),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   matchPattern: () => (/* binding */ matchPattern),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   sortBy: () => (/* binding */ sortBy),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   unionBy: () => (/* binding */ unionBy),\n/* harmony export */   uniqueBy: () => (/* binding */ uniqueBy),\n/* harmony export */   values: () => (/* binding */ values),\n/* harmony export */   without: () => (/* binding */ without)\n/* harmony export */ });\n/**\n * Flatten array, one level deep.\n *\n * @template T\n *\n * @param {T[][]} arr\n *\n * @return {T[]}\n */\nfunction flatten(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\nconst nativeToString = Object.prototype.toString;\nconst nativeHasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isUndefined(obj) {\n  return obj === undefined;\n}\n\nfunction isDefined(obj) {\n  return obj !== undefined;\n}\n\nfunction isNil(obj) {\n  return obj == null;\n}\n\nfunction isArray(obj) {\n  return nativeToString.call(obj) === '[object Array]';\n}\n\nfunction isObject(obj) {\n  return nativeToString.call(obj) === '[object Object]';\n}\n\nfunction isNumber(obj) {\n  return nativeToString.call(obj) === '[object Number]';\n}\n\n/**\n * @param {any} obj\n *\n * @return {boolean}\n */\nfunction isFunction(obj) {\n  const tag = nativeToString.call(obj);\n\n  return (\n    tag === '[object Function]' ||\n    tag === '[object AsyncFunction]' ||\n    tag === '[object GeneratorFunction]' ||\n    tag === '[object AsyncGeneratorFunction]' ||\n    tag === '[object Proxy]'\n  );\n}\n\nfunction isString(obj) {\n  return nativeToString.call(obj) === '[object String]';\n}\n\n\n/**\n * Ensure collection is an array.\n *\n * @param {Object} obj\n */\nfunction ensureArray(obj) {\n\n  if (isArray(obj)) {\n    return;\n  }\n\n  throw new Error('must supply array');\n}\n\n/**\n * Return true, if target owns a property with the given key.\n *\n * @param {Object} target\n * @param {String} key\n *\n * @return {Boolean}\n */\nfunction has(target, key) {\n  return nativeHasOwnProperty.call(target, key);\n}\n\n/**\n * @template T\n * @typedef { (\n *   ((e: T) => boolean) |\n *   ((e: T, idx: number) => boolean) |\n *   ((e: T, key: string) => boolean) |\n *   string |\n *   number\n * ) } Matcher\n */\n\n/**\n * @template T\n * @template U\n *\n * @typedef { (\n *   ((e: T) => U) | string | number\n * ) } Extractor\n */\n\n\n/**\n * @template T\n * @typedef { (val: T, key: any) => boolean } MatchFn\n */\n\n/**\n * @template T\n * @typedef { T[] } ArrayCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: string]: T } } StringKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: number]: T } } NumberKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { StringKeyValueCollection<T> | NumberKeyValueCollection<T> } KeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { KeyValueCollection<T> | ArrayCollection<T> } Collection\n */\n\n/**\n * Find element in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {Object}\n */\nfunction find(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let match;\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      match = val;\n\n      return false;\n    }\n  });\n\n  return match;\n\n}\n\n\n/**\n * Find element index in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {number}\n */\nfunction findIndex(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let idx = isArray(collection) ? -1 : undefined;\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      idx = key;\n\n      return false;\n    }\n  });\n\n  return idx;\n}\n\n\n/**\n * Filter elements in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {T[]} result\n */\nfunction filter(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      result.push(val);\n    }\n  });\n\n  return result;\n}\n\n\n/**\n * Iterate over collection; returning something\n * (non-undefined) will stop iteration.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator\n *\n * @return {T} return result that stopped the iteration\n */\nfunction forEach(collection, iterator) {\n\n  let val,\n      result;\n\n  if (isUndefined(collection)) {\n    return;\n  }\n\n  const convertKey = isArray(collection) ? toNum : identity;\n\n  for (let key in collection) {\n\n    if (has(collection, key)) {\n      val = collection[key];\n\n      result = iterator(val, convertKey(key));\n\n      if (result === false) {\n        return val;\n      }\n    }\n  }\n}\n\n/**\n * Return collection without element.\n *\n * @template T\n * @param {ArrayCollection<T>} arr\n * @param {Matcher<T>} matcher\n *\n * @return {T[]}\n */\nfunction without(arr, matcher) {\n\n  if (isUndefined(arr)) {\n    return [];\n  }\n\n  ensureArray(arr);\n\n  const matchFn = toMatcher(matcher);\n\n  return arr.filter(function(el, idx) {\n    return !matchFn(el, idx);\n  });\n\n}\n\n\n/**\n * Reduce collection, returning a single result.\n *\n * @template T\n * @template V\n *\n * @param {Collection<T>} collection\n * @param {(result: V, entry: T, index: any) => V} iterator\n * @param {V} result\n *\n * @return {V} result returned from last iterator\n */\nfunction reduce(collection, iterator, result) {\n\n  forEach(collection, function(value, idx) {\n    result = iterator(result, value, idx);\n  });\n\n  return result;\n}\n\n\n/**\n * Return true if every element in the collection\n * matches the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction every(collection, matcher) {\n\n  return !!reduce(collection, function(matches, val, key) {\n    return matches && matcher(val, key);\n  }, true);\n}\n\n\n/**\n * Return true if some elements in the collection\n * match the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction some(collection, matcher) {\n\n  return !!find(collection, matcher);\n}\n\n\n/**\n * Transform a collection into another collection\n * by piping each member through the given fn.\n *\n * @param  {Object|Array}   collection\n * @param  {Function} fn\n *\n * @return {Array} transformed collection\n */\nfunction map(collection, fn) {\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    result.push(fn(val, key));\n  });\n\n  return result;\n}\n\n\n/**\n * Get the collections keys.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction keys(collection) {\n  return collection && Object.keys(collection) || [];\n}\n\n\n/**\n * Shorthand for `keys(o).length`.\n *\n * @param  {Object|Array} collection\n *\n * @return {Number}\n */\nfunction size(collection) {\n  return keys(collection).length;\n}\n\n\n/**\n * Get the values in the collection.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction values(collection) {\n  return map(collection, (val) => val);\n}\n\n\n/**\n * Group collection members by attribute.\n *\n * @param {Object|Array} collection\n * @param {Extractor} extractor\n *\n * @return {Object} map with { attrValue => [ a, b, c ] }\n */\nfunction groupBy(collection, extractor, grouped = {}) {\n\n  extractor = toExtractor(extractor);\n\n  forEach(collection, function(val) {\n    let discriminator = extractor(val) || '_';\n\n    let group = grouped[discriminator];\n\n    if (!group) {\n      group = grouped[discriminator] = [];\n    }\n\n    group.push(val);\n  });\n\n  return grouped;\n}\n\n\nfunction uniqueBy(extractor, ...collections) {\n\n  extractor = toExtractor(extractor);\n\n  let grouped = {};\n\n  forEach(collections, (c) => groupBy(c, extractor, grouped));\n\n  let result = map(grouped, function(val, key) {\n    return val[0];\n  });\n\n  return result;\n}\n\n\nconst unionBy = uniqueBy;\n\n\n\n/**\n * Sort collection by criteria.\n *\n * @template T\n *\n * @param {Collection<T>} collection\n * @param {Extractor<T, number | string>} extractor\n *\n * @return {Array}\n */\nfunction sortBy(collection, extractor) {\n\n  extractor = toExtractor(extractor);\n\n  let sorted = [];\n\n  forEach(collection, function(value, key) {\n    let disc = extractor(value, key);\n\n    let entry = {\n      d: disc,\n      v: value\n    };\n\n    for (var idx = 0; idx < sorted.length; idx++) {\n      let { d } = sorted[idx];\n\n      if (disc < d) {\n        sorted.splice(idx, 0, entry);\n        return;\n      }\n    }\n\n    // not inserted, append (!)\n    sorted.push(entry);\n  });\n\n  return map(sorted, (e) => e.v);\n}\n\n\n/**\n * Create an object pattern matcher.\n *\n * @example\n *\n * ```javascript\n * const matcher = matchPattern({ id: 1 });\n *\n * let element = find(elements, matcher);\n * ```\n *\n * @template T\n *\n * @param {T} pattern\n *\n * @return { (el: any) =>  boolean } matcherFn\n */\nfunction matchPattern(pattern) {\n\n  return function(el) {\n\n    return every(pattern, function(val, key) {\n      return el[key] === val;\n    });\n\n  };\n}\n\n\n/**\n * @param {string | ((e: any) => any) } extractor\n *\n * @return { (e: any) => any }\n */\nfunction toExtractor(extractor) {\n\n  /**\n   * @satisfies { (e: any) => any }\n   */\n  return isFunction(extractor) ? extractor : (e) => {\n\n    // @ts-ignore: just works\n    return e[extractor];\n  };\n}\n\n\n/**\n * @template T\n * @param {Matcher<T>} matcher\n *\n * @return {MatchFn<T>}\n */\nfunction toMatcher(matcher) {\n  return isFunction(matcher) ? matcher : (e) => {\n    return e === matcher;\n  };\n}\n\n\nfunction identity(arg) {\n  return arg;\n}\n\nfunction toNum(arg) {\n  return Number(arg);\n}\n\n/* global setTimeout clearTimeout */\n\n/**\n * @typedef { {\n *   (...args: any[]): any;\n *   flush: () => void;\n *   cancel: () => void;\n * } } DebouncedFunction\n */\n\n/**\n * Debounce fn, calling it only once if the given time\n * elapsed between calls.\n *\n * Lodash-style the function exposes methods to `#clear`\n * and `#flush` to control internal behavior.\n *\n * @param  {Function} fn\n * @param  {Number} timeout\n *\n * @return {DebouncedFunction} debounced function\n */\nfunction debounce(fn, timeout) {\n\n  let timer;\n\n  let lastArgs;\n  let lastThis;\n\n  let lastNow;\n\n  function fire(force) {\n\n    let now = Date.now();\n\n    let scheduledDiff = force ? 0 : (lastNow + timeout) - now;\n\n    if (scheduledDiff > 0) {\n      return schedule(scheduledDiff);\n    }\n\n    fn.apply(lastThis, lastArgs);\n\n    clear();\n  }\n\n  function schedule(timeout) {\n    timer = setTimeout(fire, timeout);\n  }\n\n  function clear() {\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = lastNow = lastArgs = lastThis = undefined;\n  }\n\n  function flush() {\n    if (timer) {\n      fire(true);\n    }\n\n    clear();\n  }\n\n  /**\n   * @type { DebouncedFunction }\n   */\n  function callback(...args) {\n    lastNow = Date.now();\n\n    lastArgs = args;\n    lastThis = this;\n\n    // ensure an execution is scheduled\n    if (!timer) {\n      schedule(timeout);\n    }\n  }\n\n  callback.flush = flush;\n  callback.cancel = clear;\n\n  return callback;\n}\n\n/**\n * Throttle fn, calling at most once\n * in the given interval.\n *\n * @param  {Function} fn\n * @param  {Number} interval\n *\n * @return {Function} throttled function\n */\nfunction throttle(fn, interval) {\n  let throttling = false;\n\n  return function(...args) {\n\n    if (throttling) {\n      return;\n    }\n\n    fn(...args);\n    throttling = true;\n\n    setTimeout(() => {\n      throttling = false;\n    }, interval);\n  };\n}\n\n/**\n * Bind function against target <this>.\n *\n * @param  {Function} fn\n * @param  {Object}   target\n *\n * @return {Function} bound function\n */\nfunction bind(fn, target) {\n  return fn.bind(target);\n}\n\n/**\n * Convenience wrapper for `Object.assign`.\n *\n * @param {Object} target\n * @param {...Object} others\n *\n * @return {Object} the target\n */\nfunction assign(target, ...others) {\n  return Object.assign(target, ...others);\n}\n\n/**\n * Sets a nested property of a given object to the specified value.\n *\n * This mutates the object and returns it.\n *\n * @template T\n *\n * @param {T} target The target of the set operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} value The value to set.\n *\n * @return {T}\n */\nfunction set(target, path, value) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key, idx) {\n\n    if (typeof key !== 'number' && typeof key !== 'string') {\n      throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');\n    }\n\n    if (key === 'constructor') {\n      throw new Error('illegal key: constructor');\n    }\n\n    if (key === '__proto__') {\n      throw new Error('illegal key: __proto__');\n    }\n\n    let nextKey = path[idx + 1];\n    let nextTarget = currentTarget[key];\n\n    if (isDefined(nextKey) && isNil(nextTarget)) {\n      nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];\n    }\n\n    if (isUndefined(nextKey)) {\n      if (isUndefined(value)) {\n        delete currentTarget[key];\n      } else {\n        currentTarget[key] = value;\n      }\n    } else {\n      currentTarget = nextTarget;\n    }\n  });\n\n  return target;\n}\n\n\n/**\n * Gets a nested property of a given object.\n *\n * @param {Object} target The target of the get operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} [defaultValue] The value to return if no value exists.\n *\n * @return {any}\n */\nfunction get(target, path, defaultValue) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key) {\n\n    // accessing nil property yields <undefined>\n    if (isNil(currentTarget)) {\n      currentTarget = undefined;\n\n      return false;\n    }\n\n    currentTarget = currentTarget[key];\n  });\n\n  return isUndefined(currentTarget) ? defaultValue : currentTarget;\n}\n\n/**\n * Pick properties from the given target.\n *\n * @template T\n * @template {any[]} V\n *\n * @param {T} target\n * @param {V} properties\n *\n * @return Pick<T, V>\n */\nfunction pick(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(properties, function(prop) {\n\n    if (prop in obj) {\n      result[prop] = target[prop];\n    }\n  });\n\n  return result;\n}\n\n/**\n * Pick all target properties, excluding the given ones.\n *\n * @template T\n * @template {any[]} V\n *\n * @param {T} target\n * @param {V} properties\n *\n * @return {Omit<T, V>} target\n */\nfunction omit(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(obj, function(prop, key) {\n\n    if (properties.indexOf(key) === -1) {\n      result[key] = prop;\n    }\n  });\n\n  return result;\n}\n\n/**\n * Recursively merge `...sources` into given target.\n *\n * Does support merging objects; does not support merging arrays.\n *\n * @param {Object} target\n * @param {...Object} sources\n *\n * @return {Object} the target\n */\nfunction merge(target, ...sources) {\n\n  if (!sources.length) {\n    return target;\n  }\n\n  forEach(sources, function(source) {\n\n    // skip non-obj sources, i.e. null\n    if (!source || !isObject(source)) {\n      return;\n    }\n\n    forEach(source, function(sourceVal, key) {\n\n      if (key === '__proto__') {\n        return;\n      }\n\n      let targetVal = target[key];\n\n      if (isObject(sourceVal)) {\n\n        if (!isObject(targetVal)) {\n\n          // override target[key] with object\n          targetVal = {};\n        }\n\n        target[key] = merge(targetVal, sourceVal);\n      } else {\n        target[key] = sourceVal;\n      }\n\n    });\n  });\n\n  return target;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/bpmn-js/node_modules/min-dash/dist/index.esm.js\n");

/***/ }),

/***/ "../bpmn-io/diagram-js/node_modules/min-dash/dist/index.esm.js":
/*!*********************************************************************!*\
  !*** ../bpmn-io/diagram-js/node_modules/min-dash/dist/index.esm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   ensureArray: () => (/* binding */ ensureArray),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   find: () => (/* binding */ find),\n/* harmony export */   findIndex: () => (/* binding */ findIndex),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isNil: () => (/* binding */ isNil),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   keys: () => (/* binding */ keys),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   matchPattern: () => (/* binding */ matchPattern),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   sortBy: () => (/* binding */ sortBy),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   unionBy: () => (/* binding */ unionBy),\n/* harmony export */   uniqueBy: () => (/* binding */ uniqueBy),\n/* harmony export */   values: () => (/* binding */ values),\n/* harmony export */   without: () => (/* binding */ without)\n/* harmony export */ });\n/**\n * Flatten array, one level deep.\n *\n * @template T\n *\n * @param {T[][]} arr\n *\n * @return {T[]}\n */\nfunction flatten(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\nconst nativeToString = Object.prototype.toString;\nconst nativeHasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isUndefined(obj) {\n  return obj === undefined;\n}\n\nfunction isDefined(obj) {\n  return obj !== undefined;\n}\n\nfunction isNil(obj) {\n  return obj == null;\n}\n\nfunction isArray(obj) {\n  return nativeToString.call(obj) === '[object Array]';\n}\n\nfunction isObject(obj) {\n  return nativeToString.call(obj) === '[object Object]';\n}\n\nfunction isNumber(obj) {\n  return nativeToString.call(obj) === '[object Number]';\n}\n\n/**\n * @param {any} obj\n *\n * @return {boolean}\n */\nfunction isFunction(obj) {\n  const tag = nativeToString.call(obj);\n\n  return (\n    tag === '[object Function]' ||\n    tag === '[object AsyncFunction]' ||\n    tag === '[object GeneratorFunction]' ||\n    tag === '[object AsyncGeneratorFunction]' ||\n    tag === '[object Proxy]'\n  );\n}\n\nfunction isString(obj) {\n  return nativeToString.call(obj) === '[object String]';\n}\n\n\n/**\n * Ensure collection is an array.\n *\n * @param {Object} obj\n */\nfunction ensureArray(obj) {\n\n  if (isArray(obj)) {\n    return;\n  }\n\n  throw new Error('must supply array');\n}\n\n/**\n * Return true, if target owns a property with the given key.\n *\n * @param {Object} target\n * @param {String} key\n *\n * @return {Boolean}\n */\nfunction has(target, key) {\n  return nativeHasOwnProperty.call(target, key);\n}\n\n/**\n * @template T\n * @typedef { (\n *   ((e: T) => boolean) |\n *   ((e: T, idx: number) => boolean) |\n *   ((e: T, key: string) => boolean) |\n *   string |\n *   number\n * ) } Matcher\n */\n\n/**\n * @template T\n * @template U\n *\n * @typedef { (\n *   ((e: T) => U) | string | number\n * ) } Extractor\n */\n\n\n/**\n * @template T\n * @typedef { (val: T, key: any) => boolean } MatchFn\n */\n\n/**\n * @template T\n * @typedef { T[] } ArrayCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: string]: T } } StringKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: number]: T } } NumberKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { StringKeyValueCollection<T> | NumberKeyValueCollection<T> } KeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { KeyValueCollection<T> | ArrayCollection<T> } Collection\n */\n\n/**\n * Find element in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {Object}\n */\nfunction find(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let match;\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      match = val;\n\n      return false;\n    }\n  });\n\n  return match;\n\n}\n\n\n/**\n * Find element index in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {number}\n */\nfunction findIndex(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let idx = isArray(collection) ? -1 : undefined;\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      idx = key;\n\n      return false;\n    }\n  });\n\n  return idx;\n}\n\n\n/**\n * Filter elements in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {T[]} result\n */\nfunction filter(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      result.push(val);\n    }\n  });\n\n  return result;\n}\n\n\n/**\n * Iterate over collection; returning something\n * (non-undefined) will stop iteration.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator\n *\n * @return {T} return result that stopped the iteration\n */\nfunction forEach(collection, iterator) {\n\n  let val,\n      result;\n\n  if (isUndefined(collection)) {\n    return;\n  }\n\n  const convertKey = isArray(collection) ? toNum : identity;\n\n  for (let key in collection) {\n\n    if (has(collection, key)) {\n      val = collection[key];\n\n      result = iterator(val, convertKey(key));\n\n      if (result === false) {\n        return val;\n      }\n    }\n  }\n}\n\n/**\n * Return collection without element.\n *\n * @template T\n * @param {ArrayCollection<T>} arr\n * @param {Matcher<T>} matcher\n *\n * @return {T[]}\n */\nfunction without(arr, matcher) {\n\n  if (isUndefined(arr)) {\n    return [];\n  }\n\n  ensureArray(arr);\n\n  const matchFn = toMatcher(matcher);\n\n  return arr.filter(function(el, idx) {\n    return !matchFn(el, idx);\n  });\n\n}\n\n\n/**\n * Reduce collection, returning a single result.\n *\n * @template T\n * @template V\n *\n * @param {Collection<T>} collection\n * @param {(result: V, entry: T, index: any) => V} iterator\n * @param {V} result\n *\n * @return {V} result returned from last iterator\n */\nfunction reduce(collection, iterator, result) {\n\n  forEach(collection, function(value, idx) {\n    result = iterator(result, value, idx);\n  });\n\n  return result;\n}\n\n\n/**\n * Return true if every element in the collection\n * matches the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction every(collection, matcher) {\n\n  return !!reduce(collection, function(matches, val, key) {\n    return matches && matcher(val, key);\n  }, true);\n}\n\n\n/**\n * Return true if some elements in the collection\n * match the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction some(collection, matcher) {\n\n  return !!find(collection, matcher);\n}\n\n\n/**\n * Transform a collection into another collection\n * by piping each member through the given fn.\n *\n * @param  {Object|Array}   collection\n * @param  {Function} fn\n *\n * @return {Array} transformed collection\n */\nfunction map(collection, fn) {\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    result.push(fn(val, key));\n  });\n\n  return result;\n}\n\n\n/**\n * Get the collections keys.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction keys(collection) {\n  return collection && Object.keys(collection) || [];\n}\n\n\n/**\n * Shorthand for `keys(o).length`.\n *\n * @param  {Object|Array} collection\n *\n * @return {Number}\n */\nfunction size(collection) {\n  return keys(collection).length;\n}\n\n\n/**\n * Get the values in the collection.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction values(collection) {\n  return map(collection, (val) => val);\n}\n\n\n/**\n * Group collection members by attribute.\n *\n * @param {Object|Array} collection\n * @param {Extractor} extractor\n *\n * @return {Object} map with { attrValue => [ a, b, c ] }\n */\nfunction groupBy(collection, extractor, grouped = {}) {\n\n  extractor = toExtractor(extractor);\n\n  forEach(collection, function(val) {\n    let discriminator = extractor(val) || '_';\n\n    let group = grouped[discriminator];\n\n    if (!group) {\n      group = grouped[discriminator] = [];\n    }\n\n    group.push(val);\n  });\n\n  return grouped;\n}\n\n\nfunction uniqueBy(extractor, ...collections) {\n\n  extractor = toExtractor(extractor);\n\n  let grouped = {};\n\n  forEach(collections, (c) => groupBy(c, extractor, grouped));\n\n  let result = map(grouped, function(val, key) {\n    return val[0];\n  });\n\n  return result;\n}\n\n\nconst unionBy = uniqueBy;\n\n\n\n/**\n * Sort collection by criteria.\n *\n * @template T\n *\n * @param {Collection<T>} collection\n * @param {Extractor<T, number | string>} extractor\n *\n * @return {Array}\n */\nfunction sortBy(collection, extractor) {\n\n  extractor = toExtractor(extractor);\n\n  let sorted = [];\n\n  forEach(collection, function(value, key) {\n    let disc = extractor(value, key);\n\n    let entry = {\n      d: disc,\n      v: value\n    };\n\n    for (var idx = 0; idx < sorted.length; idx++) {\n      let { d } = sorted[idx];\n\n      if (disc < d) {\n        sorted.splice(idx, 0, entry);\n        return;\n      }\n    }\n\n    // not inserted, append (!)\n    sorted.push(entry);\n  });\n\n  return map(sorted, (e) => e.v);\n}\n\n\n/**\n * Create an object pattern matcher.\n *\n * @example\n *\n * ```javascript\n * const matcher = matchPattern({ id: 1 });\n *\n * let element = find(elements, matcher);\n * ```\n *\n * @template T\n *\n * @param {T} pattern\n *\n * @return { (el: any) =>  boolean } matcherFn\n */\nfunction matchPattern(pattern) {\n\n  return function(el) {\n\n    return every(pattern, function(val, key) {\n      return el[key] === val;\n    });\n\n  };\n}\n\n\n/**\n * @param {string | ((e: any) => any) } extractor\n *\n * @return { (e: any) => any }\n */\nfunction toExtractor(extractor) {\n\n  /**\n   * @satisfies { (e: any) => any }\n   */\n  return isFunction(extractor) ? extractor : (e) => {\n\n    // @ts-ignore: just works\n    return e[extractor];\n  };\n}\n\n\n/**\n * @template T\n * @param {Matcher<T>} matcher\n *\n * @return {MatchFn<T>}\n */\nfunction toMatcher(matcher) {\n  return isFunction(matcher) ? matcher : (e) => {\n    return e === matcher;\n  };\n}\n\n\nfunction identity(arg) {\n  return arg;\n}\n\nfunction toNum(arg) {\n  return Number(arg);\n}\n\n/* global setTimeout clearTimeout */\n\n/**\n * @typedef { {\n *   (...args: any[]): any;\n *   flush: () => void;\n *   cancel: () => void;\n * } } DebouncedFunction\n */\n\n/**\n * Debounce fn, calling it only once if the given time\n * elapsed between calls.\n *\n * Lodash-style the function exposes methods to `#clear`\n * and `#flush` to control internal behavior.\n *\n * @param  {Function} fn\n * @param  {Number} timeout\n *\n * @return {DebouncedFunction} debounced function\n */\nfunction debounce(fn, timeout) {\n\n  let timer;\n\n  let lastArgs;\n  let lastThis;\n\n  let lastNow;\n\n  function fire(force) {\n\n    let now = Date.now();\n\n    let scheduledDiff = force ? 0 : (lastNow + timeout) - now;\n\n    if (scheduledDiff > 0) {\n      return schedule(scheduledDiff);\n    }\n\n    fn.apply(lastThis, lastArgs);\n\n    clear();\n  }\n\n  function schedule(timeout) {\n    timer = setTimeout(fire, timeout);\n  }\n\n  function clear() {\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = lastNow = lastArgs = lastThis = undefined;\n  }\n\n  function flush() {\n    if (timer) {\n      fire(true);\n    }\n\n    clear();\n  }\n\n  /**\n   * @type { DebouncedFunction }\n   */\n  function callback(...args) {\n    lastNow = Date.now();\n\n    lastArgs = args;\n    lastThis = this;\n\n    // ensure an execution is scheduled\n    if (!timer) {\n      schedule(timeout);\n    }\n  }\n\n  callback.flush = flush;\n  callback.cancel = clear;\n\n  return callback;\n}\n\n/**\n * Throttle fn, calling at most once\n * in the given interval.\n *\n * @param  {Function} fn\n * @param  {Number} interval\n *\n * @return {Function} throttled function\n */\nfunction throttle(fn, interval) {\n  let throttling = false;\n\n  return function(...args) {\n\n    if (throttling) {\n      return;\n    }\n\n    fn(...args);\n    throttling = true;\n\n    setTimeout(() => {\n      throttling = false;\n    }, interval);\n  };\n}\n\n/**\n * Bind function against target <this>.\n *\n * @param  {Function} fn\n * @param  {Object}   target\n *\n * @return {Function} bound function\n */\nfunction bind(fn, target) {\n  return fn.bind(target);\n}\n\n/**\n * Convenience wrapper for `Object.assign`.\n *\n * @param {Object} target\n * @param {...Object} others\n *\n * @return {Object} the target\n */\nfunction assign(target, ...others) {\n  return Object.assign(target, ...others);\n}\n\n/**\n * Sets a nested property of a given object to the specified value.\n *\n * This mutates the object and returns it.\n *\n * @template T\n *\n * @param {T} target The target of the set operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} value The value to set.\n *\n * @return {T}\n */\nfunction set(target, path, value) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key, idx) {\n\n    if (typeof key !== 'number' && typeof key !== 'string') {\n      throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');\n    }\n\n    if (key === 'constructor') {\n      throw new Error('illegal key: constructor');\n    }\n\n    if (key === '__proto__') {\n      throw new Error('illegal key: __proto__');\n    }\n\n    let nextKey = path[idx + 1];\n    let nextTarget = currentTarget[key];\n\n    if (isDefined(nextKey) && isNil(nextTarget)) {\n      nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];\n    }\n\n    if (isUndefined(nextKey)) {\n      if (isUndefined(value)) {\n        delete currentTarget[key];\n      } else {\n        currentTarget[key] = value;\n      }\n    } else {\n      currentTarget = nextTarget;\n    }\n  });\n\n  return target;\n}\n\n\n/**\n * Gets a nested property of a given object.\n *\n * @param {Object} target The target of the get operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} [defaultValue] The value to return if no value exists.\n *\n * @return {any}\n */\nfunction get(target, path, defaultValue) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key) {\n\n    // accessing nil property yields <undefined>\n    if (isNil(currentTarget)) {\n      currentTarget = undefined;\n\n      return false;\n    }\n\n    currentTarget = currentTarget[key];\n  });\n\n  return isUndefined(currentTarget) ? defaultValue : currentTarget;\n}\n\n/**\n * Pick properties from the given target.\n *\n * @template T\n * @template {any[]} V\n *\n * @param {T} target\n * @param {V} properties\n *\n * @return Pick<T, V>\n */\nfunction pick(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(properties, function(prop) {\n\n    if (prop in obj) {\n      result[prop] = target[prop];\n    }\n  });\n\n  return result;\n}\n\n/**\n * Pick all target properties, excluding the given ones.\n *\n * @template T\n * @template {any[]} V\n *\n * @param {T} target\n * @param {V} properties\n *\n * @return {Omit<T, V>} target\n */\nfunction omit(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(obj, function(prop, key) {\n\n    if (properties.indexOf(key) === -1) {\n      result[key] = prop;\n    }\n  });\n\n  return result;\n}\n\n/**\n * Recursively merge `...sources` into given target.\n *\n * Does support merging objects; does not support merging arrays.\n *\n * @param {Object} target\n * @param {...Object} sources\n *\n * @return {Object} the target\n */\nfunction merge(target, ...sources) {\n\n  if (!sources.length) {\n    return target;\n  }\n\n  forEach(sources, function(source) {\n\n    // skip non-obj sources, i.e. null\n    if (!source || !isObject(source)) {\n      return;\n    }\n\n    forEach(source, function(sourceVal, key) {\n\n      if (key === '__proto__') {\n        return;\n      }\n\n      let targetVal = target[key];\n\n      if (isObject(sourceVal)) {\n\n        if (!isObject(targetVal)) {\n\n          // override target[key] with object\n          targetVal = {};\n        }\n\n        target[key] = merge(targetVal, sourceVal);\n      } else {\n        target[key] = sourceVal;\n      }\n\n    });\n  });\n\n  return target;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../bpmn-io/diagram-js/node_modules/min-dash/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/min-dash/dist/index.esm.js":
/*!*************************************************!*\
  !*** ./node_modules/min-dash/dist/index.esm.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   bind: () => (/* binding */ bind),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   ensureArray: () => (/* binding */ ensureArray),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   find: () => (/* binding */ find),\n/* harmony export */   findIndex: () => (/* binding */ findIndex),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isNil: () => (/* binding */ isNil),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   keys: () => (/* binding */ keys),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   matchPattern: () => (/* binding */ matchPattern),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   reduce: () => (/* binding */ reduce),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   sortBy: () => (/* binding */ sortBy),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   unionBy: () => (/* binding */ unionBy),\n/* harmony export */   uniqueBy: () => (/* binding */ uniqueBy),\n/* harmony export */   values: () => (/* binding */ values),\n/* harmony export */   without: () => (/* binding */ without)\n/* harmony export */ });\n/**\n * Flatten array, one level deep.\n *\n * @template T\n *\n * @param {T[][]} arr\n *\n * @return {T[]}\n */\nfunction flatten(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\nconst nativeToString = Object.prototype.toString;\nconst nativeHasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isUndefined(obj) {\n  return obj === undefined;\n}\n\nfunction isDefined(obj) {\n  return obj !== undefined;\n}\n\nfunction isNil(obj) {\n  return obj == null;\n}\n\nfunction isArray(obj) {\n  return nativeToString.call(obj) === '[object Array]';\n}\n\nfunction isObject(obj) {\n  return nativeToString.call(obj) === '[object Object]';\n}\n\nfunction isNumber(obj) {\n  return nativeToString.call(obj) === '[object Number]';\n}\n\n/**\n * @param {any} obj\n *\n * @return {boolean}\n */\nfunction isFunction(obj) {\n  const tag = nativeToString.call(obj);\n\n  return (\n    tag === '[object Function]' ||\n    tag === '[object AsyncFunction]' ||\n    tag === '[object GeneratorFunction]' ||\n    tag === '[object AsyncGeneratorFunction]' ||\n    tag === '[object Proxy]'\n  );\n}\n\nfunction isString(obj) {\n  return nativeToString.call(obj) === '[object String]';\n}\n\n\n/**\n * Ensure collection is an array.\n *\n * @param {Object} obj\n */\nfunction ensureArray(obj) {\n\n  if (isArray(obj)) {\n    return;\n  }\n\n  throw new Error('must supply array');\n}\n\n/**\n * Return true, if target owns a property with the given key.\n *\n * @param {Object} target\n * @param {String} key\n *\n * @return {Boolean}\n */\nfunction has(target, key) {\n  return nativeHasOwnProperty.call(target, key);\n}\n\n/**\n * @template T\n * @typedef { (\n *   ((e: T) => boolean) |\n *   ((e: T, idx: number) => boolean) |\n *   ((e: T, key: string) => boolean) |\n *   string |\n *   number\n * ) } Matcher\n */\n\n/**\n * @template T\n * @template U\n *\n * @typedef { (\n *   ((e: T) => U) | string | number\n * ) } Extractor\n */\n\n\n/**\n * @template T\n * @typedef { (val: T, key: any) => boolean } MatchFn\n */\n\n/**\n * @template T\n * @typedef { T[] } ArrayCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: string]: T } } StringKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: number]: T } } NumberKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { StringKeyValueCollection<T> | NumberKeyValueCollection<T> } KeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { KeyValueCollection<T> | ArrayCollection<T> } Collection\n */\n\n/**\n * Find element in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {Object}\n */\nfunction find(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let match;\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      match = val;\n\n      return false;\n    }\n  });\n\n  return match;\n\n}\n\n\n/**\n * Find element index in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {number}\n */\nfunction findIndex(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let idx = isArray(collection) ? -1 : undefined;\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      idx = key;\n\n      return false;\n    }\n  });\n\n  return idx;\n}\n\n\n/**\n * Filter elements in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {T[]} result\n */\nfunction filter(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      result.push(val);\n    }\n  });\n\n  return result;\n}\n\n\n/**\n * Iterate over collection; returning something\n * (non-undefined) will stop iteration.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator\n *\n * @return {T} return result that stopped the iteration\n */\nfunction forEach(collection, iterator) {\n\n  let val,\n      result;\n\n  if (isUndefined(collection)) {\n    return;\n  }\n\n  const convertKey = isArray(collection) ? toNum : identity;\n\n  for (let key in collection) {\n\n    if (has(collection, key)) {\n      val = collection[key];\n\n      result = iterator(val, convertKey(key));\n\n      if (result === false) {\n        return val;\n      }\n    }\n  }\n}\n\n/**\n * Return collection without element.\n *\n * @template T\n * @param {ArrayCollection<T>} arr\n * @param {Matcher<T>} matcher\n *\n * @return {T[]}\n */\nfunction without(arr, matcher) {\n\n  if (isUndefined(arr)) {\n    return [];\n  }\n\n  ensureArray(arr);\n\n  const matchFn = toMatcher(matcher);\n\n  return arr.filter(function(el, idx) {\n    return !matchFn(el, idx);\n  });\n\n}\n\n\n/**\n * Reduce collection, returning a single result.\n *\n * @template T\n * @template V\n *\n * @param {Collection<T>} collection\n * @param {(result: V, entry: T, index: any) => V} iterator\n * @param {V} result\n *\n * @return {V} result returned from last iterator\n */\nfunction reduce(collection, iterator, result) {\n\n  forEach(collection, function(value, idx) {\n    result = iterator(result, value, idx);\n  });\n\n  return result;\n}\n\n\n/**\n * Return true if every element in the collection\n * matches the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction every(collection, matcher) {\n\n  return !!reduce(collection, function(matches, val, key) {\n    return matches && matcher(val, key);\n  }, true);\n}\n\n\n/**\n * Return true if some elements in the collection\n * match the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction some(collection, matcher) {\n\n  return !!find(collection, matcher);\n}\n\n\n/**\n * Transform a collection into another collection\n * by piping each member through the given fn.\n *\n * @param  {Object|Array}   collection\n * @param  {Function} fn\n *\n * @return {Array} transformed collection\n */\nfunction map(collection, fn) {\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    result.push(fn(val, key));\n  });\n\n  return result;\n}\n\n\n/**\n * Get the collections keys.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction keys(collection) {\n  return collection && Object.keys(collection) || [];\n}\n\n\n/**\n * Shorthand for `keys(o).length`.\n *\n * @param  {Object|Array} collection\n *\n * @return {Number}\n */\nfunction size(collection) {\n  return keys(collection).length;\n}\n\n\n/**\n * Get the values in the collection.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction values(collection) {\n  return map(collection, (val) => val);\n}\n\n\n/**\n * Group collection members by attribute.\n *\n * @param {Object|Array} collection\n * @param {Extractor} extractor\n *\n * @return {Object} map with { attrValue => [ a, b, c ] }\n */\nfunction groupBy(collection, extractor, grouped = {}) {\n\n  extractor = toExtractor(extractor);\n\n  forEach(collection, function(val) {\n    let discriminator = extractor(val) || '_';\n\n    let group = grouped[discriminator];\n\n    if (!group) {\n      group = grouped[discriminator] = [];\n    }\n\n    group.push(val);\n  });\n\n  return grouped;\n}\n\n\nfunction uniqueBy(extractor, ...collections) {\n\n  extractor = toExtractor(extractor);\n\n  let grouped = {};\n\n  forEach(collections, (c) => groupBy(c, extractor, grouped));\n\n  let result = map(grouped, function(val, key) {\n    return val[0];\n  });\n\n  return result;\n}\n\n\nconst unionBy = uniqueBy;\n\n\n\n/**\n * Sort collection by criteria.\n *\n * @template T\n *\n * @param {Collection<T>} collection\n * @param {Extractor<T, number | string>} extractor\n *\n * @return {Array}\n */\nfunction sortBy(collection, extractor) {\n\n  extractor = toExtractor(extractor);\n\n  let sorted = [];\n\n  forEach(collection, function(value, key) {\n    let disc = extractor(value, key);\n\n    let entry = {\n      d: disc,\n      v: value\n    };\n\n    for (var idx = 0; idx < sorted.length; idx++) {\n      let { d } = sorted[idx];\n\n      if (disc < d) {\n        sorted.splice(idx, 0, entry);\n        return;\n      }\n    }\n\n    // not inserted, append (!)\n    sorted.push(entry);\n  });\n\n  return map(sorted, (e) => e.v);\n}\n\n\n/**\n * Create an object pattern matcher.\n *\n * @example\n *\n * ```javascript\n * const matcher = matchPattern({ id: 1 });\n *\n * let element = find(elements, matcher);\n * ```\n *\n * @template T\n *\n * @param {T} pattern\n *\n * @return { (el: any) =>  boolean } matcherFn\n */\nfunction matchPattern(pattern) {\n\n  return function(el) {\n\n    return every(pattern, function(val, key) {\n      return el[key] === val;\n    });\n\n  };\n}\n\n\n/**\n * @param {string | ((e: any) => any) } extractor\n *\n * @return { (e: any) => any }\n */\nfunction toExtractor(extractor) {\n\n  /**\n   * @satisfies { (e: any) => any }\n   */\n  return isFunction(extractor) ? extractor : (e) => {\n\n    // @ts-ignore: just works\n    return e[extractor];\n  };\n}\n\n\n/**\n * @template T\n * @param {Matcher<T>} matcher\n *\n * @return {MatchFn<T>}\n */\nfunction toMatcher(matcher) {\n  return isFunction(matcher) ? matcher : (e) => {\n    return e === matcher;\n  };\n}\n\n\nfunction identity(arg) {\n  return arg;\n}\n\nfunction toNum(arg) {\n  return Number(arg);\n}\n\n/* global setTimeout clearTimeout */\n\n/**\n * @typedef { {\n *   (...args: any[]): any;\n *   flush: () => void;\n *   cancel: () => void;\n * } } DebouncedFunction\n */\n\n/**\n * Debounce fn, calling it only once if the given time\n * elapsed between calls.\n *\n * Lodash-style the function exposes methods to `#clear`\n * and `#flush` to control internal behavior.\n *\n * @param  {Function} fn\n * @param  {Number} timeout\n *\n * @return {DebouncedFunction} debounced function\n */\nfunction debounce(fn, timeout) {\n\n  let timer;\n\n  let lastArgs;\n  let lastThis;\n\n  let lastNow;\n\n  function fire(force) {\n\n    let now = Date.now();\n\n    let scheduledDiff = force ? 0 : (lastNow + timeout) - now;\n\n    if (scheduledDiff > 0) {\n      return schedule(scheduledDiff);\n    }\n\n    fn.apply(lastThis, lastArgs);\n\n    clear();\n  }\n\n  function schedule(timeout) {\n    timer = setTimeout(fire, timeout);\n  }\n\n  function clear() {\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = lastNow = lastArgs = lastThis = undefined;\n  }\n\n  function flush() {\n    if (timer) {\n      fire(true);\n    }\n\n    clear();\n  }\n\n  /**\n   * @type { DebouncedFunction }\n   */\n  function callback(...args) {\n    lastNow = Date.now();\n\n    lastArgs = args;\n    lastThis = this;\n\n    // ensure an execution is scheduled\n    if (!timer) {\n      schedule(timeout);\n    }\n  }\n\n  callback.flush = flush;\n  callback.cancel = clear;\n\n  return callback;\n}\n\n/**\n * Throttle fn, calling at most once\n * in the given interval.\n *\n * @param  {Function} fn\n * @param  {Number} interval\n *\n * @return {Function} throttled function\n */\nfunction throttle(fn, interval) {\n  let throttling = false;\n\n  return function(...args) {\n\n    if (throttling) {\n      return;\n    }\n\n    fn(...args);\n    throttling = true;\n\n    setTimeout(() => {\n      throttling = false;\n    }, interval);\n  };\n}\n\n/**\n * Bind function against target <this>.\n *\n * @param  {Function} fn\n * @param  {Object}   target\n *\n * @return {Function} bound function\n */\nfunction bind(fn, target) {\n  return fn.bind(target);\n}\n\n/**\n * Convenience wrapper for `Object.assign`.\n *\n * @param {Object} target\n * @param {...Object} others\n *\n * @return {Object} the target\n */\nfunction assign(target, ...others) {\n  return Object.assign(target, ...others);\n}\n\n/**\n * Sets a nested property of a given object to the specified value.\n *\n * This mutates the object and returns it.\n *\n * @template T\n *\n * @param {T} target The target of the set operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} value The value to set.\n *\n * @return {T}\n */\nfunction set(target, path, value) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key, idx) {\n\n    if (typeof key !== 'number' && typeof key !== 'string') {\n      throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');\n    }\n\n    if (key === 'constructor') {\n      throw new Error('illegal key: constructor');\n    }\n\n    if (key === '__proto__') {\n      throw new Error('illegal key: __proto__');\n    }\n\n    let nextKey = path[idx + 1];\n    let nextTarget = currentTarget[key];\n\n    if (isDefined(nextKey) && isNil(nextTarget)) {\n      nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];\n    }\n\n    if (isUndefined(nextKey)) {\n      if (isUndefined(value)) {\n        delete currentTarget[key];\n      } else {\n        currentTarget[key] = value;\n      }\n    } else {\n      currentTarget = nextTarget;\n    }\n  });\n\n  return target;\n}\n\n\n/**\n * Gets a nested property of a given object.\n *\n * @param {Object} target The target of the get operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} [defaultValue] The value to return if no value exists.\n *\n * @return {any}\n */\nfunction get(target, path, defaultValue) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key) {\n\n    // accessing nil property yields <undefined>\n    if (isNil(currentTarget)) {\n      currentTarget = undefined;\n\n      return false;\n    }\n\n    currentTarget = currentTarget[key];\n  });\n\n  return isUndefined(currentTarget) ? defaultValue : currentTarget;\n}\n\n/**\n * Pick properties from the given target.\n *\n * @template T\n * @template {any[]} V\n *\n * @param {T} target\n * @param {V} properties\n *\n * @return Pick<T, V>\n */\nfunction pick(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(properties, function(prop) {\n\n    if (prop in obj) {\n      result[prop] = target[prop];\n    }\n  });\n\n  return result;\n}\n\n/**\n * Pick all target properties, excluding the given ones.\n *\n * @template T\n * @template {any[]} V\n *\n * @param {T} target\n * @param {V} properties\n *\n * @return {Omit<T, V>} target\n */\nfunction omit(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(obj, function(prop, key) {\n\n    if (properties.indexOf(key) === -1) {\n      result[key] = prop;\n    }\n  });\n\n  return result;\n}\n\n/**\n * Recursively merge `...sources` into given target.\n *\n * Does support merging objects; does not support merging arrays.\n *\n * @param {Object} target\n * @param {...Object} sources\n *\n * @return {Object} the target\n */\nfunction merge(target, ...sources) {\n\n  if (!sources.length) {\n    return target;\n  }\n\n  forEach(sources, function(source) {\n\n    // skip non-obj sources, i.e. null\n    if (!source || !isObject(source)) {\n      return;\n    }\n\n    forEach(source, function(sourceVal, key) {\n\n      if (key === '__proto__') {\n        return;\n      }\n\n      let targetVal = target[key];\n\n      if (isObject(sourceVal)) {\n\n        if (!isObject(targetVal)) {\n\n          // override target[key] with object\n          targetVal = {};\n        }\n\n        target[key] = merge(targetVal, sourceVal);\n      } else {\n        target[key] = sourceVal;\n      }\n\n    });\n  });\n\n  return target;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/min-dash/dist/index.esm.js\n");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval-source-map devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./src/features/index.js");
/******/ var __webpack_exports__default = __webpack_exports__["default"];
/******/ export { __webpack_exports__default as default };
/******/ 
